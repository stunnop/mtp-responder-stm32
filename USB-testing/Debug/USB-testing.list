
USB-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009434  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080094f4  080094f4  0000a4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009654  08009654  0000b1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009654  08009654  0000a654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800965c  0800965c  0000b1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800965c  0800965c  0000a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009660  08009660  0000a660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  08009664  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af8  200001a0  08009804  0000b1a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c98  08009804  0000bc98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015961  00000000  00000000  0000b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000371b  00000000  00000000  00020b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00024248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e35  00000000  00000000  000254d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178b4  00000000  00000000  00026305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001995d  00000000  00000000  0003dbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829ca  00000000  00000000  00057516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9ee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  000d9f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000de450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001a0 	.word	0x200001a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080094dc 	.word	0x080094dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001a4 	.word	0x200001a4
 8000104:	080094dc 	.word	0x080094dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fcdf 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f823 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f9bf 	bl	8000838 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ba:	f000 f89b 	bl	80005f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004be:	f000 f8d9 	bl	8000674 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004c2:	f000 f90f 	bl	80006e4 <MX_SPI2_Init>
  MX_TSC_Init();
 80004c6:	f000 f943 	bl	8000750 <MX_TSC_Init>
  MX_USART1_UART_Init();
 80004ca:	f000 f985 	bl	80007d8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004ce:	f008 fa13 	bl	80088f8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i =0 ; i < 50000;i++){}
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	e002      	b.n	80004de <main+0x36>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3301      	adds	r3, #1
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a04      	ldr	r2, [pc, #16]	@ (80004f4 <main+0x4c>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	ddf8      	ble.n	80004d8 <main+0x30>
	  HAL_GPIO_TogglePin(LD_G_GPIO_Port, LD_G_Pin);
 80004e6:	4b04      	ldr	r3, [pc, #16]	@ (80004f8 <main+0x50>)
 80004e8:	2110      	movs	r1, #16
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 ffc5 	bl	800147a <HAL_GPIO_TogglePin>
	  for(int i =0 ; i < 50000;i++){}
 80004f0:	e7ef      	b.n	80004d2 <main+0x2a>
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	0000c34f 	.word	0x0000c34f
 80004f8:	50000400 	.word	0x50000400

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b09d      	sub	sp, #116	@ 0x74
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	2438      	movs	r4, #56	@ 0x38
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2338      	movs	r3, #56	@ 0x38
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f008 ff55 	bl	80093bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000512:	2324      	movs	r3, #36	@ 0x24
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2314      	movs	r3, #20
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f008 ff4d 	bl	80093bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2324      	movs	r3, #36	@ 0x24
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f008 ff46 	bl	80093bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	4b2e      	ldr	r3, [pc, #184]	@ (80005ec <SystemClock_Config+0xf0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a2e      	ldr	r2, [pc, #184]	@ (80005f0 <SystemClock_Config+0xf4>)
 8000536:	401a      	ands	r2, r3
 8000538:	4b2c      	ldr	r3, [pc, #176]	@ (80005ec <SystemClock_Config+0xf0>)
 800053a:	2180      	movs	r1, #128	@ 0x80
 800053c:	0109      	lsls	r1, r1, #4
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2221      	movs	r2, #33	@ 0x21
 8000546:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	22a0      	movs	r2, #160	@ 0xa0
 800054c:	02d2      	lsls	r2, r2, #11
 800054e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000550:	0021      	movs	r1, r4
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2201      	movs	r2, #1
 8000556:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2202      	movs	r2, #2
 800055c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2280      	movs	r2, #128	@ 0x80
 8000562:	0252      	lsls	r2, r2, #9
 8000564:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	0352      	lsls	r2, r2, #13
 800056c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2280      	movs	r2, #128	@ 0x80
 8000572:	0412      	lsls	r2, r2, #16
 8000574:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	187b      	adds	r3, r7, r1
 8000578:	0018      	movs	r0, r3
 800057a:	f002 feff 	bl	800337c <HAL_RCC_OscConfig>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000582:	f000 fa07 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	2124      	movs	r1, #36	@ 0x24
 8000588:	187b      	adds	r3, r7, r1
 800058a:	220f      	movs	r2, #15
 800058c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2203      	movs	r2, #3
 8000592:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2101      	movs	r1, #1
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 faaa 	bl	8003b04 <HAL_RCC_ClockConfig>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80005b4:	f000 f9ee 	bl	8000994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80005b8:	003b      	movs	r3, r7
 80005ba:	2249      	movs	r2, #73	@ 0x49
 80005bc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005be:	003b      	movs	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	04d2      	lsls	r2, r2, #19
 80005d0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d2:	003b      	movs	r3, r7
 80005d4:	0018      	movs	r0, r3
 80005d6:	f003 fcb9 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80005de:	f000 f9d9 	bl	8000994 <Error_Handler>
  }
}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b01d      	add	sp, #116	@ 0x74
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	40007000 	.word	0x40007000
 80005f0:	ffffe7ff 	.word	0xffffe7ff

080005f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <MX_I2C1_Init+0x78>)
 80005fa:	4a1d      	ldr	r2, [pc, #116]	@ (8000670 <MX_I2C1_Init+0x7c>)
 80005fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80005fe:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <MX_I2C1_Init+0x78>)
 8000600:	22e1      	movs	r2, #225	@ 0xe1
 8000602:	00d2      	lsls	r2, r2, #3
 8000604:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <MX_I2C1_Init+0x78>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <MX_I2C1_Init+0x78>)
 800060e:	2201      	movs	r2, #1
 8000610:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_I2C1_Init+0x78>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <MX_I2C1_Init+0x78>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <MX_I2C1_Init+0x78>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_I2C1_Init+0x78>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <MX_I2C1_Init+0x78>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000630:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_I2C1_Init+0x78>)
 8000632:	0018      	movs	r0, r3
 8000634:	f000 ff3c 	bl	80014b0 <HAL_I2C_Init>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800063c:	f000 f9aa 	bl	8000994 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <MX_I2C1_Init+0x78>)
 8000642:	2100      	movs	r1, #0
 8000644:	0018      	movs	r0, r3
 8000646:	f000 ffc9 	bl	80015dc <HAL_I2CEx_ConfigAnalogFilter>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800064e:	f000 f9a1 	bl	8000994 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_I2C1_Init+0x78>)
 8000654:	2100      	movs	r1, #0
 8000656:	0018      	movs	r0, r3
 8000658:	f001 f80c 	bl	8001674 <HAL_I2CEx_ConfigDigitalFilter>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000660:	f000 f998 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	200001bc 	.word	0x200001bc
 8000670:	40005400 	.word	0x40005400

08000674 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_SPI1_Init+0x68>)
 800067a:	4a19      	ldr	r2, [pc, #100]	@ (80006e0 <MX_SPI1_Init+0x6c>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_SPI1_Init+0x68>)
 8000680:	2282      	movs	r2, #130	@ 0x82
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_SPI1_Init+0x68>)
 8000688:	2280      	movs	r2, #128	@ 0x80
 800068a:	0212      	lsls	r2, r2, #8
 800068c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_SPI1_Init+0x68>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_SPI1_Init+0x68>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_SPI1_Init+0x68>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_SPI1_Init+0x68>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <MX_SPI1_Init+0x68>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_SPI1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <MX_SPI1_Init+0x68>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_SPI1_Init+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <MX_SPI1_Init+0x68>)
 80006c0:	2207      	movs	r2, #7
 80006c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <MX_SPI1_Init+0x68>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f003 fdce 	bl	8004268 <HAL_SPI_Init>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d0:	f000 f960 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	20000210 	.word	0x20000210
 80006e0:	40013000 	.word	0x40013000

080006e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_SPI2_Init+0x64>)
 80006ea:	4a18      	ldr	r2, [pc, #96]	@ (800074c <MX_SPI2_Init+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_SPI2_Init+0x64>)
 80006f0:	2282      	movs	r2, #130	@ 0x82
 80006f2:	0052      	lsls	r2, r2, #1
 80006f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_SPI2_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_SPI2_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_SPI2_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_SPI2_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_SPI2_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_SPI2_Init+0x64>)
 800072e:	2207      	movs	r2, #7
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <MX_SPI2_Init+0x64>)
 8000734:	0018      	movs	r0, r3
 8000736:	f003 fd97 	bl	8004268 <HAL_SPI_Init>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 800073e:	f000 f929 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000268 	.word	0x20000268
 800074c:	40003800 	.word	0x40003800

08000750 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000754:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MX_TSC_Init+0x80>)
 8000756:	4a1f      	ldr	r2, [pc, #124]	@ (80007d4 <MX_TSC_Init+0x84>)
 8000758:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_TSC_Init+0x80>)
 800075c:	2280      	movs	r2, #128	@ 0x80
 800075e:	0552      	lsls	r2, r2, #21
 8000760:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <MX_TSC_Init+0x80>)
 8000764:	2280      	movs	r2, #128	@ 0x80
 8000766:	0452      	lsls	r2, r2, #17
 8000768:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_TSC_Init+0x80>)
 800076c:	2200      	movs	r2, #0
 800076e:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_TSC_Init+0x80>)
 8000772:	2201      	movs	r2, #1
 8000774:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_TSC_Init+0x80>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_TSC_Init+0x80>)
 800077e:	2280      	movs	r2, #128	@ 0x80
 8000780:	0192      	lsls	r2, r2, #6
 8000782:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_TSC_Init+0x80>)
 8000786:	22a0      	movs	r2, #160	@ 0xa0
 8000788:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_TSC_Init+0x80>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_TSC_Init+0x80>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_TSC_Init+0x80>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_TSC_Init+0x80>)
 800079e:	222c      	movs	r2, #44	@ 0x2c
 80007a0:	2100      	movs	r1, #0
 80007a2:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_TSC_Init+0x80>)
 80007a6:	2291      	movs	r2, #145	@ 0x91
 80007a8:	0092      	lsls	r2, r2, #2
 80007aa:	631a      	str	r2, [r3, #48]	@ 0x30
  htsc.Init.ShieldIOs = 0;
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_TSC_Init+0x80>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_TSC_Init+0x80>)
 80007b4:	2291      	movs	r2, #145	@ 0x91
 80007b6:	00d2      	lsls	r2, r2, #3
 80007b8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80007ba:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <MX_TSC_Init+0x80>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f003 fde7 	bl	8004390 <HAL_TSC_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80007c6:	f000 f8e5 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200002c0 	.word	0x200002c0
 80007d4:	40024000 	.word	0x40024000

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <MX_USART1_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007e4:	22e1      	movs	r2, #225	@ 0xe1
 80007e6:	0252      	lsls	r2, r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 800081c:	0018      	movs	r0, r3
 800081e:	f003 fe5d 	bl	80044dc <HAL_UART_Init>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f8b5 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000304 	.word	0x20000304
 8000834:	40013800 	.word	0x40013800

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08b      	sub	sp, #44	@ 0x2c
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	2414      	movs	r4, #20
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	2314      	movs	r3, #20
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f008 fdb7 	bl	80093bc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b4d      	ldr	r3, [pc, #308]	@ (8000984 <MX_GPIO_Init+0x14c>)
 8000850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000852:	4b4c      	ldr	r3, [pc, #304]	@ (8000984 <MX_GPIO_Init+0x14c>)
 8000854:	2104      	movs	r1, #4
 8000856:	430a      	orrs	r2, r1
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c
 800085a:	4b4a      	ldr	r3, [pc, #296]	@ (8000984 <MX_GPIO_Init+0x14c>)
 800085c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085e:	2204      	movs	r2, #4
 8000860:	4013      	ands	r3, r2
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b47      	ldr	r3, [pc, #284]	@ (8000984 <MX_GPIO_Init+0x14c>)
 8000868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800086a:	4b46      	ldr	r3, [pc, #280]	@ (8000984 <MX_GPIO_Init+0x14c>)
 800086c:	2180      	movs	r1, #128	@ 0x80
 800086e:	430a      	orrs	r2, r1
 8000870:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000872:	4b44      	ldr	r3, [pc, #272]	@ (8000984 <MX_GPIO_Init+0x14c>)
 8000874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b41      	ldr	r3, [pc, #260]	@ (8000984 <MX_GPIO_Init+0x14c>)
 8000880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000882:	4b40      	ldr	r3, [pc, #256]	@ (8000984 <MX_GPIO_Init+0x14c>)
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	62da      	str	r2, [r3, #44]	@ 0x2c
 800088a:	4b3e      	ldr	r3, [pc, #248]	@ (8000984 <MX_GPIO_Init+0x14c>)
 800088c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b3b      	ldr	r3, [pc, #236]	@ (8000984 <MX_GPIO_Init+0x14c>)
 8000898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800089a:	4b3a      	ldr	r3, [pc, #232]	@ (8000984 <MX_GPIO_Init+0x14c>)
 800089c:	2102      	movs	r1, #2
 800089e:	430a      	orrs	r2, r1
 80008a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008a2:	4b38      	ldr	r3, [pc, #224]	@ (8000984 <MX_GPIO_Init+0x14c>)
 80008a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a6:	2202      	movs	r2, #2
 80008a8:	4013      	ands	r3, r2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80008ae:	23a0      	movs	r3, #160	@ 0xa0
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fdc2 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 80008bc:	4932      	ldr	r1, [pc, #200]	@ (8000988 <MX_GPIO_Init+0x150>)
 80008be:	4b33      	ldr	r3, [pc, #204]	@ (800098c <MX_GPIO_Init+0x154>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fdbc 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2280      	movs	r2, #128	@ 0x80
 80008cc:	0192      	lsls	r2, r2, #6
 80008ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2288      	movs	r2, #136	@ 0x88
 80008d4:	0352      	lsls	r2, r2, #13
 80008d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000990 <MX_GPIO_Init+0x158>)
 80008e2:	0019      	movs	r1, r3
 80008e4:	0010      	movs	r0, r2
 80008e6:	f000 fc35 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2201      	movs	r2, #1
 80008ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2290      	movs	r2, #144	@ 0x90
 80008f4:	0352      	lsls	r2, r2, #13
 80008f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	193a      	adds	r2, r7, r4
 8000900:	23a0      	movs	r3, #160	@ 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fc24 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin ePD1_BUSY_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2281      	movs	r2, #129	@ 0x81
 8000910:	0052      	lsls	r2, r2, #1
 8000912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	193a      	adds	r2, r7, r4
 8000922:	23a0      	movs	r3, #160	@ 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fc13 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2220      	movs	r2, #32
 8000932:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2201      	movs	r2, #1
 8000938:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000946:	193a      	adds	r2, r7, r4
 8000948:	23a0      	movs	r3, #160	@ 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fc00 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin ePD1_PWR_ENn_Pin ePD1_D_C_Pin LD_G_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 8000954:	0021      	movs	r1, r4
 8000956:	187b      	adds	r3, r7, r1
 8000958:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <MX_GPIO_Init+0x150>)
 800095a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2201      	movs	r2, #1
 8000960:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	187b      	adds	r3, r7, r1
 8000970:	4a06      	ldr	r2, [pc, #24]	@ (800098c <MX_GPIO_Init+0x154>)
 8000972:	0019      	movs	r1, r3
 8000974:	0010      	movs	r0, r2
 8000976:	f000 fbed 	bl	8001154 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b00b      	add	sp, #44	@ 0x2c
 8000980:	bd90      	pop	{r4, r7, pc}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	40021000 	.word	0x40021000
 8000988:	00000c14 	.word	0x00000c14
 800098c:	50000400 	.word	0x50000400
 8000990:	50000800 	.word	0x50000800

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);
 800099c:	23a0      	movs	r3, #160	@ 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	2120      	movs	r1, #32
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fd69 	bl	800147a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80009a8:	23fa      	movs	r3, #250	@ 0xfa
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 facf 	bl	8000f50 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	e7f2      	b.n	800099c <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009bc:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <HAL_MspInit+0x24>)
 80009be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x24>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	430a      	orrs	r2, r1
 80009c6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <HAL_MspInit+0x24>)
 80009ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <HAL_MspInit+0x24>)
 80009ce:	2180      	movs	r1, #128	@ 0x80
 80009d0:	0549      	lsls	r1, r1, #21
 80009d2:	430a      	orrs	r2, r1
 80009d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b089      	sub	sp, #36	@ 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	240c      	movs	r4, #12
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	0018      	movs	r0, r3
 80009ee:	2314      	movs	r3, #20
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f008 fce2 	bl	80093bc <memset>
  if(hi2c->Instance==I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <HAL_I2C_MspInit+0x80>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d129      	bne.n	8000a56 <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <HAL_I2C_MspInit+0x84>)
 8000a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <HAL_I2C_MspInit+0x84>)
 8000a08:	2102      	movs	r1, #2
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <HAL_I2C_MspInit+0x84>)
 8000a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a12:	2202      	movs	r2, #2
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	22c0      	movs	r2, #192	@ 0xc0
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a22:	0021      	movs	r1, r4
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2212      	movs	r2, #18
 8000a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2203      	movs	r2, #3
 8000a34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2204      	movs	r2, #4
 8000a3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f000 fb86 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_I2C_MspInit+0x84>)
 8000a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_I2C_MspInit+0x84>)
 8000a4e:	2180      	movs	r1, #128	@ 0x80
 8000a50:	0389      	lsls	r1, r1, #14
 8000a52:	430a      	orrs	r2, r1
 8000a54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b009      	add	sp, #36	@ 0x24
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	40005400 	.word	0x40005400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	50000400 	.word	0x50000400

08000a6c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08b      	sub	sp, #44	@ 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	2414      	movs	r4, #20
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f008 fc9c 	bl	80093bc <memset>
  if(hspi->Instance==SPI1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a41      	ldr	r2, [pc, #260]	@ (8000b90 <HAL_SPI_MspInit+0x124>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d14c      	bne.n	8000b28 <HAL_SPI_MspInit+0xbc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a8e:	4b41      	ldr	r3, [pc, #260]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a92:	4b40      	ldr	r3, [pc, #256]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	0149      	lsls	r1, r1, #5
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aa0:	4b3c      	ldr	r3, [pc, #240]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aac:	2201      	movs	r2, #1
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b37      	ldr	r3, [pc, #220]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ab8:	4b36      	ldr	r3, [pc, #216]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000aba:	2102      	movs	r1, #2
 8000abc:	430a      	orrs	r2, r1
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ac0:	4b34      	ldr	r3, [pc, #208]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	0212      	lsls	r2, r2, #8
 8000ad2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000aec:	193a      	adds	r2, r7, r4
 8000aee:	23a0      	movs	r3, #160	@ 0xa0
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 fb2d 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8000afa:	0021      	movs	r1, r4
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2228      	movs	r2, #40	@ 0x28
 8000b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2202      	movs	r2, #2
 8000b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000b98 <HAL_SPI_MspInit+0x12c>)
 8000b1e:	0019      	movs	r1, r3
 8000b20:	0010      	movs	r0, r2
 8000b22:	f000 fb17 	bl	8001154 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b26:	e02e      	b.n	8000b86 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b9c <HAL_SPI_MspInit+0x130>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d129      	bne.n	8000b86 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b32:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	01c9      	lsls	r1, r1, #7
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000b46:	2102      	movs	r1, #2
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_SPI_MspInit+0x128>)
 8000b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b50:	2202      	movs	r2, #2
 8000b52:	4013      	ands	r3, r2
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000b58:	2114      	movs	r1, #20
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	22f0      	movs	r2, #240	@ 0xf0
 8000b5e:	0212      	lsls	r2, r2, #8
 8000b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2202      	movs	r2, #2
 8000b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2203      	movs	r2, #3
 8000b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	4a06      	ldr	r2, [pc, #24]	@ (8000b98 <HAL_SPI_MspInit+0x12c>)
 8000b7e:	0019      	movs	r1, r3
 8000b80:	0010      	movs	r0, r2
 8000b82:	f000 fae7 	bl	8001154 <HAL_GPIO_Init>
}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b00b      	add	sp, #44	@ 0x2c
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	40013000 	.word	0x40013000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	50000400 	.word	0x50000400
 8000b9c:	40003800 	.word	0x40003800

08000ba0 <HAL_TSC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htsc: TSC handle pointer
  * @retval None
  */
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b08b      	sub	sp, #44	@ 0x2c
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	2414      	movs	r4, #20
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	0018      	movs	r0, r3
 8000bae:	2314      	movs	r3, #20
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f008 fc02 	bl	80093bc <memset>
  if(htsc->Instance==TSC)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a41      	ldr	r2, [pc, #260]	@ (8000cc4 <HAL_TSC_MspInit+0x124>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d17c      	bne.n	8000cbc <HAL_TSC_MspInit+0x11c>
  {
    /* USER CODE BEGIN TSC_MspInit 0 */

    /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000bc2:	4b41      	ldr	r3, [pc, #260]	@ (8000cc8 <HAL_TSC_MspInit+0x128>)
 8000bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bc6:	4b40      	ldr	r3, [pc, #256]	@ (8000cc8 <HAL_TSC_MspInit+0x128>)
 8000bc8:	2180      	movs	r1, #128	@ 0x80
 8000bca:	0249      	lsls	r1, r1, #9
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc8 <HAL_TSC_MspInit+0x128>)
 8000bd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	025b      	lsls	r3, r3, #9
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc8 <HAL_TSC_MspInit+0x128>)
 8000be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000be2:	4b39      	ldr	r3, [pc, #228]	@ (8000cc8 <HAL_TSC_MspInit+0x128>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	430a      	orrs	r2, r1
 8000be8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bea:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <HAL_TSC_MspInit+0x128>)
 8000bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b34      	ldr	r3, [pc, #208]	@ (8000cc8 <HAL_TSC_MspInit+0x128>)
 8000bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bfa:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <HAL_TSC_MspInit+0x128>)
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c02:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <HAL_TSC_MspInit+0x128>)
 8000c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c06:	2202      	movs	r2, #2
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	2244      	movs	r2, #68	@ 0x44
 8000c12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	2202      	movs	r2, #2
 8000c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2203      	movs	r2, #3
 8000c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	193a      	adds	r2, r7, r4
 8000c2e:	23a0      	movs	r3, #160	@ 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fa8d 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2288      	movs	r2, #136	@ 0x88
 8000c3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2212      	movs	r2, #18
 8000c44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2203      	movs	r2, #3
 8000c56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	193a      	adds	r2, r7, r4
 8000c5a:	23a0      	movs	r3, #160	@ 0xa0
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fa77 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2201      	movs	r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2202      	movs	r2, #2
 8000c70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2203      	movs	r2, #3
 8000c82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	4a11      	ldr	r2, [pc, #68]	@ (8000ccc <HAL_TSC_MspInit+0x12c>)
 8000c88:	0019      	movs	r1, r3
 8000c8a:	0010      	movs	r0, r2
 8000c8c:	f000 fa62 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c90:	0021      	movs	r1, r4
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2202      	movs	r2, #2
 8000c96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2212      	movs	r2, #18
 8000c9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2203      	movs	r2, #3
 8000cae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	4a06      	ldr	r2, [pc, #24]	@ (8000ccc <HAL_TSC_MspInit+0x12c>)
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0010      	movs	r0, r2
 8000cb8:	f000 fa4c 	bl	8001154 <HAL_GPIO_Init>

    /* USER CODE END TSC_MspInit 1 */

  }

}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b00b      	add	sp, #44	@ 0x2c
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	40024000 	.word	0x40024000
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	50000400 	.word	0x50000400

08000cd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	240c      	movs	r4, #12
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	0018      	movs	r0, r3
 8000cde:	2314      	movs	r3, #20
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f008 fb6a 	bl	80093bc <memset>
  if(huart->Instance==USART1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a18      	ldr	r2, [pc, #96]	@ (8000d50 <HAL_UART_MspInit+0x80>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12a      	bne.n	8000d48 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cf6:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000cf8:	2180      	movs	r1, #128	@ 0x80
 8000cfa:	01c9      	lsls	r1, r1, #7
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d10:	2201      	movs	r2, #1
 8000d12:	4013      	ands	r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	22c0      	movs	r2, #192	@ 0xc0
 8000d1c:	00d2      	lsls	r2, r2, #3
 8000d1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	0021      	movs	r1, r4
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2202      	movs	r2, #2
 8000d26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2203      	movs	r2, #3
 8000d32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2204      	movs	r2, #4
 8000d38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	187a      	adds	r2, r7, r1
 8000d3c:	23a0      	movs	r3, #160	@ 0xa0
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 fa06 	bl	8001154 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b009      	add	sp, #36	@ 0x24
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	40013800 	.word	0x40013800
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	46c0      	nop			@ (mov r8, r8)
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d6c:	46c0      	nop			@ (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f8ca 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <USB_IRQHandler+0x14>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fde0 	bl	8001958 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	2000085c 	.word	0x2000085c

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f008 fb0c 	bl	80093f0 <__errno>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	425b      	negs	r3, r3
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	18d2      	adds	r2, r2, r3
 8000df2:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <_sbrk+0x64>)
 8000df4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b006      	add	sp, #24
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20002000 	.word	0x20002000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	2000038c 	.word	0x2000038c
 8000e0c:	20000c98 	.word	0x20000c98

08000e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000e1c:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e20:	f7ff fff6 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f008 fad7 	bl	80093fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fb2b 	bl	80004a8 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   r0, =_estack
 8000e54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8000e60:	08009664 	.word	0x08009664
  ldr r2, =_sbss
 8000e64:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000e68:	20000c98 	.word	0x20000c98

08000e6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_COMP_IRQHandler>
	...

08000e70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <HAL_Init+0x3c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_Init+0x3c>)
 8000e82:	2140      	movs	r1, #64	@ 0x40
 8000e84:	430a      	orrs	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 f811 	bl	8000eb0 <HAL_InitTick>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e001      	b.n	8000e9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9a:	f7ff fd8d 	bl	80009b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <HAL_InitTick+0x5c>)
 8000eba:	681c      	ldr	r4, [r3, #0]
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <HAL_InitTick+0x60>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	23fa      	movs	r3, #250	@ 0xfa
 8000ec4:	0098      	lsls	r0, r3, #2
 8000ec6:	f7ff f91f 	bl	8000108 <__udivsi3>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	0019      	movs	r1, r3
 8000ece:	0020      	movs	r0, r4
 8000ed0:	f7ff f91a 	bl	8000108 <__udivsi3>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 f92f 	bl	800113a <HAL_SYSTICK_Config>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e00f      	b.n	8000f04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d80b      	bhi.n	8000f02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	2301      	movs	r3, #1
 8000eee:	425b      	negs	r3, r3
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f8fc 	bl	80010f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_InitTick+0x64>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b003      	add	sp, #12
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	001a      	movs	r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_IncTick+0x20>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	18d2      	adds	r2, r2, r3
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_IncTick+0x20>)
 8000f2a:	601a      	str	r2, [r3, #0]
}
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000390 	.word	0x20000390

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b02      	ldr	r3, [pc, #8]	@ (8000f4c <HAL_GetTick+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	20000390 	.word	0x20000390

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff fff0 	bl	8000f3c <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	001a      	movs	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	189b      	adds	r3, r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	f7ff ffe0 	bl	8000f3c <HAL_GetTick>
 8000f7c:	0002      	movs	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000faa:	d809      	bhi.n	8000fc0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	231f      	movs	r3, #31
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <__NVIC_EnableIRQ+0x30>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4091      	lsls	r1, r2
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
  }
}
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fe0:	d828      	bhi.n	8001034 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80010a0 <__NVIC_SetPriority+0xd4>)
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	33c0      	adds	r3, #192	@ 0xc0
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	589b      	ldr	r3, [r3, r2]
 8000ff2:	1dfa      	adds	r2, r7, #7
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	00d2      	lsls	r2, r2, #3
 8000ffe:	21ff      	movs	r1, #255	@ 0xff
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	43d2      	mvns	r2, r2
 8001006:	401a      	ands	r2, r3
 8001008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	22ff      	movs	r2, #255	@ 0xff
 8001010:	401a      	ands	r2, r3
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0018      	movs	r0, r3
 8001018:	2303      	movs	r3, #3
 800101a:	4003      	ands	r3, r0
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001020:	481f      	ldr	r0, [pc, #124]	@ (80010a0 <__NVIC_SetPriority+0xd4>)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b25b      	sxtb	r3, r3
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	430a      	orrs	r2, r1
 800102c:	33c0      	adds	r3, #192	@ 0xc0
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001032:	e031      	b.n	8001098 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001034:	4a1b      	ldr	r2, [pc, #108]	@ (80010a4 <__NVIC_SetPriority+0xd8>)
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	0019      	movs	r1, r3
 800103c:	230f      	movs	r3, #15
 800103e:	400b      	ands	r3, r1
 8001040:	3b08      	subs	r3, #8
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3306      	adds	r3, #6
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	18d3      	adds	r3, r2, r3
 800104a:	3304      	adds	r3, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	1dfa      	adds	r2, r7, #7
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	0011      	movs	r1, r2
 8001054:	2203      	movs	r2, #3
 8001056:	400a      	ands	r2, r1
 8001058:	00d2      	lsls	r2, r2, #3
 800105a:	21ff      	movs	r1, #255	@ 0xff
 800105c:	4091      	lsls	r1, r2
 800105e:	000a      	movs	r2, r1
 8001060:	43d2      	mvns	r2, r2
 8001062:	401a      	ands	r2, r3
 8001064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	019b      	lsls	r3, r3, #6
 800106a:	22ff      	movs	r2, #255	@ 0xff
 800106c:	401a      	ands	r2, r3
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	0018      	movs	r0, r3
 8001074:	2303      	movs	r3, #3
 8001076:	4003      	ands	r3, r0
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800107c:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <__NVIC_SetPriority+0xd8>)
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	001c      	movs	r4, r3
 8001084:	230f      	movs	r3, #15
 8001086:	4023      	ands	r3, r4
 8001088:	3b08      	subs	r3, #8
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	430a      	orrs	r2, r1
 800108e:	3306      	adds	r3, #6
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	18c3      	adds	r3, r0, r3
 8001094:	3304      	adds	r3, #4
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b003      	add	sp, #12
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	045b      	lsls	r3, r3, #17
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d301      	bcc.n	80010c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010bc:	2301      	movs	r3, #1
 80010be:	e010      	b.n	80010e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c0:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <SysTick_Config+0x44>)
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	3a01      	subs	r2, #1
 80010c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c8:	2301      	movs	r3, #1
 80010ca:	425b      	negs	r3, r3
 80010cc:	2103      	movs	r1, #3
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff ff7c 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <SysTick_Config+0x44>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <SysTick_Config+0x44>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	210f      	movs	r1, #15
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	1c02      	adds	r2, r0, #0
 8001100:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	187b      	adds	r3, r7, r1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b004      	add	sp, #16
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	0002      	movs	r2, r0
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff ff33 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ffaf 	bl	80010a8 <SysTick_Config>
 800114a:	0003      	movs	r3, r0
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800116a:	e14f      	b.n	800140c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4091      	lsls	r1, r2
 8001176:	000a      	movs	r2, r1
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d100      	bne.n	8001184 <HAL_GPIO_Init+0x30>
 8001182:	e140      	b.n	8001406 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	4013      	ands	r3, r2
 800118c:	2b01      	cmp	r3, #1
 800118e:	d005      	beq.n	800119c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2203      	movs	r2, #3
 8001196:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001198:	2b02      	cmp	r3, #2
 800119a:	d130      	bne.n	80011fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	43da      	mvns	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	409a      	lsls	r2, r3
 80011be:	0013      	movs	r3, r2
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d2:	2201      	movs	r2, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	43da      	mvns	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	2201      	movs	r2, #1
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	4013      	ands	r3, r2
 8001206:	2b03      	cmp	r3, #3
 8001208:	d017      	beq.n	800123a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	43da      	mvns	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	409a      	lsls	r2, r3
 800122c:	0013      	movs	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2203      	movs	r2, #3
 8001240:	4013      	ands	r3, r2
 8001242:	2b02      	cmp	r3, #2
 8001244:	d123      	bne.n	800128e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	58d3      	ldr	r3, [r2, r3]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	2207      	movs	r2, #7
 8001258:	4013      	ands	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2107      	movs	r1, #7
 8001272:	400b      	ands	r3, r1
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	6939      	ldr	r1, [r7, #16]
 800128c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	43da      	mvns	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2203      	movs	r2, #3
 80012ac:	401a      	ands	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	23c0      	movs	r3, #192	@ 0xc0
 80012c8:	029b      	lsls	r3, r3, #10
 80012ca:	4013      	ands	r3, r2
 80012cc:	d100      	bne.n	80012d0 <HAL_GPIO_Init+0x17c>
 80012ce:	e09a      	b.n	8001406 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d0:	4b54      	ldr	r3, [pc, #336]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 80012d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012d4:	4b53      	ldr	r3, [pc, #332]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	430a      	orrs	r2, r1
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80012dc:	4a52      	ldr	r2, [pc, #328]	@ (8001428 <HAL_GPIO_Init+0x2d4>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	589b      	ldr	r3, [r3, r2]
 80012e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4013      	ands	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	409a      	lsls	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	43da      	mvns	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	23a0      	movs	r3, #160	@ 0xa0
 8001304:	05db      	lsls	r3, r3, #23
 8001306:	429a      	cmp	r2, r3
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x1ea>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a47      	ldr	r2, [pc, #284]	@ (800142c <HAL_GPIO_Init+0x2d8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x1e6>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a46      	ldr	r2, [pc, #280]	@ (8001430 <HAL_GPIO_Init+0x2dc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x1e2>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a45      	ldr	r2, [pc, #276]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x1de>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a44      	ldr	r2, [pc, #272]	@ (8001438 <HAL_GPIO_Init+0x2e4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x1da>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x1ec>
 800132e:	2306      	movs	r3, #6
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x1ec>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x1ec>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x1ec>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x1ec>
 800133e:	2300      	movs	r3, #0
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	2103      	movs	r1, #3
 8001344:	400a      	ands	r2, r1
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	@ (8001428 <HAL_GPIO_Init+0x2d4>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b37      	ldr	r3, [pc, #220]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	2380      	movs	r3, #128	@ 0x80
 8001374:	035b      	lsls	r3, r3, #13
 8001376:	4013      	ands	r3, r2
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001382:	4b2e      	ldr	r3, [pc, #184]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001388:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	039b      	lsls	r3, r3, #14
 80013a0:	4013      	ands	r3, r2
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ac:	4b23      	ldr	r3, [pc, #140]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80013b2:	4b22      	ldr	r3, [pc, #136]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	4013      	ands	r3, r2
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b17      	ldr	r3, [pc, #92]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43da      	mvns	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	4013      	ands	r3, r2
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	40da      	lsrs	r2, r3
 8001414:	1e13      	subs	r3, r2, #0
 8001416:	d000      	beq.n	800141a <HAL_GPIO_Init+0x2c6>
 8001418:	e6a8      	b.n	800116c <HAL_GPIO_Init+0x18>
  }
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b006      	add	sp, #24
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	50000400 	.word	0x50000400
 8001430:	50000800 	.word	0x50000800
 8001434:	50000c00 	.word	0x50000c00
 8001438:	50001c00 	.word	0x50001c00
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	0008      	movs	r0, r1
 800144a:	0011      	movs	r1, r2
 800144c:	1cbb      	adds	r3, r7, #2
 800144e:	1c02      	adds	r2, r0, #0
 8001450:	801a      	strh	r2, [r3, #0]
 8001452:	1c7b      	adds	r3, r7, #1
 8001454:	1c0a      	adds	r2, r1, #0
 8001456:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001458:	1c7b      	adds	r3, r7, #1
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001460:	1cbb      	adds	r3, r7, #2
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001468:	e003      	b.n	8001472 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800146a:	1cbb      	adds	r3, r7, #2
 800146c:	881a      	ldrh	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	000a      	movs	r2, r1
 8001484:	1cbb      	adds	r3, r7, #2
 8001486:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800148e:	1cbb      	adds	r3, r7, #2
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	041a      	lsls	r2, r3, #16
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	1cb9      	adds	r1, r7, #2
 800149e:	8809      	ldrh	r1, [r1, #0]
 80014a0:	400b      	ands	r3, r1
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
}
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b004      	add	sp, #16
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e082      	b.n	80015c8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2241      	movs	r2, #65	@ 0x41
 80014c6:	5c9b      	ldrb	r3, [r3, r2]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d107      	bne.n	80014de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2240      	movs	r2, #64	@ 0x40
 80014d2:	2100      	movs	r1, #0
 80014d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fa81 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2241      	movs	r2, #65	@ 0x41
 80014e2:	2124      	movs	r1, #36	@ 0x24
 80014e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	438a      	bics	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4934      	ldr	r1, [pc, #208]	@ (80015d0 <HAL_I2C_Init+0x120>)
 8001500:	400a      	ands	r2, r1
 8001502:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4931      	ldr	r1, [pc, #196]	@ (80015d4 <HAL_I2C_Init+0x124>)
 8001510:	400a      	ands	r2, r1
 8001512:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d108      	bne.n	800152e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2180      	movs	r1, #128	@ 0x80
 8001526:	0209      	lsls	r1, r1, #8
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	e007      	b.n	800153e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2184      	movs	r1, #132	@ 0x84
 8001538:	0209      	lsls	r1, r1, #8
 800153a:	430a      	orrs	r2, r1
 800153c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d104      	bne.n	8001550 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2280      	movs	r2, #128	@ 0x80
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	491f      	ldr	r1, [pc, #124]	@ (80015d8 <HAL_I2C_Init+0x128>)
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	491a      	ldr	r1, [pc, #104]	@ (80015d4 <HAL_I2C_Init+0x124>)
 800156c:	400a      	ands	r2, r1
 800156e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	431a      	orrs	r2, r3
 800157a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69d9      	ldr	r1, [r3, #28]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1a      	ldr	r2, [r3, #32]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2241      	movs	r2, #65	@ 0x41
 80015b4:	2120      	movs	r1, #32
 80015b6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2242      	movs	r2, #66	@ 0x42
 80015c2:	2100      	movs	r1, #0
 80015c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b002      	add	sp, #8
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	f0ffffff 	.word	0xf0ffffff
 80015d4:	ffff7fff 	.word	0xffff7fff
 80015d8:	02008000 	.word	0x02008000

080015dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2241      	movs	r2, #65	@ 0x41
 80015ea:	5c9b      	ldrb	r3, [r3, r2]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d138      	bne.n	8001664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2240      	movs	r2, #64	@ 0x40
 80015f6:	5c9b      	ldrb	r3, [r3, r2]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e032      	b.n	8001666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2240      	movs	r2, #64	@ 0x40
 8001604:	2101      	movs	r1, #1
 8001606:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2241      	movs	r2, #65	@ 0x41
 800160c:	2124      	movs	r1, #36	@ 0x24
 800160e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2101      	movs	r1, #1
 800161c:	438a      	bics	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4911      	ldr	r1, [pc, #68]	@ (8001670 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800162c:	400a      	ands	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2101      	movs	r1, #1
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2241      	movs	r2, #65	@ 0x41
 8001654:	2120      	movs	r1, #32
 8001656:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2240      	movs	r2, #64	@ 0x40
 800165c:	2100      	movs	r1, #0
 800165e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	e000      	b.n	8001666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001664:	2302      	movs	r3, #2
  }
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	ffffefff 	.word	0xffffefff

08001674 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2241      	movs	r2, #65	@ 0x41
 8001682:	5c9b      	ldrb	r3, [r3, r2]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b20      	cmp	r3, #32
 8001688:	d139      	bne.n	80016fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2240      	movs	r2, #64	@ 0x40
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001694:	2302      	movs	r3, #2
 8001696:	e033      	b.n	8001700 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2240      	movs	r2, #64	@ 0x40
 800169c:	2101      	movs	r1, #1
 800169e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2241      	movs	r2, #65	@ 0x41
 80016a4:	2124      	movs	r1, #36	@ 0x24
 80016a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2241      	movs	r2, #65	@ 0x41
 80016ee:	2120      	movs	r1, #32
 80016f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2240      	movs	r2, #64	@ 0x40
 80016f6:	2100      	movs	r1, #0
 80016f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016fe:	2302      	movs	r3, #2
  }
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b004      	add	sp, #16
 8001706:	bd80      	pop	{r7, pc}
 8001708:	fffff0ff 	.word	0xfffff0ff

0800170c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	b08b      	sub	sp, #44	@ 0x2c
 8001710:	af06      	add	r7, sp, #24
 8001712:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0f0      	b.n	8001900 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a79      	ldr	r2, [pc, #484]	@ (8001908 <HAL_PCD_Init+0x1fc>)
 8001722:	5c9b      	ldrb	r3, [r3, r2]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d108      	bne.n	800173c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	23aa      	movs	r3, #170	@ 0xaa
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	2100      	movs	r1, #0
 8001732:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0018      	movs	r0, r3
 8001738:	f007 fa5a 	bl	8008bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a72      	ldr	r2, [pc, #456]	@ (8001908 <HAL_PCD_Init+0x1fc>)
 8001740:	2103      	movs	r1, #3
 8001742:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0018      	movs	r0, r3
 800174a:	f003 fbdf 	bl	8004f0c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174e:	230f      	movs	r3, #15
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e049      	b.n	80017ec <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001758:	200f      	movs	r0, #15
 800175a:	183b      	adds	r3, r7, r0
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	0013      	movs	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	189b      	adds	r3, r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	18cb      	adds	r3, r1, r3
 800176c:	3301      	adds	r3, #1
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001772:	183b      	adds	r3, r7, r0
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	0013      	movs	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	189b      	adds	r3, r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	183a      	adds	r2, r7, r0
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001788:	183b      	adds	r3, r7, r0
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	0013      	movs	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	189b      	adds	r3, r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	18cb      	adds	r3, r1, r3
 800179a:	3303      	adds	r3, #3
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a0:	183b      	adds	r3, r7, r0
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	0013      	movs	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	189b      	adds	r3, r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	18cb      	adds	r3, r1, r3
 80017b0:	3338      	adds	r3, #56	@ 0x38
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017b6:	183b      	adds	r3, r7, r0
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	0013      	movs	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	189b      	adds	r3, r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	18cb      	adds	r3, r1, r3
 80017c6:	333c      	adds	r3, #60	@ 0x3c
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017cc:	183b      	adds	r3, r7, r0
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	0013      	movs	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	189b      	adds	r3, r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	18cb      	adds	r3, r1, r3
 80017dc:	3340      	adds	r3, #64	@ 0x40
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e2:	183b      	adds	r3, r7, r0
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	183b      	adds	r3, r7, r0
 80017e8:	3201      	adds	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	210f      	movs	r1, #15
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ae      	bcc.n	8001758 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e056      	b.n	80018b0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001802:	240f      	movs	r4, #15
 8001804:	193b      	adds	r3, r7, r4
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	236a      	movs	r3, #106	@ 0x6a
 800180c:	33ff      	adds	r3, #255	@ 0xff
 800180e:	0019      	movs	r1, r3
 8001810:	0013      	movs	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	189b      	adds	r3, r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	18c3      	adds	r3, r0, r3
 800181a:	185b      	adds	r3, r3, r1
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001820:	193b      	adds	r3, r7, r4
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	23b4      	movs	r3, #180	@ 0xb4
 8001828:	0059      	lsls	r1, r3, #1
 800182a:	0013      	movs	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	189b      	adds	r3, r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	18c3      	adds	r3, r0, r3
 8001834:	185b      	adds	r3, r3, r1
 8001836:	193a      	adds	r2, r7, r4
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800183c:	193b      	adds	r3, r7, r4
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	236c      	movs	r3, #108	@ 0x6c
 8001844:	33ff      	adds	r3, #255	@ 0xff
 8001846:	0019      	movs	r1, r3
 8001848:	0013      	movs	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	189b      	adds	r3, r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	18c3      	adds	r3, r0, r3
 8001852:	185b      	adds	r3, r3, r1
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001858:	193b      	adds	r3, r7, r4
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	23bc      	movs	r3, #188	@ 0xbc
 8001860:	0059      	lsls	r1, r3, #1
 8001862:	0013      	movs	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	189b      	adds	r3, r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	18c3      	adds	r3, r0, r3
 800186c:	185b      	adds	r3, r3, r1
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001872:	193b      	adds	r3, r7, r4
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	23be      	movs	r3, #190	@ 0xbe
 800187a:	0059      	lsls	r1, r3, #1
 800187c:	0013      	movs	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	189b      	adds	r3, r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	18c3      	adds	r3, r0, r3
 8001886:	185b      	adds	r3, r3, r1
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800188c:	193b      	adds	r3, r7, r4
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	23c0      	movs	r3, #192	@ 0xc0
 8001894:	0059      	lsls	r1, r3, #1
 8001896:	0013      	movs	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	189b      	adds	r3, r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	18c3      	adds	r3, r0, r3
 80018a0:	185b      	adds	r3, r3, r1
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	3201      	adds	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	230f      	movs	r3, #15
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3a1      	bcc.n	8001802 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	466a      	mov	r2, sp
 80018c6:	0011      	movs	r1, r2
 80018c8:	001a      	movs	r2, r3
 80018ca:	3210      	adds	r2, #16
 80018cc:	ca70      	ldmia	r2!, {r4, r5, r6}
 80018ce:	c170      	stmia	r1!, {r4, r5, r6}
 80018d0:	ca30      	ldmia	r2!, {r4, r5}
 80018d2:	c130      	stmia	r1!, {r4, r5}
 80018d4:	6859      	ldr	r1, [r3, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f003 fb31 	bl	8004f40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2224      	movs	r2, #36	@ 0x24
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <HAL_PCD_Init+0x1fc>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d103      	bne.n	80018fe <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f001 fd09 	bl	8003310 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b005      	add	sp, #20
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	000002a9 	.word	0x000002a9

0800190c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	23aa      	movs	r3, #170	@ 0xaa
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_PCD_Start+0x18>
 8001920:	2302      	movs	r3, #2
 8001922:	e014      	b.n	800194e <HAL_PCD_Start+0x42>
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	23aa      	movs	r3, #170	@ 0xaa
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	2101      	movs	r1, #1
 800192c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0018      	movs	r0, r3
 8001934:	f003 fad4 	bl	8004ee0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0018      	movs	r0, r3
 800193e:	f005 fad7 	bl	8006ef0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	23aa      	movs	r3, #170	@ 0xaa
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	2100      	movs	r1, #0
 800194a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0018      	movs	r0, r3
 8001966:	f005 fad9 	bl	8006f1c <USB_ReadInterrupts>
 800196a:	0003      	movs	r3, r0
 800196c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	4013      	ands	r3, r2
 8001976:	d004      	beq.n	8001982 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0018      	movs	r0, r3
 800197c:	f000 fb48 	bl	8002010 <PCD_EP_ISR_Handler>

    return;
 8001980:	e11d      	b.n	8001bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4013      	ands	r3, r2
 800198a:	d015      	beq.n	80019b8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2244      	movs	r2, #68	@ 0x44
 8001992:	5a9b      	ldrh	r3, [r3, r2]
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	498a      	ldr	r1, [pc, #552]	@ (8001bc4 <HAL_PCD_IRQHandler+0x26c>)
 800199c:	400a      	ands	r2, r1
 800199e:	b291      	uxth	r1, r2
 80019a0:	2244      	movs	r2, #68	@ 0x44
 80019a2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f007 f9a5 	bl	8008cf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2100      	movs	r1, #0
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 f915 	bl	8001be0 <HAL_PCD_SetAddress>

    return;
 80019b6:	e102      	b.n	8001bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	01db      	lsls	r3, r3, #7
 80019be:	4013      	ands	r3, r2
 80019c0:	d00c      	beq.n	80019dc <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2244      	movs	r2, #68	@ 0x44
 80019c8:	5a9b      	ldrh	r3, [r3, r2]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	497d      	ldr	r1, [pc, #500]	@ (8001bc8 <HAL_PCD_IRQHandler+0x270>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	b291      	uxth	r1, r2
 80019d6:	2244      	movs	r2, #68	@ 0x44
 80019d8:	5299      	strh	r1, [r3, r2]

    return;
 80019da:	e0f0      	b.n	8001bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	2380      	movs	r3, #128	@ 0x80
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	4013      	ands	r3, r2
 80019e4:	d00c      	beq.n	8001a00 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2244      	movs	r2, #68	@ 0x44
 80019ec:	5a9b      	ldrh	r3, [r3, r2]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4975      	ldr	r1, [pc, #468]	@ (8001bcc <HAL_PCD_IRQHandler+0x274>)
 80019f6:	400a      	ands	r2, r1
 80019f8:	b291      	uxth	r1, r2
 80019fa:	2244      	movs	r2, #68	@ 0x44
 80019fc:	5299      	strh	r1, [r3, r2]

    return;
 80019fe:	e0de      	b.n	8001bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	015b      	lsls	r3, r3, #5
 8001a06:	4013      	ands	r3, r2
 8001a08:	d038      	beq.n	8001a7c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2240      	movs	r2, #64	@ 0x40
 8001a10:	5a9b      	ldrh	r3, [r3, r2]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2104      	movs	r1, #4
 8001a1a:	438a      	bics	r2, r1
 8001a1c:	b291      	uxth	r1, r2
 8001a1e:	2240      	movs	r2, #64	@ 0x40
 8001a20:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2240      	movs	r2, #64	@ 0x40
 8001a28:	5a9b      	ldrh	r3, [r3, r2]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2108      	movs	r1, #8
 8001a32:	438a      	bics	r2, r1
 8001a34:	b291      	uxth	r1, r2
 8001a36:	2240      	movs	r2, #64	@ 0x40
 8001a38:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	23b8      	movs	r3, #184	@ 0xb8
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	5cd3      	ldrb	r3, [r2, r3]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d109      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	23b8      	movs	r3, #184	@ 0xb8
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2100      	movs	r1, #0
 8001a54:	0018      	movs	r0, r3
 8001a56:	f001 fc85 	bl	8003364 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f007 f98b 	bl	8008d78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2244      	movs	r2, #68	@ 0x44
 8001a68:	5a9b      	ldrh	r3, [r3, r2]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4957      	ldr	r1, [pc, #348]	@ (8001bd0 <HAL_PCD_IRQHandler+0x278>)
 8001a72:	400a      	ands	r2, r1
 8001a74:	b291      	uxth	r1, r2
 8001a76:	2244      	movs	r2, #68	@ 0x44
 8001a78:	5299      	strh	r1, [r3, r2]

    return;
 8001a7a:	e0a0      	b.n	8001bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4013      	ands	r3, r2
 8001a84:	d028      	beq.n	8001ad8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2240      	movs	r2, #64	@ 0x40
 8001a8c:	5a9b      	ldrh	r3, [r3, r2]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2108      	movs	r1, #8
 8001a96:	430a      	orrs	r2, r1
 8001a98:	b291      	uxth	r1, r2
 8001a9a:	2240      	movs	r2, #64	@ 0x40
 8001a9c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2244      	movs	r2, #68	@ 0x44
 8001aa4:	5a9b      	ldrh	r3, [r3, r2]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4949      	ldr	r1, [pc, #292]	@ (8001bd4 <HAL_PCD_IRQHandler+0x27c>)
 8001aae:	400a      	ands	r2, r1
 8001ab0:	b291      	uxth	r1, r2
 8001ab2:	2244      	movs	r2, #68	@ 0x44
 8001ab4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2240      	movs	r2, #64	@ 0x40
 8001abc:	5a9b      	ldrh	r3, [r3, r2]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	b291      	uxth	r1, r2
 8001aca:	2240      	movs	r2, #64	@ 0x40
 8001acc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f007 f935 	bl	8008d40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ad6:	e072      	b.n	8001bbe <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2280      	movs	r2, #128	@ 0x80
 8001adc:	4013      	ands	r3, r2
 8001ade:	d046      	beq.n	8001b6e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2244      	movs	r2, #68	@ 0x44
 8001ae6:	5a9b      	ldrh	r3, [r3, r2]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	438a      	bics	r2, r1
 8001af2:	b291      	uxth	r1, r2
 8001af4:	2244      	movs	r2, #68	@ 0x44
 8001af6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	23b8      	movs	r3, #184	@ 0xb8
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	5cd3      	ldrb	r3, [r2, r3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d12f      	bne.n	8001b64 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2240      	movs	r2, #64	@ 0x40
 8001b0a:	5a9b      	ldrh	r3, [r3, r2]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2104      	movs	r1, #4
 8001b14:	430a      	orrs	r2, r1
 8001b16:	b291      	uxth	r1, r2
 8001b18:	2240      	movs	r2, #64	@ 0x40
 8001b1a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2240      	movs	r2, #64	@ 0x40
 8001b22:	5a9b      	ldrh	r3, [r3, r2]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2108      	movs	r1, #8
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	b291      	uxth	r1, r2
 8001b30:	2240      	movs	r2, #64	@ 0x40
 8001b32:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	23b8      	movs	r3, #184	@ 0xb8
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2254      	movs	r2, #84	@ 0x54
 8001b44:	5a9b      	ldrh	r3, [r3, r2]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	223c      	movs	r2, #60	@ 0x3c
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	23b9      	movs	r3, #185	@ 0xb9
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f001 fc01 	bl	8003364 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001b62:	e02c      	b.n	8001bbe <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f007 f8ea 	bl	8008d40 <HAL_PCD_SuspendCallback>
    return;
 8001b6c:	e027      	b.n	8001bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	2380      	movs	r3, #128	@ 0x80
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d010      	beq.n	8001b9a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2244      	movs	r2, #68	@ 0x44
 8001b7e:	5a9b      	ldrh	r3, [r3, r2]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4914      	ldr	r1, [pc, #80]	@ (8001bd8 <HAL_PCD_IRQHandler+0x280>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	b291      	uxth	r1, r2
 8001b8c:	2244      	movs	r2, #68	@ 0x44
 8001b8e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f007 f8a0 	bl	8008cd8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b98:	e011      	b.n	8001bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d00c      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2244      	movs	r2, #68	@ 0x44
 8001baa:	5a9b      	ldrh	r3, [r3, r2]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	490a      	ldr	r1, [pc, #40]	@ (8001bdc <HAL_PCD_IRQHandler+0x284>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	b291      	uxth	r1, r2
 8001bb8:	2244      	movs	r2, #68	@ 0x44
 8001bba:	5299      	strh	r1, [r3, r2]

    return;
 8001bbc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b004      	add	sp, #16
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	fffffbff 	.word	0xfffffbff
 8001bc8:	ffffbfff 	.word	0xffffbfff
 8001bcc:	ffffdfff 	.word	0xffffdfff
 8001bd0:	ffffefff 	.word	0xffffefff
 8001bd4:	fffff7ff 	.word	0xfffff7ff
 8001bd8:	fffffdff 	.word	0xfffffdff
 8001bdc:	fffffeff 	.word	0xfffffeff

08001be0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	000a      	movs	r2, r1
 8001bea:	1cfb      	adds	r3, r7, #3
 8001bec:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	23aa      	movs	r3, #170	@ 0xaa
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_PCD_SetAddress+0x1e>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e017      	b.n	8001c2e <HAL_PCD_SetAddress+0x4e>
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	23aa      	movs	r3, #170	@ 0xaa
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	2101      	movs	r1, #1
 8001c06:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	1cfa      	adds	r2, r7, #3
 8001c0c:	2124      	movs	r1, #36	@ 0x24
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	1cfb      	adds	r3, r7, #3
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	0010      	movs	r0, r2
 8001c1e:	f005 f953 	bl	8006ec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	23aa      	movs	r3, #170	@ 0xaa
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	2100      	movs	r1, #0
 8001c2a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b002      	add	sp, #8
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c36:	b590      	push	{r4, r7, lr}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	000c      	movs	r4, r1
 8001c40:	0010      	movs	r0, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	1cfb      	adds	r3, r7, #3
 8001c46:	1c22      	adds	r2, r4, #0
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	003b      	movs	r3, r7
 8001c4c:	1c02      	adds	r2, r0, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
 8001c50:	1cbb      	adds	r3, r7, #2
 8001c52:	1c0a      	adds	r2, r1, #0
 8001c54:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c56:	230b      	movs	r3, #11
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c5e:	1cfb      	adds	r3, r7, #3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da0f      	bge.n	8001c88 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c68:	1cfb      	adds	r3, r7, #3
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	4013      	ands	r3, r2
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	0013      	movs	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	189b      	adds	r3, r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	705a      	strb	r2, [r3, #1]
 8001c86:	e00f      	b.n	8001ca8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c88:	1cfb      	adds	r3, r7, #3
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	401a      	ands	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	189b      	adds	r3, r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	3369      	adds	r3, #105	@ 0x69
 8001c9a:	33ff      	adds	r3, #255	@ 0xff
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	18d3      	adds	r3, r2, r3
 8001ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca8:	1cfb      	adds	r3, r7, #3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2207      	movs	r2, #7
 8001cae:	4013      	ands	r3, r2
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cb6:	003b      	movs	r3, r7
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1cba      	adds	r2, r7, #2
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cc6:	1cbb      	adds	r3, r7, #2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d102      	bne.n	8001cd4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	23aa      	movs	r3, #170	@ 0xaa
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_PCD_EP_Open+0xae>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e013      	b.n	8001d0c <HAL_PCD_EP_Open+0xd6>
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	23aa      	movs	r3, #170	@ 0xaa
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	2101      	movs	r1, #1
 8001cec:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	0011      	movs	r1, r2
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f003 f94a 	bl	8004f90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	23aa      	movs	r3, #170	@ 0xaa
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	2100      	movs	r1, #0
 8001d04:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001d06:	230b      	movs	r3, #11
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b005      	add	sp, #20
 8001d12:	bd90      	pop	{r4, r7, pc}

08001d14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	000a      	movs	r2, r1
 8001d1e:	1cfb      	adds	r3, r7, #3
 8001d20:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d22:	1cfb      	adds	r3, r7, #3
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da0f      	bge.n	8001d4c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	1cfb      	adds	r3, r7, #3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2207      	movs	r2, #7
 8001d32:	4013      	ands	r3, r2
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	0013      	movs	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	189b      	adds	r3, r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	705a      	strb	r2, [r3, #1]
 8001d4a:	e00f      	b.n	8001d6c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	1cfb      	adds	r3, r7, #3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2207      	movs	r2, #7
 8001d52:	401a      	ands	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	189b      	adds	r3, r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	3369      	adds	r3, #105	@ 0x69
 8001d5e:	33ff      	adds	r3, #255	@ 0xff
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	18d3      	adds	r3, r2, r3
 8001d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6c:	1cfb      	adds	r3, r7, #3
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2207      	movs	r2, #7
 8001d72:	4013      	ands	r3, r2
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	23aa      	movs	r3, #170	@ 0xaa
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_PCD_EP_Close+0x76>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e011      	b.n	8001dae <HAL_PCD_EP_Close+0x9a>
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	23aa      	movs	r3, #170	@ 0xaa
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	2101      	movs	r1, #1
 8001d92:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f003 fc99 	bl	80056d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	23aa      	movs	r3, #170	@ 0xaa
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	2100      	movs	r1, #0
 8001daa:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b004      	add	sp, #16
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	200b      	movs	r0, #11
 8001dc4:	183b      	adds	r3, r7, r0
 8001dc6:	1c0a      	adds	r2, r1, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	0001      	movs	r1, r0
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	189b      	adds	r3, r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	3369      	adds	r3, #105	@ 0x69
 8001dde:	33ff      	adds	r3, #255	@ 0xff
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	18d3      	adds	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2207      	movs	r2, #7
 8001e04:	4013      	ands	r3, r2
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	0011      	movs	r1, r2
 8001e14:	0018      	movs	r0, r3
 8001e16:	f003 fe1d 	bl	8005a54 <USB_EPStartXfer>

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b006      	add	sp, #24
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	200b      	movs	r0, #11
 8001e32:	183b      	adds	r3, r7, r0
 8001e34:	1c0a      	adds	r2, r1, #0
 8001e36:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e38:	183b      	adds	r3, r7, r0
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4013      	ands	r3, r2
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	0013      	movs	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	189b      	adds	r3, r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	18d3      	adds	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	2101      	movs	r1, #1
 8001e62:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2201      	movs	r2, #1
 8001e74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f003 fde1 	bl	8005a54 <USB_EPStartXfer>

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b006      	add	sp, #24
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	1cfb      	adds	r3, r7, #3
 8001ea8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eaa:	1cfb      	adds	r3, r7, #3
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2207      	movs	r2, #7
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d901      	bls.n	8001ebe <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e046      	b.n	8001f4c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ebe:	1cfb      	adds	r3, r7, #3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da0f      	bge.n	8001ee8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec8:	1cfb      	adds	r3, r7, #3
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2207      	movs	r2, #7
 8001ece:	4013      	ands	r3, r2
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	189b      	adds	r3, r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	18d3      	adds	r3, r2, r3
 8001ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	705a      	strb	r2, [r3, #1]
 8001ee6:	e00d      	b.n	8001f04 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ee8:	1cfb      	adds	r3, r7, #3
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	0013      	movs	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	189b      	adds	r3, r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	3369      	adds	r3, #105	@ 0x69
 8001ef6:	33ff      	adds	r3, #255	@ 0xff
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0a:	1cfb      	adds	r3, r7, #3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2207      	movs	r2, #7
 8001f10:	4013      	ands	r3, r2
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	23aa      	movs	r3, #170	@ 0xaa
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_PCD_EP_SetStall+0x8c>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e011      	b.n	8001f4c <HAL_PCD_EP_SetStall+0xb0>
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	23aa      	movs	r3, #170	@ 0xaa
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	2101      	movs	r1, #1
 8001f30:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	0011      	movs	r1, r2
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f004 fec2 	bl	8006cc4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	23aa      	movs	r3, #170	@ 0xaa
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	2100      	movs	r1, #0
 8001f48:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b004      	add	sp, #16
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	1cfb      	adds	r3, r7, #3
 8001f60:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f62:	1cfb      	adds	r3, r7, #3
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	220f      	movs	r2, #15
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d901      	bls.n	8001f76 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e048      	b.n	8002008 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f76:	1cfb      	adds	r3, r7, #3
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	da0f      	bge.n	8001fa0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f80:	1cfb      	adds	r3, r7, #3
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2207      	movs	r2, #7
 8001f86:	4013      	ands	r3, r2
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	0013      	movs	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	189b      	adds	r3, r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	18d3      	adds	r3, r2, r3
 8001f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	705a      	strb	r2, [r3, #1]
 8001f9e:	e00f      	b.n	8001fc0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa0:	1cfb      	adds	r3, r7, #3
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	189b      	adds	r3, r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	3369      	adds	r3, #105	@ 0x69
 8001fb2:	33ff      	adds	r3, #255	@ 0xff
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	18d3      	adds	r3, r2, r3
 8001fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc6:	1cfb      	adds	r3, r7, #3
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2207      	movs	r2, #7
 8001fcc:	4013      	ands	r3, r2
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	23aa      	movs	r3, #170	@ 0xaa
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_EP_ClrStall+0x90>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e011      	b.n	8002008 <HAL_PCD_EP_ClrStall+0xb4>
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	23aa      	movs	r3, #170	@ 0xaa
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	2101      	movs	r1, #1
 8001fec:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	0011      	movs	r1, r2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f004 feb4 	bl	8006d64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	23aa      	movs	r3, #170	@ 0xaa
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	2100      	movs	r1, #0
 8002004:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}

08002010 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b096      	sub	sp, #88	@ 0x58
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002018:	f000 fbec 	bl	80027f4 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	204e      	movs	r0, #78	@ 0x4e
 8002022:	183b      	adds	r3, r7, r0
 8002024:	2144      	movs	r1, #68	@ 0x44
 8002026:	5a52      	ldrh	r2, [r2, r1]
 8002028:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800202a:	183b      	adds	r3, r7, r0
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	244d      	movs	r4, #77	@ 0x4d
 8002032:	193b      	adds	r3, r7, r4
 8002034:	210f      	movs	r1, #15
 8002036:	400a      	ands	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800203a:	193b      	adds	r3, r7, r4
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d000      	beq.n	8002044 <PCD_EP_ISR_Handler+0x34>
 8002042:	e18f      	b.n	8002364 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002044:	183b      	adds	r3, r7, r0
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	2210      	movs	r2, #16
 800204a:	4013      	ands	r3, r2
 800204c:	d155      	bne.n	80020fa <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	b29a      	uxth	r2, r3
 8002056:	200e      	movs	r0, #14
 8002058:	183b      	adds	r3, r7, r0
 800205a:	49bb      	ldr	r1, [pc, #748]	@ (8002348 <PCD_EP_ISR_Handler+0x338>)
 800205c:	400a      	ands	r2, r1
 800205e:	801a      	strh	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	183a      	adds	r2, r7, r0
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	49b8      	ldr	r1, [pc, #736]	@ (800234c <PCD_EP_ISR_Handler+0x33c>)
 800206a:	430a      	orrs	r2, r1
 800206c:	b292      	uxth	r2, r2
 800206e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3328      	adds	r3, #40	@ 0x28
 8002074:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2250      	movs	r2, #80	@ 0x50
 800207c:	5a9b      	ldrh	r3, [r3, r2]
 800207e:	b29b      	uxth	r3, r3
 8002080:	001a      	movs	r2, r3
 8002082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	18d2      	adds	r2, r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	18d3      	adds	r3, r2, r3
 8002090:	4aaf      	ldr	r2, [pc, #700]	@ (8002350 <PCD_EP_ISR_Handler+0x340>)
 8002092:	4694      	mov	ip, r2
 8002094:	4463      	add	r3, ip
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	059b      	lsls	r3, r3, #22
 800209a:	0d9a      	lsrs	r2, r3, #22
 800209c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80020a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	18d2      	adds	r2, r2, r3
 80020aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2100      	movs	r1, #0
 80020b2:	0018      	movs	r0, r3
 80020b4:	f006 fdf2 	bl	8008c9c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	@ 0x24
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <PCD_EP_ISR_Handler+0xb8>
 80020c4:	f000 fb96 	bl	80027f4 <PCD_EP_ISR_Handler+0x7e4>
 80020c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <PCD_EP_ISR_Handler+0xc4>
 80020d0:	f000 fb90 	bl	80027f4 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	@ 0x24
 80020d8:	5c9b      	ldrb	r3, [r3, r2]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	4252      	negs	r2, r2
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0011      	movs	r1, r2
 80020ea:	224c      	movs	r2, #76	@ 0x4c
 80020ec:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2224      	movs	r2, #36	@ 0x24
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]
 80020f6:	f000 fb7d 	bl	80027f4 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3369      	adds	r3, #105	@ 0x69
 80020fe:	33ff      	adds	r3, #255	@ 0xff
 8002100:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	214a      	movs	r1, #74	@ 0x4a
 8002108:	187b      	adds	r3, r7, r1
 800210a:	8812      	ldrh	r2, [r2, #0]
 800210c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800210e:	187b      	adds	r3, r7, r1
 8002110:	881a      	ldrh	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	4013      	ands	r3, r2
 8002118:	d037      	beq.n	800218a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2250      	movs	r2, #80	@ 0x50
 8002120:	5a9b      	ldrh	r3, [r3, r2]
 8002122:	b29b      	uxth	r3, r3
 8002124:	001a      	movs	r2, r3
 8002126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	18d2      	adds	r2, r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	18d3      	adds	r3, r2, r3
 8002134:	4a87      	ldr	r2, [pc, #540]	@ (8002354 <PCD_EP_ISR_Handler+0x344>)
 8002136:	4694      	mov	ip, r2
 8002138:	4463      	add	r3, ip
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	059b      	lsls	r3, r3, #22
 800213e:	0d9a      	lsrs	r2, r3, #22
 8002140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002142:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	22ac      	movs	r2, #172	@ 0xac
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	1899      	adds	r1, r3, r2
 8002150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002152:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002156:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002158:	b29b      	uxth	r3, r3
 800215a:	f004 ff37 	bl	8006fcc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29a      	uxth	r2, r3
 8002166:	2010      	movs	r0, #16
 8002168:	183b      	adds	r3, r7, r0
 800216a:	497b      	ldr	r1, [pc, #492]	@ (8002358 <PCD_EP_ISR_Handler+0x348>)
 800216c:	400a      	ands	r2, r1
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	183a      	adds	r2, r7, r0
 8002176:	8812      	ldrh	r2, [r2, #0]
 8002178:	2180      	movs	r1, #128	@ 0x80
 800217a:	430a      	orrs	r2, r1
 800217c:	b292      	uxth	r2, r2
 800217e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	0018      	movs	r0, r3
 8002184:	f006 fd54 	bl	8008c30 <HAL_PCD_SetupStageCallback>
 8002188:	e334      	b.n	80027f4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800218a:	234a      	movs	r3, #74	@ 0x4a
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2200      	movs	r2, #0
 8002190:	5e9b      	ldrsh	r3, [r3, r2]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db00      	blt.n	8002198 <PCD_EP_ISR_Handler+0x188>
 8002196:	e32d      	b.n	80027f4 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	201e      	movs	r0, #30
 80021a2:	183b      	adds	r3, r7, r0
 80021a4:	496c      	ldr	r1, [pc, #432]	@ (8002358 <PCD_EP_ISR_Handler+0x348>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	801a      	strh	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	183a      	adds	r2, r7, r0
 80021b0:	8812      	ldrh	r2, [r2, #0]
 80021b2:	2180      	movs	r1, #128	@ 0x80
 80021b4:	430a      	orrs	r2, r1
 80021b6:	b292      	uxth	r2, r2
 80021b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2250      	movs	r2, #80	@ 0x50
 80021c0:	5a9b      	ldrh	r3, [r3, r2]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	001a      	movs	r2, r3
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	18d2      	adds	r2, r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	18d3      	adds	r3, r2, r3
 80021d4:	4a5f      	ldr	r2, [pc, #380]	@ (8002354 <PCD_EP_ISR_Handler+0x344>)
 80021d6:	4694      	mov	ip, r2
 80021d8:	4463      	add	r3, ip
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	059b      	lsls	r3, r3, #22
 80021de:	0d9a      	lsrs	r2, r3, #22
 80021e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01a      	beq.n	8002222 <PCD_EP_ISR_Handler+0x212>
 80021ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d016      	beq.n	8002222 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fa:	6959      	ldr	r1, [r3, #20]
 80021fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002202:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002204:	b29b      	uxth	r3, r3
 8002206:	f004 fee1 	bl	8006fcc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800220a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	18d2      	adds	r2, r2, r3
 8002214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002216:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2100      	movs	r1, #0
 800221c:	0018      	movs	r0, r3
 800221e:	f006 fd1c 	bl	8008c5a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	214a      	movs	r1, #74	@ 0x4a
 8002228:	187b      	adds	r3, r7, r1
 800222a:	8812      	ldrh	r2, [r2, #0]
 800222c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800222e:	187b      	adds	r3, r7, r1
 8002230:	881a      	ldrh	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	4013      	ands	r3, r2
 8002238:	d000      	beq.n	800223c <PCD_EP_ISR_Handler+0x22c>
 800223a:	e2db      	b.n	80027f4 <PCD_EP_ISR_Handler+0x7e4>
 800223c:	187b      	adds	r3, r7, r1
 800223e:	881a      	ldrh	r2, [r3, #0]
 8002240:	23c0      	movs	r3, #192	@ 0xc0
 8002242:	019b      	lsls	r3, r3, #6
 8002244:	401a      	ands	r2, r3
 8002246:	23c0      	movs	r3, #192	@ 0xc0
 8002248:	019b      	lsls	r3, r3, #6
 800224a:	429a      	cmp	r2, r3
 800224c:	d100      	bne.n	8002250 <PCD_EP_ISR_Handler+0x240>
 800224e:	e2d1      	b.n	80027f4 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2250      	movs	r2, #80	@ 0x50
 800225c:	5a9b      	ldrh	r3, [r3, r2]
 800225e:	b29b      	uxth	r3, r3
 8002260:	001a      	movs	r2, r3
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	189b      	adds	r3, r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4a3a      	ldr	r2, [pc, #232]	@ (8002354 <PCD_EP_ISR_Handler+0x344>)
 800226c:	4694      	mov	ip, r2
 800226e:	4463      	add	r3, ip
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	059b      	lsls	r3, r3, #22
 800227a:	0d9b      	lsrs	r3, r3, #22
 800227c:	b29a      	uxth	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	801a      	strh	r2, [r3, #0]
 8002282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b3e      	cmp	r3, #62	@ 0x3e
 8002288:	d91a      	bls.n	80022c0 <PCD_EP_ISR_Handler+0x2b0>
 800228a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	647b      	str	r3, [r7, #68]	@ 0x44
 8002292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	221f      	movs	r2, #31
 8002298:	4013      	ands	r3, r2
 800229a:	d102      	bne.n	80022a2 <PCD_EP_ISR_Handler+0x292>
 800229c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800229e:	3b01      	subs	r3, #1
 80022a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4313      	orrs	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4a25      	ldr	r2, [pc, #148]	@ (800234c <PCD_EP_ISR_Handler+0x33c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	801a      	strh	r2, [r3, #0]
 80022be:	e023      	b.n	8002308 <PCD_EP_ISR_Handler+0x2f8>
 80022c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d108      	bne.n	80022da <PCD_EP_ISR_Handler+0x2ca>
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4a1f      	ldr	r2, [pc, #124]	@ (800234c <PCD_EP_ISR_Handler+0x33c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	801a      	strh	r2, [r3, #0]
 80022d8:	e016      	b.n	8002308 <PCD_EP_ISR_Handler+0x2f8>
 80022da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80022e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	d002      	beq.n	80022f2 <PCD_EP_ISR_Handler+0x2e2>
 80022ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ee:	3301      	adds	r3, #1
 80022f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	029b      	lsls	r3, r3, #10
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	b29a      	uxth	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29a      	uxth	r2, r3
 8002310:	2012      	movs	r0, #18
 8002312:	183b      	adds	r3, r7, r0
 8002314:	4911      	ldr	r1, [pc, #68]	@ (800235c <PCD_EP_ISR_Handler+0x34c>)
 8002316:	400a      	ands	r2, r1
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	183b      	adds	r3, r7, r0
 800231c:	183a      	adds	r2, r7, r0
 800231e:	8812      	ldrh	r2, [r2, #0]
 8002320:	2180      	movs	r1, #128	@ 0x80
 8002322:	0149      	lsls	r1, r1, #5
 8002324:	404a      	eors	r2, r1
 8002326:	801a      	strh	r2, [r3, #0]
 8002328:	183b      	adds	r3, r7, r0
 800232a:	183a      	adds	r2, r7, r0
 800232c:	8812      	ldrh	r2, [r2, #0]
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	0189      	lsls	r1, r1, #6
 8002332:	404a      	eors	r2, r1
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	183a      	adds	r2, r7, r0
 800233c:	8812      	ldrh	r2, [r2, #0]
 800233e:	4908      	ldr	r1, [pc, #32]	@ (8002360 <PCD_EP_ISR_Handler+0x350>)
 8002340:	430a      	orrs	r2, r1
 8002342:	b292      	uxth	r2, r2
 8002344:	801a      	strh	r2, [r3, #0]
 8002346:	e255      	b.n	80027f4 <PCD_EP_ISR_Handler+0x7e4>
 8002348:	ffff8f0f 	.word	0xffff8f0f
 800234c:	ffff8000 	.word	0xffff8000
 8002350:	00000402 	.word	0x00000402
 8002354:	00000406 	.word	0x00000406
 8002358:	00000f8f 	.word	0x00000f8f
 800235c:	ffffbf8f 	.word	0xffffbf8f
 8002360:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	001a      	movs	r2, r3
 800236a:	204d      	movs	r0, #77	@ 0x4d
 800236c:	183b      	adds	r3, r7, r0
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	18d2      	adds	r2, r2, r3
 8002374:	214a      	movs	r1, #74	@ 0x4a
 8002376:	187b      	adds	r3, r7, r1
 8002378:	8812      	ldrh	r2, [r2, #0]
 800237a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800237c:	187b      	adds	r3, r7, r1
 800237e:	2200      	movs	r2, #0
 8002380:	5e9b      	ldrsh	r3, [r3, r2]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db00      	blt.n	8002388 <PCD_EP_ISR_Handler+0x378>
 8002386:	e0fa      	b.n	800257e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	001a      	movs	r2, r3
 800238e:	183b      	adds	r3, r7, r0
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b29a      	uxth	r2, r3
 800239a:	2448      	movs	r4, #72	@ 0x48
 800239c:	193b      	adds	r3, r7, r4
 800239e:	49d1      	ldr	r1, [pc, #836]	@ (80026e4 <PCD_EP_ISR_Handler+0x6d4>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	801a      	strh	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	001a      	movs	r2, r3
 80023aa:	183b      	adds	r3, r7, r0
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	18d3      	adds	r3, r2, r3
 80023b2:	193a      	adds	r2, r7, r4
 80023b4:	8812      	ldrh	r2, [r2, #0]
 80023b6:	2180      	movs	r1, #128	@ 0x80
 80023b8:	430a      	orrs	r2, r1
 80023ba:	b292      	uxth	r2, r2
 80023bc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80023be:	183b      	adds	r3, r7, r0
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	0013      	movs	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	189b      	adds	r3, r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	3369      	adds	r3, #105	@ 0x69
 80023cc:	33ff      	adds	r3, #255	@ 0xff
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80023d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d6:	7b1b      	ldrb	r3, [r3, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d125      	bne.n	8002428 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2250      	movs	r2, #80	@ 0x50
 80023e2:	5a9b      	ldrh	r3, [r3, r2]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	001a      	movs	r2, r3
 80023e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	18d2      	adds	r2, r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	18d3      	adds	r3, r2, r3
 80023f6:	4abc      	ldr	r2, [pc, #752]	@ (80026e8 <PCD_EP_ISR_Handler+0x6d8>)
 80023f8:	4694      	mov	ip, r2
 80023fa:	4463      	add	r3, ip
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	2450      	movs	r4, #80	@ 0x50
 8002400:	193b      	adds	r3, r7, r4
 8002402:	0592      	lsls	r2, r2, #22
 8002404:	0d92      	lsrs	r2, r2, #22
 8002406:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002408:	193b      	adds	r3, r7, r4
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d100      	bne.n	8002412 <PCD_EP_ISR_Handler+0x402>
 8002410:	e08d      	b.n	800252e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002418:	6959      	ldr	r1, [r3, #20]
 800241a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241c:	88da      	ldrh	r2, [r3, #6]
 800241e:	193b      	adds	r3, r7, r4
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	f004 fdd3 	bl	8006fcc <USB_ReadPMA>
 8002426:	e082      	b.n	800252e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242a:	78db      	ldrb	r3, [r3, #3]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d10c      	bne.n	800244a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002430:	2350      	movs	r3, #80	@ 0x50
 8002432:	18fc      	adds	r4, r7, r3
 8002434:	234a      	movs	r3, #74	@ 0x4a
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	0018      	movs	r0, r3
 8002440:	f000 f9ec 	bl	800281c <HAL_PCD_EP_DB_Receive>
 8002444:	0003      	movs	r3, r0
 8002446:	8023      	strh	r3, [r4, #0]
 8002448:	e071      	b.n	800252e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	001a      	movs	r2, r3
 8002450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	18d3      	adds	r3, r2, r3
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29a      	uxth	r2, r3
 800245c:	2052      	movs	r0, #82	@ 0x52
 800245e:	183b      	adds	r3, r7, r0
 8002460:	49a2      	ldr	r1, [pc, #648]	@ (80026ec <PCD_EP_ISR_Handler+0x6dc>)
 8002462:	400a      	ands	r2, r1
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	001a      	movs	r2, r3
 800246c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	18d3      	adds	r3, r2, r3
 8002474:	183a      	adds	r2, r7, r0
 8002476:	8812      	ldrh	r2, [r2, #0]
 8002478:	499d      	ldr	r1, [pc, #628]	@ (80026f0 <PCD_EP_ISR_Handler+0x6e0>)
 800247a:	430a      	orrs	r2, r1
 800247c:	b292      	uxth	r2, r2
 800247e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	001a      	movs	r2, r3
 8002486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	18d3      	adds	r3, r2, r3
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	001a      	movs	r2, r3
 8002494:	2380      	movs	r3, #128	@ 0x80
 8002496:	01db      	lsls	r3, r3, #7
 8002498:	4013      	ands	r3, r2
 800249a:	d024      	beq.n	80024e6 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2250      	movs	r2, #80	@ 0x50
 80024a2:	5a9b      	ldrh	r3, [r3, r2]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	001a      	movs	r2, r3
 80024a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	18d2      	adds	r2, r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	18d3      	adds	r3, r2, r3
 80024b6:	4a8f      	ldr	r2, [pc, #572]	@ (80026f4 <PCD_EP_ISR_Handler+0x6e4>)
 80024b8:	4694      	mov	ip, r2
 80024ba:	4463      	add	r3, ip
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	2450      	movs	r4, #80	@ 0x50
 80024c0:	193b      	adds	r3, r7, r4
 80024c2:	0592      	lsls	r2, r2, #22
 80024c4:	0d92      	lsrs	r2, r2, #22
 80024c6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d02e      	beq.n	800252e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d6:	6959      	ldr	r1, [r3, #20]
 80024d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024da:	891a      	ldrh	r2, [r3, #8]
 80024dc:	193b      	adds	r3, r7, r4
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	f004 fd74 	bl	8006fcc <USB_ReadPMA>
 80024e4:	e023      	b.n	800252e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2250      	movs	r2, #80	@ 0x50
 80024ec:	5a9b      	ldrh	r3, [r3, r2]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	001a      	movs	r2, r3
 80024f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	18d2      	adds	r2, r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	18d3      	adds	r3, r2, r3
 8002500:	4a79      	ldr	r2, [pc, #484]	@ (80026e8 <PCD_EP_ISR_Handler+0x6d8>)
 8002502:	4694      	mov	ip, r2
 8002504:	4463      	add	r3, ip
 8002506:	881a      	ldrh	r2, [r3, #0]
 8002508:	2450      	movs	r4, #80	@ 0x50
 800250a:	193b      	adds	r3, r7, r4
 800250c:	0592      	lsls	r2, r2, #22
 800250e:	0d92      	lsrs	r2, r2, #22
 8002510:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002512:	193b      	adds	r3, r7, r4
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002520:	6959      	ldr	r1, [r3, #20]
 8002522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002524:	895a      	ldrh	r2, [r3, #10]
 8002526:	193b      	adds	r3, r7, r4
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	f004 fd4f 	bl	8006fcc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800252e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	2150      	movs	r1, #80	@ 0x50
 8002534:	187b      	adds	r3, r7, r1
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	18d2      	adds	r2, r2, r3
 800253a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800253e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	187b      	adds	r3, r7, r1
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	18d2      	adds	r2, r2, r3
 8002548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800254c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <PCD_EP_ISR_Handler+0x550>
 8002554:	187b      	adds	r3, r7, r1
 8002556:	881a      	ldrh	r2, [r3, #0]
 8002558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0011      	movs	r1, r2
 8002568:	0018      	movs	r0, r3
 800256a:	f006 fb76 	bl	8008c5a <HAL_PCD_DataOutStageCallback>
 800256e:	e006      	b.n	800257e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002576:	0011      	movs	r1, r2
 8002578:	0018      	movs	r0, r3
 800257a:	f003 fa6b 	bl	8005a54 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800257e:	244a      	movs	r4, #74	@ 0x4a
 8002580:	193b      	adds	r3, r7, r4
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	2280      	movs	r2, #128	@ 0x80
 8002586:	4013      	ands	r3, r2
 8002588:	d100      	bne.n	800258c <PCD_EP_ISR_Handler+0x57c>
 800258a:	e133      	b.n	80027f4 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800258c:	204d      	movs	r0, #77	@ 0x4d
 800258e:	183b      	adds	r3, r7, r0
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	0013      	movs	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	189b      	adds	r3, r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	18d3      	adds	r3, r2, r3
 80025a0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	001a      	movs	r2, r3
 80025a8:	183b      	adds	r3, r7, r0
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	18d3      	adds	r3, r2, r3
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	2542      	movs	r5, #66	@ 0x42
 80025b6:	197b      	adds	r3, r7, r5
 80025b8:	494f      	ldr	r1, [pc, #316]	@ (80026f8 <PCD_EP_ISR_Handler+0x6e8>)
 80025ba:	400a      	ands	r2, r1
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	001a      	movs	r2, r3
 80025c4:	183b      	adds	r3, r7, r0
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	18d3      	adds	r3, r2, r3
 80025cc:	197a      	adds	r2, r7, r5
 80025ce:	8812      	ldrh	r2, [r2, #0]
 80025d0:	494a      	ldr	r1, [pc, #296]	@ (80026fc <PCD_EP_ISR_Handler+0x6ec>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	b292      	uxth	r2, r2
 80025d6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80025d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025da:	78db      	ldrb	r3, [r3, #3]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d000      	beq.n	80025e2 <PCD_EP_ISR_Handler+0x5d2>
 80025e0:	e0af      	b.n	8002742 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80025e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80025e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ea:	7b1b      	ldrb	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d100      	bne.n	80025f2 <PCD_EP_ISR_Handler+0x5e2>
 80025f0:	e09f      	b.n	8002732 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2240      	movs	r2, #64	@ 0x40
 80025f8:	4013      	ands	r3, r2
 80025fa:	d046      	beq.n	800268a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025fe:	785b      	ldrb	r3, [r3, #1]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d125      	bne.n	8002650 <PCD_EP_ISR_Handler+0x640>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2250      	movs	r2, #80	@ 0x50
 8002610:	5a9b      	ldrh	r3, [r3, r2]
 8002612:	b29b      	uxth	r3, r3
 8002614:	001a      	movs	r2, r3
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	189b      	adds	r3, r3, r2
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
 800261c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	00da      	lsls	r2, r3, #3
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	18d3      	adds	r3, r2, r3
 8002626:	4a33      	ldr	r2, [pc, #204]	@ (80026f4 <PCD_EP_ISR_Handler+0x6e4>)
 8002628:	4694      	mov	ip, r2
 800262a:	4463      	add	r3, ip
 800262c:	623b      	str	r3, [r7, #32]
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	059b      	lsls	r3, r3, #22
 8002636:	0d9b      	lsrs	r3, r3, #22
 8002638:	b29a      	uxth	r2, r3
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	801a      	strh	r2, [r3, #0]
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	4a2d      	ldr	r2, [pc, #180]	@ (80026fc <PCD_EP_ISR_Handler+0x6ec>)
 8002646:	4313      	orrs	r3, r2
 8002648:	b29a      	uxth	r2, r3
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	e070      	b.n	8002732 <PCD_EP_ISR_Handler+0x722>
 8002650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d16c      	bne.n	8002732 <PCD_EP_ISR_Handler+0x722>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2250      	movs	r2, #80	@ 0x50
 8002664:	5a9b      	ldrh	r3, [r3, r2]
 8002666:	b29b      	uxth	r3, r3
 8002668:	001a      	movs	r2, r3
 800266a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266c:	189b      	adds	r3, r3, r2
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	00da      	lsls	r2, r3, #3
 8002676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002678:	18d3      	adds	r3, r2, r3
 800267a:	4a1e      	ldr	r2, [pc, #120]	@ (80026f4 <PCD_EP_ISR_Handler+0x6e4>)
 800267c:	4694      	mov	ip, r2
 800267e:	4463      	add	r3, ip
 8002680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002684:	2200      	movs	r2, #0
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	e053      	b.n	8002732 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d133      	bne.n	8002700 <PCD_EP_ISR_Handler+0x6f0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	637b      	str	r3, [r7, #52]	@ 0x34
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2250      	movs	r2, #80	@ 0x50
 80026a4:	5a9b      	ldrh	r3, [r3, r2]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	001a      	movs	r2, r3
 80026aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ac:	189b      	adds	r3, r3, r2
 80026ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80026b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00da      	lsls	r2, r3, #3
 80026b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b8:	18d3      	adds	r3, r2, r3
 80026ba:	4a0b      	ldr	r2, [pc, #44]	@ (80026e8 <PCD_EP_ISR_Handler+0x6d8>)
 80026bc:	4694      	mov	ip, r2
 80026be:	4463      	add	r3, ip
 80026c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80026c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	059b      	lsls	r3, r3, #22
 80026ca:	0d9b      	lsrs	r3, r3, #22
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <PCD_EP_ISR_Handler+0x6ec>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	b29a      	uxth	r2, r3
 80026de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	e026      	b.n	8002732 <PCD_EP_ISR_Handler+0x722>
 80026e4:	00000f8f 	.word	0x00000f8f
 80026e8:	00000406 	.word	0x00000406
 80026ec:	ffff8f8f 	.word	0xffff8f8f
 80026f0:	ffff80c0 	.word	0xffff80c0
 80026f4:	00000402 	.word	0x00000402
 80026f8:	ffff8f0f 	.word	0xffff8f0f
 80026fc:	ffff8000 	.word	0xffff8000
 8002700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d114      	bne.n	8002732 <PCD_EP_ISR_Handler+0x722>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2250      	movs	r2, #80	@ 0x50
 800270e:	5a9b      	ldrh	r3, [r3, r2]
 8002710:	b29b      	uxth	r3, r3
 8002712:	001a      	movs	r2, r3
 8002714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002716:	189b      	adds	r3, r3, r2
 8002718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800271a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	00da      	lsls	r2, r3, #3
 8002720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002722:	18d3      	adds	r3, r2, r3
 8002724:	4a3b      	ldr	r2, [pc, #236]	@ (8002814 <PCD_EP_ISR_Handler+0x804>)
 8002726:	4694      	mov	ip, r2
 8002728:	4463      	add	r3, ip
 800272a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800272c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002734:	781a      	ldrb	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	0011      	movs	r1, r2
 800273a:	0018      	movs	r0, r3
 800273c:	f006 faae 	bl	8008c9c <HAL_PCD_DataInStageCallback>
 8002740:	e058      	b.n	80027f4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002742:	234a      	movs	r3, #74	@ 0x4a
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	881a      	ldrh	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	@ 0x80
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4013      	ands	r3, r2
 800274e:	d149      	bne.n	80027e4 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2250      	movs	r2, #80	@ 0x50
 8002756:	5a9b      	ldrh	r3, [r3, r2]
 8002758:	b29b      	uxth	r3, r3
 800275a:	001a      	movs	r2, r3
 800275c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	18d2      	adds	r2, r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	18d3      	adds	r3, r2, r3
 800276a:	4a2b      	ldr	r2, [pc, #172]	@ (8002818 <PCD_EP_ISR_Handler+0x808>)
 800276c:	4694      	mov	ip, r2
 800276e:	4463      	add	r3, ip
 8002770:	881a      	ldrh	r2, [r3, #0]
 8002772:	2140      	movs	r1, #64	@ 0x40
 8002774:	187b      	adds	r3, r7, r1
 8002776:	0592      	lsls	r2, r2, #22
 8002778:	0d92      	lsrs	r2, r2, #22
 800277a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800277c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	187b      	adds	r3, r7, r1
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d907      	bls.n	8002798 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8002788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	187b      	adds	r3, r7, r1
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	1ad2      	subs	r2, r2, r3
 8002792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002794:	619a      	str	r2, [r3, #24]
 8002796:	e002      	b.n	800279e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8002798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800279e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f006 fa74 	bl	8008c9c <HAL_PCD_DataInStageCallback>
 80027b4:	e01e      	b.n	80027f4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80027b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	2140      	movs	r1, #64	@ 0x40
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	18d2      	adds	r2, r2, r3
 80027c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80027c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	18d2      	adds	r2, r2, r3
 80027d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027da:	0011      	movs	r1, r2
 80027dc:	0018      	movs	r0, r3
 80027de:	f003 f939 	bl	8005a54 <USB_EPStartXfer>
 80027e2:	e007      	b.n	80027f4 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027e4:	234a      	movs	r3, #74	@ 0x4a
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 f930 	bl	8002a54 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2244      	movs	r2, #68	@ 0x44
 80027fa:	5a9b      	ldrh	r3, [r3, r2]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b21b      	sxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	da01      	bge.n	8002808 <PCD_EP_ISR_Handler+0x7f8>
 8002804:	f7ff fc0a 	bl	800201c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b016      	add	sp, #88	@ 0x58
 8002810:	bdb0      	pop	{r4, r5, r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	00000406 	.word	0x00000406
 8002818:	00000402 	.word	0x00000402

0800281c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b089      	sub	sp, #36	@ 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	1dbb      	adds	r3, r7, #6
 8002828:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800282a:	1dbb      	adds	r3, r7, #6
 800282c:	881a      	ldrh	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	01db      	lsls	r3, r3, #7
 8002832:	4013      	ands	r3, r2
 8002834:	d100      	bne.n	8002838 <HAL_PCD_EP_DB_Receive+0x1c>
 8002836:	e07d      	b.n	8002934 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2250      	movs	r2, #80	@ 0x50
 800283e:	5a9b      	ldrh	r3, [r3, r2]
 8002840:	b29b      	uxth	r3, r3
 8002842:	001a      	movs	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	18d2      	adds	r2, r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	18d3      	adds	r3, r2, r3
 8002852:	4a7a      	ldr	r2, [pc, #488]	@ (8002a3c <HAL_PCD_EP_DB_Receive+0x220>)
 8002854:	4694      	mov	ip, r2
 8002856:	4463      	add	r3, ip
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	211a      	movs	r1, #26
 800285c:	187b      	adds	r3, r7, r1
 800285e:	0592      	lsls	r2, r2, #22
 8002860:	0d92      	lsrs	r2, r2, #22
 8002862:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	187b      	adds	r3, r7, r1
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d307      	bcc.n	8002880 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	187b      	adds	r3, r7, r1
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	619a      	str	r2, [r3, #24]
 800287e:	e002      	b.n	8002886 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d121      	bne.n	80028d2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	001a      	movs	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	18d3      	adds	r3, r2, r3
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	2018      	movs	r0, #24
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	4966      	ldr	r1, [pc, #408]	@ (8002a40 <HAL_PCD_EP_DB_Receive+0x224>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	183b      	adds	r3, r7, r0
 80028ac:	183a      	adds	r2, r7, r0
 80028ae:	8812      	ldrh	r2, [r2, #0]
 80028b0:	2180      	movs	r1, #128	@ 0x80
 80028b2:	0189      	lsls	r1, r1, #6
 80028b4:	404a      	eors	r2, r1
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	001a      	movs	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	183a      	adds	r2, r7, r0
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	495e      	ldr	r1, [pc, #376]	@ (8002a44 <HAL_PCD_EP_DB_Receive+0x228>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	b292      	uxth	r2, r2
 80028d0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028d2:	1dbb      	adds	r3, r7, #6
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	4013      	ands	r3, r2
 80028da:	d01a      	beq.n	8002912 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	001a      	movs	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	18d3      	adds	r3, r2, r3
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	2016      	movs	r0, #22
 80028f0:	183b      	adds	r3, r7, r0
 80028f2:	4955      	ldr	r1, [pc, #340]	@ (8002a48 <HAL_PCD_EP_DB_Receive+0x22c>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	001a      	movs	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	18d3      	adds	r3, r2, r3
 8002906:	183a      	adds	r2, r7, r0
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	4950      	ldr	r1, [pc, #320]	@ (8002a4c <HAL_PCD_EP_DB_Receive+0x230>)
 800290c:	430a      	orrs	r2, r1
 800290e:	b292      	uxth	r2, r2
 8002910:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002912:	241a      	movs	r4, #26
 8002914:	193b      	adds	r3, r7, r4
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d100      	bne.n	800291e <HAL_PCD_EP_DB_Receive+0x102>
 800291c:	e086      	b.n	8002a2c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	6959      	ldr	r1, [r3, #20]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	891a      	ldrh	r2, [r3, #8]
 800292a:	193b      	adds	r3, r7, r4
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	f004 fb4d 	bl	8006fcc <USB_ReadPMA>
 8002932:	e07b      	b.n	8002a2c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2250      	movs	r2, #80	@ 0x50
 800293a:	5a9b      	ldrh	r3, [r3, r2]
 800293c:	b29b      	uxth	r3, r3
 800293e:	001a      	movs	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	18d2      	adds	r2, r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	18d3      	adds	r3, r2, r3
 800294e:	4a40      	ldr	r2, [pc, #256]	@ (8002a50 <HAL_PCD_EP_DB_Receive+0x234>)
 8002950:	4694      	mov	ip, r2
 8002952:	4463      	add	r3, ip
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	211a      	movs	r1, #26
 8002958:	187b      	adds	r3, r7, r1
 800295a:	0592      	lsls	r2, r2, #22
 800295c:	0d92      	lsrs	r2, r2, #22
 800295e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	187b      	adds	r3, r7, r1
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d307      	bcc.n	800297c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	187b      	adds	r3, r7, r1
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	1ad2      	subs	r2, r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	619a      	str	r2, [r3, #24]
 800297a:	e002      	b.n	8002982 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d121      	bne.n	80029ce <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	001a      	movs	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	18d3      	adds	r3, r2, r3
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29a      	uxth	r2, r3
 800299c:	201e      	movs	r0, #30
 800299e:	183b      	adds	r3, r7, r0
 80029a0:	4927      	ldr	r1, [pc, #156]	@ (8002a40 <HAL_PCD_EP_DB_Receive+0x224>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	801a      	strh	r2, [r3, #0]
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	183a      	adds	r2, r7, r0
 80029aa:	8812      	ldrh	r2, [r2, #0]
 80029ac:	2180      	movs	r1, #128	@ 0x80
 80029ae:	0189      	lsls	r1, r1, #6
 80029b0:	404a      	eors	r2, r1
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	001a      	movs	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	183a      	adds	r2, r7, r0
 80029c4:	8812      	ldrh	r2, [r2, #0]
 80029c6:	491f      	ldr	r1, [pc, #124]	@ (8002a44 <HAL_PCD_EP_DB_Receive+0x228>)
 80029c8:	430a      	orrs	r2, r1
 80029ca:	b292      	uxth	r2, r2
 80029cc:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029ce:	1dbb      	adds	r3, r7, #6
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	2240      	movs	r2, #64	@ 0x40
 80029d4:	4013      	ands	r3, r2
 80029d6:	d11a      	bne.n	8002a0e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	001a      	movs	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	18d3      	adds	r3, r2, r3
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	201c      	movs	r0, #28
 80029ec:	183b      	adds	r3, r7, r0
 80029ee:	4916      	ldr	r1, [pc, #88]	@ (8002a48 <HAL_PCD_EP_DB_Receive+0x22c>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	001a      	movs	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	18d3      	adds	r3, r2, r3
 8002a02:	183a      	adds	r2, r7, r0
 8002a04:	8812      	ldrh	r2, [r2, #0]
 8002a06:	4911      	ldr	r1, [pc, #68]	@ (8002a4c <HAL_PCD_EP_DB_Receive+0x230>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	b292      	uxth	r2, r2
 8002a0c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002a0e:	241a      	movs	r4, #26
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d009      	beq.n	8002a2c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	6959      	ldr	r1, [r3, #20]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	895a      	ldrh	r2, [r3, #10]
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f004 fad0 	bl	8006fcc <USB_ReadPMA>
    }
  }

  return count;
 8002a2c:	231a      	movs	r3, #26
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	881b      	ldrh	r3, [r3, #0]
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b009      	add	sp, #36	@ 0x24
 8002a38:	bd90      	pop	{r4, r7, pc}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	00000402 	.word	0x00000402
 8002a40:	ffffbf8f 	.word	0xffffbf8f
 8002a44:	ffff8080 	.word	0xffff8080
 8002a48:	ffff8f8f 	.word	0xffff8f8f
 8002a4c:	ffff80c0 	.word	0xffff80c0
 8002a50:	00000406 	.word	0x00000406

08002a54 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0a4      	sub	sp, #144	@ 0x90
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	1dbb      	adds	r3, r7, #6
 8002a60:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a62:	1dbb      	adds	r3, r7, #6
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d100      	bne.n	8002a6e <HAL_PCD_EP_DB_Transmit+0x1a>
 8002a6c:	e1e4      	b.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2250      	movs	r2, #80	@ 0x50
 8002a74:	5a9b      	ldrh	r3, [r3, r2]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	001a      	movs	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	18d2      	adds	r2, r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	18d3      	adds	r3, r2, r3
 8002a88:	4ad0      	ldr	r2, [pc, #832]	@ (8002dcc <HAL_PCD_EP_DB_Transmit+0x378>)
 8002a8a:	4694      	mov	ip, r2
 8002a8c:	4463      	add	r3, ip
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	2186      	movs	r1, #134	@ 0x86
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	0592      	lsls	r2, r2, #22
 8002a96:	0d92      	lsrs	r2, r2, #22
 8002a98:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d907      	bls.n	8002ab6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	1ad2      	subs	r2, r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	619a      	str	r2, [r3, #24]
 8002ab4:	e002      	b.n	8002abc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d000      	beq.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x72>
 8002ac4:	e0b5      	b.n	8002c32 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d125      	bne.n	8002b1a <HAL_PCD_EP_DB_Transmit+0xc6>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2250      	movs	r2, #80	@ 0x50
 8002ada:	5a9b      	ldrh	r3, [r3, r2]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	001a      	movs	r2, r3
 8002ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	00da      	lsls	r2, r3, #3
 8002aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aee:	18d3      	adds	r3, r2, r3
 8002af0:	4ab6      	ldr	r2, [pc, #728]	@ (8002dcc <HAL_PCD_EP_DB_Transmit+0x378>)
 8002af2:	4694      	mov	ip, r2
 8002af4:	4463      	add	r3, ip
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	059b      	lsls	r3, r3, #22
 8002b00:	0d9b      	lsrs	r3, r3, #22
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4ab0      	ldr	r2, [pc, #704]	@ (8002dd0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	e01b      	b.n	8002b52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d117      	bne.n	8002b52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2250      	movs	r2, #80	@ 0x50
 8002b2e:	5a9b      	ldrh	r3, [r3, r2]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	001a      	movs	r2, r3
 8002b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	00da      	lsls	r2, r3, #3
 8002b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b42:	18d3      	adds	r3, r2, r3
 8002b44:	4aa1      	ldr	r2, [pc, #644]	@ (8002dcc <HAL_PCD_EP_DB_Transmit+0x378>)
 8002b46:	4694      	mov	ip, r2
 8002b48:	4463      	add	r3, ip
 8002b4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	2200      	movs	r2, #0
 8002b50:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	785b      	ldrb	r3, [r3, #1]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d125      	bne.n	8002bac <HAL_PCD_EP_DB_Transmit+0x158>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2250      	movs	r2, #80	@ 0x50
 8002b6c:	5a9b      	ldrh	r3, [r3, r2]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	001a      	movs	r2, r3
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	189b      	adds	r3, r3, r2
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	00da      	lsls	r2, r3, #3
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	18d3      	adds	r3, r2, r3
 8002b82:	4a94      	ldr	r2, [pc, #592]	@ (8002dd4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8002b84:	4694      	mov	ip, r2
 8002b86:	4463      	add	r3, ip
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	059b      	lsls	r3, r3, #22
 8002b92:	0d9b      	lsrs	r3, r3, #22
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4a8b      	ldr	r2, [pc, #556]	@ (8002dd0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	e018      	b.n	8002bde <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d114      	bne.n	8002bde <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2250      	movs	r2, #80	@ 0x50
 8002bba:	5a9b      	ldrh	r3, [r3, r2]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	001a      	movs	r2, r3
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00da      	lsls	r2, r3, #3
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	18d3      	adds	r3, r2, r3
 8002bd0:	4a80      	ldr	r2, [pc, #512]	@ (8002dd4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8002bd2:	4694      	mov	ip, r2
 8002bd4:	4463      	add	r3, ip
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	0011      	movs	r1, r2
 8002be6:	0018      	movs	r0, r3
 8002be8:	f006 f858 	bl	8008c9c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	881a      	ldrh	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x1a6>
 8002bf8:	e309      	b.n	800320e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	001a      	movs	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	18d3      	adds	r3, r2, r3
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	2016      	movs	r0, #22
 8002c0e:	183b      	adds	r3, r7, r0
 8002c10:	4971      	ldr	r1, [pc, #452]	@ (8002dd8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002c12:	400a      	ands	r2, r1
 8002c14:	801a      	strh	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	18d3      	adds	r3, r2, r3
 8002c24:	183a      	adds	r2, r7, r0
 8002c26:	8812      	ldrh	r2, [r2, #0]
 8002c28:	496c      	ldr	r1, [pc, #432]	@ (8002ddc <HAL_PCD_EP_DB_Transmit+0x388>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	b292      	uxth	r2, r2
 8002c2e:	801a      	strh	r2, [r3, #0]
 8002c30:	e2ed      	b.n	800320e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c32:	1dbb      	adds	r3, r7, #6
 8002c34:	881a      	ldrh	r2, [r3, #0]
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	01db      	lsls	r3, r3, #7
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d01a      	beq.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	001a      	movs	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	18d3      	adds	r3, r2, r3
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	208a      	movs	r0, #138	@ 0x8a
 8002c52:	183b      	adds	r3, r7, r0
 8002c54:	4960      	ldr	r1, [pc, #384]	@ (8002dd8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002c56:	400a      	ands	r2, r1
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	001a      	movs	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	18d3      	adds	r3, r2, r3
 8002c68:	183a      	adds	r2, r7, r0
 8002c6a:	8812      	ldrh	r2, [r2, #0]
 8002c6c:	495b      	ldr	r1, [pc, #364]	@ (8002ddc <HAL_PCD_EP_DB_Transmit+0x388>)
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	b292      	uxth	r2, r2
 8002c72:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2224      	movs	r2, #36	@ 0x24
 8002c78:	5c9b      	ldrb	r3, [r3, r2]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d000      	beq.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002c7e:	e2c6      	b.n	800320e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	2186      	movs	r1, #134	@ 0x86
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	18d2      	adds	r2, r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	18d2      	adds	r2, r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6a1a      	ldr	r2, [r3, #32]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d30c      	bcc.n	8002cc4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	218c      	movs	r1, #140	@ 0x8c
 8002cb0:	187a      	adds	r2, r7, r1
 8002cb2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6a1a      	ldr	r2, [r3, #32]
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	1ad2      	subs	r2, r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	621a      	str	r2, [r3, #32]
 8002cc2:	e01a      	b.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002ccc:	2386      	movs	r3, #134	@ 0x86
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	228c      	movs	r2, #140	@ 0x8c
 8002cd4:	18ba      	adds	r2, r7, r2
 8002cd6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2224      	movs	r2, #36	@ 0x24
 8002cdc:	2100      	movs	r1, #0
 8002cde:	5499      	strb	r1, [r3, r2]
 8002ce0:	e00b      	b.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2224      	movs	r2, #36	@ 0x24
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	228c      	movs	r2, #140	@ 0x8c
 8002cf0:	18ba      	adds	r2, r7, r2
 8002cf2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d000      	beq.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8002d02:	e06d      	b.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x38c>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2250      	movs	r2, #80	@ 0x50
 8002d10:	5a9b      	ldrh	r3, [r3, r2]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	001a      	movs	r2, r3
 8002d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d18:	189b      	adds	r3, r3, r2
 8002d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	00da      	lsls	r2, r3, #3
 8002d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d24:	18d3      	adds	r3, r2, r3
 8002d26:	4a29      	ldr	r2, [pc, #164]	@ (8002dcc <HAL_PCD_EP_DB_Transmit+0x378>)
 8002d28:	4694      	mov	ip, r2
 8002d2a:	4463      	add	r3, ip
 8002d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	059b      	lsls	r3, r3, #22
 8002d36:	0d9b      	lsrs	r3, r3, #22
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	228c      	movs	r2, #140	@ 0x8c
 8002d40:	18bb      	adds	r3, r7, r2
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d46:	d91a      	bls.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x32a>
 8002d48:	18bb      	adds	r3, r7, r2
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d50:	18bb      	adds	r3, r7, r2
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	221f      	movs	r2, #31
 8002d56:	4013      	ands	r3, r2
 8002d58:	d102      	bne.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	029b      	lsls	r3, r3, #10
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	4a17      	ldr	r2, [pc, #92]	@ (8002dd0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7a:	801a      	strh	r2, [r3, #0]
 8002d7c:	e04f      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002d7e:	238c      	movs	r3, #140	@ 0x8c
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d108      	bne.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x346>
 8002d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	4a10      	ldr	r2, [pc, #64]	@ (8002dd0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	e041      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002d9a:	228c      	movs	r2, #140	@ 0x8c
 8002d9c:	18bb      	adds	r3, r7, r2
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da4:	18bb      	adds	r3, r7, r2
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	d002      	beq.n	8002db4 <HAL_PCD_EP_DB_Transmit+0x360>
 8002dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002db0:	3301      	adds	r3, #1
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	029b      	lsls	r3, r3, #10
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	e028      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002dcc:	00000402 	.word	0x00000402
 8002dd0:	ffff8000 	.word	0xffff8000
 8002dd4:	00000406 	.word	0x00000406
 8002dd8:	ffff8f8f 	.word	0xffff8f8f
 8002ddc:	ffffc080 	.word	0xffffc080
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d11a      	bne.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2250      	movs	r2, #80	@ 0x50
 8002df4:	5a9b      	ldrh	r3, [r3, r2]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	001a      	movs	r2, r3
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dfc:	189b      	adds	r3, r3, r2
 8002dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	00da      	lsls	r2, r3, #3
 8002e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e08:	18d3      	adds	r3, r2, r3
 8002e0a:	4adb      	ldr	r2, [pc, #876]	@ (8003178 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002e0c:	4694      	mov	ip, r2
 8002e0e:	4463      	add	r3, ip
 8002e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e12:	238c      	movs	r3, #140	@ 0x8c
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6959      	ldr	r1, [r3, #20]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	891a      	ldrh	r2, [r3, #8]
 8002e2a:	238c      	movs	r3, #140	@ 0x8c
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f004 f881 	bl	8006f38 <USB_WritePMA>
 8002e36:	e1ea      	b.n	800320e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2250      	movs	r2, #80	@ 0x50
 8002e3e:	5a9b      	ldrh	r3, [r3, r2]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	001a      	movs	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	18d2      	adds	r2, r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	18d3      	adds	r3, r2, r3
 8002e52:	4aca      	ldr	r2, [pc, #808]	@ (800317c <HAL_PCD_EP_DB_Transmit+0x728>)
 8002e54:	4694      	mov	ip, r2
 8002e56:	4463      	add	r3, ip
 8002e58:	881a      	ldrh	r2, [r3, #0]
 8002e5a:	2186      	movs	r1, #134	@ 0x86
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	0592      	lsls	r2, r2, #22
 8002e60:	0d92      	lsrs	r2, r2, #22
 8002e62:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d307      	bcc.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	1ad2      	subs	r2, r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	619a      	str	r2, [r3, #24]
 8002e7e:	e002      	b.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d000      	beq.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x43c>
 8002e8e:	e0bb      	b.n	8003008 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d125      	bne.n	8002ee4 <HAL_PCD_EP_DB_Transmit+0x490>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2250      	movs	r2, #80	@ 0x50
 8002ea4:	5a9b      	ldrh	r3, [r3, r2]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eac:	189b      	adds	r3, r3, r2
 8002eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	00da      	lsls	r2, r3, #3
 8002eb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	4aaf      	ldr	r2, [pc, #700]	@ (8003178 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002ebc:	4694      	mov	ip, r2
 8002ebe:	4463      	add	r3, ip
 8002ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ec2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	059b      	lsls	r3, r3, #22
 8002eca:	0d9b      	lsrs	r3, r3, #22
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	4aa9      	ldr	r2, [pc, #676]	@ (8003180 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ee0:	801a      	strh	r2, [r3, #0]
 8002ee2:	e01b      	b.n	8002f1c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d117      	bne.n	8002f1c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2250      	movs	r2, #80	@ 0x50
 8002ef8:	5a9b      	ldrh	r3, [r3, r2]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	001a      	movs	r2, r3
 8002efe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	00da      	lsls	r2, r3, #3
 8002f0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f0c:	18d3      	adds	r3, r2, r3
 8002f0e:	4a9a      	ldr	r2, [pc, #616]	@ (8003178 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002f10:	4694      	mov	ip, r2
 8002f12:	4463      	add	r3, ip
 8002f14:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f18:	2200      	movs	r2, #0
 8002f1a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	785b      	ldrb	r3, [r3, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d12b      	bne.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x52e>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2250      	movs	r2, #80	@ 0x50
 8002f36:	5a9b      	ldrh	r3, [r3, r2]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	00da      	lsls	r2, r3, #3
 8002f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f4a:	18d3      	adds	r3, r2, r3
 8002f4c:	4a8b      	ldr	r2, [pc, #556]	@ (800317c <HAL_PCD_EP_DB_Transmit+0x728>)
 8002f4e:	4694      	mov	ip, r2
 8002f50:	4463      	add	r3, ip
 8002f52:	2180      	movs	r1, #128	@ 0x80
 8002f54:	187a      	adds	r2, r7, r1
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	187b      	adds	r3, r7, r1
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	059b      	lsls	r3, r3, #22
 8002f62:	0d9b      	lsrs	r3, r3, #22
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	4a82      	ldr	r2, [pc, #520]	@ (8003180 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	801a      	strh	r2, [r3, #0]
 8002f80:	e018      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x560>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	785b      	ldrb	r3, [r3, #1]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d114      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x560>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2250      	movs	r2, #80	@ 0x50
 8002f90:	5a9b      	ldrh	r3, [r3, r2]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	001a      	movs	r2, r3
 8002f96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f98:	189b      	adds	r3, r3, r2
 8002f9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	00da      	lsls	r2, r3, #3
 8002fa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	4a75      	ldr	r2, [pc, #468]	@ (800317c <HAL_PCD_EP_DB_Transmit+0x728>)
 8002fa8:	4694      	mov	ip, r2
 8002faa:	4463      	add	r3, ip
 8002fac:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	0011      	movs	r1, r2
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f005 fe6d 	bl	8008c9c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fc2:	1dbb      	adds	r3, r7, #6
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	01db      	lsls	r3, r3, #7
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d000      	beq.n	8002fd0 <HAL_PCD_EP_DB_Transmit+0x57c>
 8002fce:	e11e      	b.n	800320e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	18d3      	adds	r3, r2, r3
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	2088      	movs	r0, #136	@ 0x88
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	4967      	ldr	r1, [pc, #412]	@ (8003184 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002fe8:	400a      	ands	r2, r1
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	18d3      	adds	r3, r2, r3
 8002ffa:	183a      	adds	r2, r7, r0
 8002ffc:	8812      	ldrh	r2, [r2, #0]
 8002ffe:	4962      	ldr	r1, [pc, #392]	@ (8003188 <HAL_PCD_EP_DB_Transmit+0x734>)
 8003000:	430a      	orrs	r2, r1
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	e102      	b.n	800320e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	881a      	ldrh	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	01db      	lsls	r3, r3, #7
 8003010:	4013      	ands	r3, r2
 8003012:	d11a      	bne.n	800304a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	001a      	movs	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	18d3      	adds	r3, r2, r3
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b29a      	uxth	r2, r3
 8003026:	204e      	movs	r0, #78	@ 0x4e
 8003028:	183b      	adds	r3, r7, r0
 800302a:	4956      	ldr	r1, [pc, #344]	@ (8003184 <HAL_PCD_EP_DB_Transmit+0x730>)
 800302c:	400a      	ands	r2, r1
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	001a      	movs	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	18d3      	adds	r3, r2, r3
 800303e:	183a      	adds	r2, r7, r0
 8003040:	8812      	ldrh	r2, [r2, #0]
 8003042:	4951      	ldr	r1, [pc, #324]	@ (8003188 <HAL_PCD_EP_DB_Transmit+0x734>)
 8003044:	430a      	orrs	r2, r1
 8003046:	b292      	uxth	r2, r2
 8003048:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2224      	movs	r2, #36	@ 0x24
 800304e:	5c9b      	ldrb	r3, [r3, r2]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d000      	beq.n	8003056 <HAL_PCD_EP_DB_Transmit+0x602>
 8003054:	e0db      	b.n	800320e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	2186      	movs	r1, #134	@ 0x86
 800305c:	187b      	adds	r3, r7, r1
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	18d2      	adds	r2, r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	187b      	adds	r3, r7, r1
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	18d2      	adds	r2, r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	429a      	cmp	r2, r3
 800307e:	d30c      	bcc.n	800309a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	218c      	movs	r1, #140	@ 0x8c
 8003086:	187a      	adds	r2, r7, r1
 8003088:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	187b      	adds	r3, r7, r1
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	621a      	str	r2, [r3, #32]
 8003098:	e01a      	b.n	80030d0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80030a2:	2386      	movs	r3, #134	@ 0x86
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	228c      	movs	r2, #140	@ 0x8c
 80030aa:	18ba      	adds	r2, r7, r2
 80030ac:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2224      	movs	r2, #36	@ 0x24
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]
 80030b6:	e00b      	b.n	80030d0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	228c      	movs	r2, #140	@ 0x8c
 80030be:	18ba      	adds	r2, r7, r2
 80030c0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2200      	movs	r2, #0
 80030c6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2224      	movs	r2, #36	@ 0x24
 80030cc:	2100      	movs	r1, #0
 80030ce:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d000      	beq.n	80030e0 <HAL_PCD_EP_DB_Transmit+0x68c>
 80030de:	e06e      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x76a>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2250      	movs	r2, #80	@ 0x50
 80030ec:	5a9b      	ldrh	r3, [r3, r2]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	001a      	movs	r2, r3
 80030f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	00da      	lsls	r2, r3, #3
 80030fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003100:	18d3      	adds	r3, r2, r3
 8003102:	4a1e      	ldr	r2, [pc, #120]	@ (800317c <HAL_PCD_EP_DB_Transmit+0x728>)
 8003104:	4694      	mov	ip, r2
 8003106:	4463      	add	r3, ip
 8003108:	65bb      	str	r3, [r7, #88]	@ 0x58
 800310a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	059b      	lsls	r3, r3, #22
 8003112:	0d9b      	lsrs	r3, r3, #22
 8003114:	b29a      	uxth	r2, r3
 8003116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	228c      	movs	r2, #140	@ 0x8c
 800311c:	18bb      	adds	r3, r7, r2
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b3e      	cmp	r3, #62	@ 0x3e
 8003122:	d91a      	bls.n	800315a <HAL_PCD_EP_DB_Transmit+0x706>
 8003124:	18bb      	adds	r3, r7, r2
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800312c:	18bb      	adds	r3, r7, r2
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	221f      	movs	r2, #31
 8003132:	4013      	ands	r3, r2
 8003134:	d102      	bne.n	800313c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8003136:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003138:	3b01      	subs	r3, #1
 800313a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800313c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29a      	uxth	r2, r3
 8003142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003144:	b29b      	uxth	r3, r3
 8003146:	029b      	lsls	r3, r3, #10
 8003148:	b29b      	uxth	r3, r3
 800314a:	4313      	orrs	r3, r2
 800314c:	b29b      	uxth	r3, r3
 800314e:	4a0c      	ldr	r2, [pc, #48]	@ (8003180 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003150:	4313      	orrs	r3, r2
 8003152:	b29a      	uxth	r2, r3
 8003154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003156:	801a      	strh	r2, [r3, #0]
 8003158:	e04d      	b.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800315a:	238c      	movs	r3, #140	@ 0x8c
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d113      	bne.n	800318c <HAL_PCD_EP_DB_Transmit+0x738>
 8003164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	4a05      	ldr	r2, [pc, #20]	@ (8003180 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800316c:	4313      	orrs	r3, r2
 800316e:	b29a      	uxth	r2, r3
 8003170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003172:	801a      	strh	r2, [r3, #0]
 8003174:	e03f      	b.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	00000402 	.word	0x00000402
 800317c:	00000406 	.word	0x00000406
 8003180:	ffff8000 	.word	0xffff8000
 8003184:	ffff8f8f 	.word	0xffff8f8f
 8003188:	ffffc080 	.word	0xffffc080
 800318c:	228c      	movs	r2, #140	@ 0x8c
 800318e:	18bb      	adds	r3, r7, r2
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003196:	18bb      	adds	r3, r7, r2
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	d002      	beq.n	80031a6 <HAL_PCD_EP_DB_Transmit+0x752>
 80031a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031a2:	3301      	adds	r3, #1
 80031a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	029b      	lsls	r3, r3, #10
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4313      	orrs	r3, r2
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ba:	801a      	strh	r2, [r3, #0]
 80031bc:	e01b      	b.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d117      	bne.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2250      	movs	r2, #80	@ 0x50
 80031cc:	5a9b      	ldrh	r3, [r3, r2]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	001a      	movs	r2, r3
 80031d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d4:	189b      	adds	r3, r3, r2
 80031d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	00da      	lsls	r2, r3, #3
 80031de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e0:	18d3      	adds	r3, r2, r3
 80031e2:	4a21      	ldr	r2, [pc, #132]	@ (8003268 <HAL_PCD_EP_DB_Transmit+0x814>)
 80031e4:	4694      	mov	ip, r2
 80031e6:	4463      	add	r3, ip
 80031e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80031ea:	238c      	movs	r3, #140	@ 0x8c
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6959      	ldr	r1, [r3, #20]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	895a      	ldrh	r2, [r3, #10]
 8003202:	238c      	movs	r3, #140	@ 0x8c
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f003 fe95 	bl	8006f38 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	001a      	movs	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	18d3      	adds	r3, r2, r3
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29a      	uxth	r2, r3
 8003220:	2014      	movs	r0, #20
 8003222:	183b      	adds	r3, r7, r0
 8003224:	4911      	ldr	r1, [pc, #68]	@ (800326c <HAL_PCD_EP_DB_Transmit+0x818>)
 8003226:	400a      	ands	r2, r1
 8003228:	801a      	strh	r2, [r3, #0]
 800322a:	183b      	adds	r3, r7, r0
 800322c:	183a      	adds	r2, r7, r0
 800322e:	8812      	ldrh	r2, [r2, #0]
 8003230:	2110      	movs	r1, #16
 8003232:	404a      	eors	r2, r1
 8003234:	801a      	strh	r2, [r3, #0]
 8003236:	183b      	adds	r3, r7, r0
 8003238:	183a      	adds	r2, r7, r0
 800323a:	8812      	ldrh	r2, [r2, #0]
 800323c:	2120      	movs	r1, #32
 800323e:	404a      	eors	r2, r1
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	001a      	movs	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	18d3      	adds	r3, r2, r3
 8003250:	183a      	adds	r2, r7, r0
 8003252:	8812      	ldrh	r2, [r2, #0]
 8003254:	4906      	ldr	r1, [pc, #24]	@ (8003270 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8003256:	430a      	orrs	r2, r1
 8003258:	b292      	uxth	r2, r2
 800325a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b024      	add	sp, #144	@ 0x90
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	00000406 	.word	0x00000406
 800326c:	ffff8fbf 	.word	0xffff8fbf
 8003270:	ffff8080 	.word	0xffff8080

08003274 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	0008      	movs	r0, r1
 800327e:	0011      	movs	r1, r2
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	240a      	movs	r4, #10
 8003284:	193b      	adds	r3, r7, r4
 8003286:	1c02      	adds	r2, r0, #0
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	2308      	movs	r3, #8
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	1c0a      	adds	r2, r1, #0
 8003290:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003292:	0021      	movs	r1, r4
 8003294:	187b      	adds	r3, r7, r1
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	2280      	movs	r2, #128	@ 0x80
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00c      	beq.n	80032bc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a2:	187b      	adds	r3, r7, r1
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	2207      	movs	r2, #7
 80032a8:	4013      	ands	r3, r2
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	0013      	movs	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	189b      	adds	r3, r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	18d3      	adds	r3, r2, r3
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e00b      	b.n	80032d4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032bc:	230a      	movs	r3, #10
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	0013      	movs	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	3369      	adds	r3, #105	@ 0x69
 80032cc:	33ff      	adds	r3, #255	@ 0xff
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	18d3      	adds	r3, r2, r3
 80032d2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032d4:	2308      	movs	r3, #8
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	80da      	strh	r2, [r3, #6]
 80032ec:	e00b      	b.n	8003306 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2201      	movs	r2, #1
 80032f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0c1b      	lsrs	r3, r3, #16
 8003300:	b29a      	uxth	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b007      	add	sp, #28
 800330e:	bd90      	pop	{r4, r7, pc}

08003310 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	23ba      	movs	r3, #186	@ 0xba
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	2101      	movs	r1, #1
 8003326:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	23b8      	movs	r3, #184	@ 0xb8
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	2100      	movs	r1, #0
 8003330:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2254      	movs	r2, #84	@ 0x54
 8003336:	5a9b      	ldrh	r3, [r3, r2]
 8003338:	b29b      	uxth	r3, r3
 800333a:	2201      	movs	r2, #1
 800333c:	4313      	orrs	r3, r2
 800333e:	b299      	uxth	r1, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2254      	movs	r2, #84	@ 0x54
 8003344:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2254      	movs	r2, #84	@ 0x54
 800334a:	5a9b      	ldrh	r3, [r3, r2]
 800334c:	b29b      	uxth	r3, r3
 800334e:	2202      	movs	r2, #2
 8003350:	4313      	orrs	r3, r2
 8003352:	b299      	uxth	r1, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2254      	movs	r2, #84	@ 0x54
 8003358:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b004      	add	sp, #16
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	000a      	movs	r2, r1
 800336e:	1cfb      	adds	r3, r7, #3
 8003370:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b002      	add	sp, #8
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b08a      	sub	sp, #40	@ 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f000 fbaf 	bl	8003aee <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003390:	4bcf      	ldr	r3, [pc, #828]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	220c      	movs	r2, #12
 8003396:	4013      	ands	r3, r2
 8003398:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339a:	4bcd      	ldr	r3, [pc, #820]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	2380      	movs	r3, #128	@ 0x80
 80033a0:	025b      	lsls	r3, r3, #9
 80033a2:	4013      	ands	r3, r2
 80033a4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	d100      	bne.n	80033b2 <HAL_RCC_OscConfig+0x36>
 80033b0:	e07e      	b.n	80034b0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d007      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d112      	bne.n	80033e4 <HAL_RCC_OscConfig+0x68>
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	2380      	movs	r3, #128	@ 0x80
 80033c2:	025b      	lsls	r3, r3, #9
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	4bc1      	ldr	r3, [pc, #772]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	029b      	lsls	r3, r3, #10
 80033d0:	4013      	ands	r3, r2
 80033d2:	d100      	bne.n	80033d6 <HAL_RCC_OscConfig+0x5a>
 80033d4:	e06b      	b.n	80034ae <HAL_RCC_OscConfig+0x132>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d167      	bne.n	80034ae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f000 fb85 	bl	8003aee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	025b      	lsls	r3, r3, #9
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_OscConfig+0x84>
 80033f0:	4bb7      	ldr	r3, [pc, #732]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4bb6      	ldr	r3, [pc, #728]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	0249      	lsls	r1, r1, #9
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e027      	b.n	8003450 <HAL_RCC_OscConfig+0xd4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	23a0      	movs	r3, #160	@ 0xa0
 8003406:	02db      	lsls	r3, r3, #11
 8003408:	429a      	cmp	r2, r3
 800340a:	d10e      	bne.n	800342a <HAL_RCC_OscConfig+0xae>
 800340c:	4bb0      	ldr	r3, [pc, #704]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4baf      	ldr	r3, [pc, #700]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003412:	2180      	movs	r1, #128	@ 0x80
 8003414:	02c9      	lsls	r1, r1, #11
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	4bad      	ldr	r3, [pc, #692]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	4bac      	ldr	r3, [pc, #688]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003420:	2180      	movs	r1, #128	@ 0x80
 8003422:	0249      	lsls	r1, r1, #9
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e012      	b.n	8003450 <HAL_RCC_OscConfig+0xd4>
 800342a:	4ba9      	ldr	r3, [pc, #676]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4ba8      	ldr	r3, [pc, #672]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003430:	49a8      	ldr	r1, [pc, #672]	@ (80036d4 <HAL_RCC_OscConfig+0x358>)
 8003432:	400a      	ands	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	4ba6      	ldr	r3, [pc, #664]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	025b      	lsls	r3, r3, #9
 800343e:	4013      	ands	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4ba2      	ldr	r3, [pc, #648]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4ba1      	ldr	r3, [pc, #644]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800344a:	49a3      	ldr	r1, [pc, #652]	@ (80036d8 <HAL_RCC_OscConfig+0x35c>)
 800344c:	400a      	ands	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fd fd70 	bl	8000f3c <HAL_GetTick>
 800345c:	0003      	movs	r3, r0
 800345e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003460:	e009      	b.n	8003476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003462:	f7fd fd6b 	bl	8000f3c <HAL_GetTick>
 8003466:	0002      	movs	r2, r0
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b64      	cmp	r3, #100	@ 0x64
 800346e:	d902      	bls.n	8003476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	f000 fb3c 	bl	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003476:	4b96      	ldr	r3, [pc, #600]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	029b      	lsls	r3, r3, #10
 800347e:	4013      	ands	r3, r2
 8003480:	d0ef      	beq.n	8003462 <HAL_RCC_OscConfig+0xe6>
 8003482:	e015      	b.n	80034b0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fd fd5a 	bl	8000f3c <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800348e:	f7fd fd55 	bl	8000f3c <HAL_GetTick>
 8003492:	0002      	movs	r2, r0
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b64      	cmp	r3, #100	@ 0x64
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e326      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034a0:	4b8b      	ldr	r3, [pc, #556]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	029b      	lsls	r3, r3, #10
 80034a8:	4013      	ands	r3, r2
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x112>
 80034ac:	e000      	b.n	80034b0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2202      	movs	r2, #2
 80034b6:	4013      	ands	r3, r2
 80034b8:	d100      	bne.n	80034bc <HAL_RCC_OscConfig+0x140>
 80034ba:	e08b      	b.n	80035d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d13e      	bne.n	800354c <HAL_RCC_OscConfig+0x1d0>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d13b      	bne.n	800354c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80034d4:	4b7e      	ldr	r3, [pc, #504]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2204      	movs	r2, #4
 80034da:	4013      	ands	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_RCC_OscConfig+0x16c>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e302      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b79      	ldr	r3, [pc, #484]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a7b      	ldr	r2, [pc, #492]	@ (80036dc <HAL_RCC_OscConfig+0x360>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	021a      	lsls	r2, r3, #8
 80034f8:	4b75      	ldr	r3, [pc, #468]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034fe:	4b74      	ldr	r3, [pc, #464]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2209      	movs	r2, #9
 8003504:	4393      	bics	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	4b71      	ldr	r3, [pc, #452]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003510:	f000 fc40 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8003514:	0001      	movs	r1, r0
 8003516:	4b6e      	ldr	r3, [pc, #440]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	220f      	movs	r2, #15
 800351e:	4013      	ands	r3, r2
 8003520:	4a6f      	ldr	r2, [pc, #444]	@ (80036e0 <HAL_RCC_OscConfig+0x364>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	000a      	movs	r2, r1
 8003526:	40da      	lsrs	r2, r3
 8003528:	4b6e      	ldr	r3, [pc, #440]	@ (80036e4 <HAL_RCC_OscConfig+0x368>)
 800352a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800352c:	4b6e      	ldr	r3, [pc, #440]	@ (80036e8 <HAL_RCC_OscConfig+0x36c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2513      	movs	r5, #19
 8003532:	197c      	adds	r4, r7, r5
 8003534:	0018      	movs	r0, r3
 8003536:	f7fd fcbb 	bl	8000eb0 <HAL_InitTick>
 800353a:	0003      	movs	r3, r0
 800353c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800353e:	197b      	adds	r3, r7, r5
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d046      	beq.n	80035d4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003546:	197b      	adds	r3, r7, r5
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	e2d0      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d027      	beq.n	80035a2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003552:	4b5f      	ldr	r3, [pc, #380]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2209      	movs	r2, #9
 8003558:	4393      	bics	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	4b5c      	ldr	r3, [pc, #368]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fd fcea 	bl	8000f3c <HAL_GetTick>
 8003568:	0003      	movs	r3, r0
 800356a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356e:	f7fd fce5 	bl	8000f3c <HAL_GetTick>
 8003572:	0002      	movs	r2, r0
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e2b6      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003580:	4b53      	ldr	r3, [pc, #332]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2204      	movs	r2, #4
 8003586:	4013      	ands	r3, r2
 8003588:	d0f1      	beq.n	800356e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358a:	4b51      	ldr	r3, [pc, #324]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4a53      	ldr	r2, [pc, #332]	@ (80036dc <HAL_RCC_OscConfig+0x360>)
 8003590:	4013      	ands	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	021a      	lsls	r2, r3, #8
 800359a:	4b4d      	ldr	r3, [pc, #308]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	e018      	b.n	80035d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a2:	4b4b      	ldr	r3, [pc, #300]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b4a      	ldr	r3, [pc, #296]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80035a8:	2101      	movs	r1, #1
 80035aa:	438a      	bics	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd fcc5 	bl	8000f3c <HAL_GetTick>
 80035b2:	0003      	movs	r3, r0
 80035b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fd fcc0 	bl	8000f3c <HAL_GetTick>
 80035bc:	0002      	movs	r2, r0
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e291      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035ca:	4b41      	ldr	r3, [pc, #260]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	d1f1      	bne.n	80035b8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2210      	movs	r2, #16
 80035da:	4013      	ands	r3, r2
 80035dc:	d100      	bne.n	80035e0 <HAL_RCC_OscConfig+0x264>
 80035de:	e0a1      	b.n	8003724 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d140      	bne.n	8003668 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035e6:	4b3a      	ldr	r3, [pc, #232]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4013      	ands	r3, r2
 80035f0:	d005      	beq.n	80035fe <HAL_RCC_OscConfig+0x282>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e277      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fe:	4b34      	ldr	r3, [pc, #208]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a3a      	ldr	r2, [pc, #232]	@ (80036ec <HAL_RCC_OscConfig+0x370>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800360c:	4b30      	ldr	r3, [pc, #192]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003612:	4b2f      	ldr	r3, [pc, #188]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	0a19      	lsrs	r1, r3, #8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	061a      	lsls	r2, r3, #24
 8003620:	4b2b      	ldr	r3, [pc, #172]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	0b5b      	lsrs	r3, r3, #13
 800362c:	3301      	adds	r3, #1
 800362e:	2280      	movs	r2, #128	@ 0x80
 8003630:	0212      	lsls	r2, r2, #8
 8003632:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003634:	4b26      	ldr	r3, [pc, #152]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	210f      	movs	r1, #15
 800363c:	400b      	ands	r3, r1
 800363e:	4928      	ldr	r1, [pc, #160]	@ (80036e0 <HAL_RCC_OscConfig+0x364>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003644:	4b27      	ldr	r3, [pc, #156]	@ (80036e4 <HAL_RCC_OscConfig+0x368>)
 8003646:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003648:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <HAL_RCC_OscConfig+0x36c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2513      	movs	r5, #19
 800364e:	197c      	adds	r4, r7, r5
 8003650:	0018      	movs	r0, r3
 8003652:	f7fd fc2d 	bl	8000eb0 <HAL_InitTick>
 8003656:	0003      	movs	r3, r0
 8003658:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800365a:	197b      	adds	r3, r7, r5
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d060      	beq.n	8003724 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003662:	197b      	adds	r3, r7, r5
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	e242      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d03f      	beq.n	80036f0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003670:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b16      	ldr	r3, [pc, #88]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 8003676:	2180      	movs	r1, #128	@ 0x80
 8003678:	0049      	lsls	r1, r1, #1
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fd fc5d 	bl	8000f3c <HAL_GetTick>
 8003682:	0003      	movs	r3, r0
 8003684:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003688:	f7fd fc58 	bl	8000f3c <HAL_GetTick>
 800368c:	0002      	movs	r2, r0
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e229      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800369a:	4b0d      	ldr	r3, [pc, #52]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	2380      	movs	r3, #128	@ 0x80
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4013      	ands	r3, r2
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a6:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4a10      	ldr	r2, [pc, #64]	@ (80036ec <HAL_RCC_OscConfig+0x370>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	0019      	movs	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ba:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	0a19      	lsrs	r1, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	061a      	lsls	r2, r3, #24
 80036c8:	4b01      	ldr	r3, [pc, #4]	@ (80036d0 <HAL_RCC_OscConfig+0x354>)
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	e029      	b.n	8003724 <HAL_RCC_OscConfig+0x3a8>
 80036d0:	40021000 	.word	0x40021000
 80036d4:	fffeffff 	.word	0xfffeffff
 80036d8:	fffbffff 	.word	0xfffbffff
 80036dc:	ffffe0ff 	.word	0xffffe0ff
 80036e0:	08009558 	.word	0x08009558
 80036e4:	20000000 	.word	0x20000000
 80036e8:	20000004 	.word	0x20000004
 80036ec:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036f0:	4bbd      	ldr	r3, [pc, #756]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4bbc      	ldr	r3, [pc, #752]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80036f6:	49bd      	ldr	r1, [pc, #756]	@ (80039ec <HAL_RCC_OscConfig+0x670>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fd fc1e 	bl	8000f3c <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003706:	f7fd fc19 	bl	8000f3c <HAL_GetTick>
 800370a:	0002      	movs	r2, r0
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e1ea      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003718:	4bb3      	ldr	r3, [pc, #716]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4013      	ands	r3, r2
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2208      	movs	r2, #8
 800372a:	4013      	ands	r3, r2
 800372c:	d036      	beq.n	800379c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d019      	beq.n	800376a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003736:	4bac      	ldr	r3, [pc, #688]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003738:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800373a:	4bab      	ldr	r3, [pc, #684]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800373c:	2101      	movs	r1, #1
 800373e:	430a      	orrs	r2, r1
 8003740:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7fd fbfb 	bl	8000f3c <HAL_GetTick>
 8003746:	0003      	movs	r3, r0
 8003748:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374c:	f7fd fbf6 	bl	8000f3c <HAL_GetTick>
 8003750:	0002      	movs	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1c7      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800375e:	4ba2      	ldr	r3, [pc, #648]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003762:	2202      	movs	r2, #2
 8003764:	4013      	ands	r3, r2
 8003766:	d0f1      	beq.n	800374c <HAL_RCC_OscConfig+0x3d0>
 8003768:	e018      	b.n	800379c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376a:	4b9f      	ldr	r3, [pc, #636]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800376c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800376e:	4b9e      	ldr	r3, [pc, #632]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003770:	2101      	movs	r1, #1
 8003772:	438a      	bics	r2, r1
 8003774:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003776:	f7fd fbe1 	bl	8000f3c <HAL_GetTick>
 800377a:	0003      	movs	r3, r0
 800377c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003780:	f7fd fbdc 	bl	8000f3c <HAL_GetTick>
 8003784:	0002      	movs	r2, r0
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1ad      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003792:	4b95      	ldr	r3, [pc, #596]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003796:	2202      	movs	r2, #2
 8003798:	4013      	ands	r3, r2
 800379a:	d1f1      	bne.n	8003780 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2204      	movs	r2, #4
 80037a2:	4013      	ands	r3, r2
 80037a4:	d100      	bne.n	80037a8 <HAL_RCC_OscConfig+0x42c>
 80037a6:	e0ae      	b.n	8003906 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a8:	2027      	movs	r0, #39	@ 0x27
 80037aa:	183b      	adds	r3, r7, r0
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b0:	4b8d      	ldr	r3, [pc, #564]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80037b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037b4:	2380      	movs	r3, #128	@ 0x80
 80037b6:	055b      	lsls	r3, r3, #21
 80037b8:	4013      	ands	r3, r2
 80037ba:	d109      	bne.n	80037d0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b8a      	ldr	r3, [pc, #552]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80037be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037c0:	4b89      	ldr	r3, [pc, #548]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80037c2:	2180      	movs	r1, #128	@ 0x80
 80037c4:	0549      	lsls	r1, r1, #21
 80037c6:	430a      	orrs	r2, r1
 80037c8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80037ca:	183b      	adds	r3, r7, r0
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	4b87      	ldr	r3, [pc, #540]	@ (80039f0 <HAL_RCC_OscConfig+0x674>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4013      	ands	r3, r2
 80037da:	d11a      	bne.n	8003812 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037dc:	4b84      	ldr	r3, [pc, #528]	@ (80039f0 <HAL_RCC_OscConfig+0x674>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b83      	ldr	r3, [pc, #524]	@ (80039f0 <HAL_RCC_OscConfig+0x674>)
 80037e2:	2180      	movs	r1, #128	@ 0x80
 80037e4:	0049      	lsls	r1, r1, #1
 80037e6:	430a      	orrs	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ea:	f7fd fba7 	bl	8000f3c <HAL_GetTick>
 80037ee:	0003      	movs	r3, r0
 80037f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f4:	f7fd fba2 	bl	8000f3c <HAL_GetTick>
 80037f8:	0002      	movs	r2, r0
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	@ 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e173      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b7a      	ldr	r3, [pc, #488]	@ (80039f0 <HAL_RCC_OscConfig+0x674>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	2380      	movs	r3, #128	@ 0x80
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4013      	ands	r3, r2
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	2380      	movs	r3, #128	@ 0x80
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	429a      	cmp	r2, r3
 800381c:	d107      	bne.n	800382e <HAL_RCC_OscConfig+0x4b2>
 800381e:	4b72      	ldr	r3, [pc, #456]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003820:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003822:	4b71      	ldr	r3, [pc, #452]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003824:	2180      	movs	r1, #128	@ 0x80
 8003826:	0049      	lsls	r1, r1, #1
 8003828:	430a      	orrs	r2, r1
 800382a:	651a      	str	r2, [r3, #80]	@ 0x50
 800382c:	e031      	b.n	8003892 <HAL_RCC_OscConfig+0x516>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x4d4>
 8003836:	4b6c      	ldr	r3, [pc, #432]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003838:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800383a:	4b6b      	ldr	r3, [pc, #428]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800383c:	496b      	ldr	r1, [pc, #428]	@ (80039ec <HAL_RCC_OscConfig+0x670>)
 800383e:	400a      	ands	r2, r1
 8003840:	651a      	str	r2, [r3, #80]	@ 0x50
 8003842:	4b69      	ldr	r3, [pc, #420]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003844:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003846:	4b68      	ldr	r3, [pc, #416]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003848:	496a      	ldr	r1, [pc, #424]	@ (80039f4 <HAL_RCC_OscConfig+0x678>)
 800384a:	400a      	ands	r2, r1
 800384c:	651a      	str	r2, [r3, #80]	@ 0x50
 800384e:	e020      	b.n	8003892 <HAL_RCC_OscConfig+0x516>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	23a0      	movs	r3, #160	@ 0xa0
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	429a      	cmp	r2, r3
 800385a:	d10e      	bne.n	800387a <HAL_RCC_OscConfig+0x4fe>
 800385c:	4b62      	ldr	r3, [pc, #392]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800385e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003860:	4b61      	ldr	r3, [pc, #388]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003862:	2180      	movs	r1, #128	@ 0x80
 8003864:	00c9      	lsls	r1, r1, #3
 8003866:	430a      	orrs	r2, r1
 8003868:	651a      	str	r2, [r3, #80]	@ 0x50
 800386a:	4b5f      	ldr	r3, [pc, #380]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800386c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800386e:	4b5e      	ldr	r3, [pc, #376]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003870:	2180      	movs	r1, #128	@ 0x80
 8003872:	0049      	lsls	r1, r1, #1
 8003874:	430a      	orrs	r2, r1
 8003876:	651a      	str	r2, [r3, #80]	@ 0x50
 8003878:	e00b      	b.n	8003892 <HAL_RCC_OscConfig+0x516>
 800387a:	4b5b      	ldr	r3, [pc, #364]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800387c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800387e:	4b5a      	ldr	r3, [pc, #360]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003880:	495a      	ldr	r1, [pc, #360]	@ (80039ec <HAL_RCC_OscConfig+0x670>)
 8003882:	400a      	ands	r2, r1
 8003884:	651a      	str	r2, [r3, #80]	@ 0x50
 8003886:	4b58      	ldr	r3, [pc, #352]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003888:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800388a:	4b57      	ldr	r3, [pc, #348]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800388c:	4959      	ldr	r1, [pc, #356]	@ (80039f4 <HAL_RCC_OscConfig+0x678>)
 800388e:	400a      	ands	r2, r1
 8003890:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d015      	beq.n	80038c6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389a:	f7fd fb4f 	bl	8000f3c <HAL_GetTick>
 800389e:	0003      	movs	r3, r0
 80038a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038a2:	e009      	b.n	80038b8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fd fb4a 	bl	8000f3c <HAL_GetTick>
 80038a8:	0002      	movs	r2, r0
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	4a52      	ldr	r2, [pc, #328]	@ (80039f8 <HAL_RCC_OscConfig+0x67c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e11a      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b8:	4b4b      	ldr	r3, [pc, #300]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80038ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038bc:	2380      	movs	r3, #128	@ 0x80
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4013      	ands	r3, r2
 80038c2:	d0ef      	beq.n	80038a4 <HAL_RCC_OscConfig+0x528>
 80038c4:	e014      	b.n	80038f0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fd fb39 	bl	8000f3c <HAL_GetTick>
 80038ca:	0003      	movs	r3, r0
 80038cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038ce:	e009      	b.n	80038e4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd fb34 	bl	8000f3c <HAL_GetTick>
 80038d4:	0002      	movs	r2, r0
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	4a47      	ldr	r2, [pc, #284]	@ (80039f8 <HAL_RCC_OscConfig+0x67c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e104      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038e4:	4b40      	ldr	r3, [pc, #256]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80038e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038e8:	2380      	movs	r3, #128	@ 0x80
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4013      	ands	r3, r2
 80038ee:	d1ef      	bne.n	80038d0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038f0:	2327      	movs	r3, #39	@ 0x27
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d105      	bne.n	8003906 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fa:	4b3b      	ldr	r3, [pc, #236]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80038fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fe:	4b3a      	ldr	r3, [pc, #232]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003900:	493e      	ldr	r1, [pc, #248]	@ (80039fc <HAL_RCC_OscConfig+0x680>)
 8003902:	400a      	ands	r2, r1
 8003904:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2220      	movs	r2, #32
 800390c:	4013      	ands	r3, r2
 800390e:	d049      	beq.n	80039a4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d026      	beq.n	8003966 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003918:	4b33      	ldr	r3, [pc, #204]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b32      	ldr	r3, [pc, #200]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800391e:	2101      	movs	r1, #1
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	4b30      	ldr	r3, [pc, #192]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003928:	4b2f      	ldr	r3, [pc, #188]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800392a:	2101      	movs	r1, #1
 800392c:	430a      	orrs	r2, r1
 800392e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003930:	4b33      	ldr	r3, [pc, #204]	@ (8003a00 <HAL_RCC_OscConfig+0x684>)
 8003932:	6a1a      	ldr	r2, [r3, #32]
 8003934:	4b32      	ldr	r3, [pc, #200]	@ (8003a00 <HAL_RCC_OscConfig+0x684>)
 8003936:	2180      	movs	r1, #128	@ 0x80
 8003938:	0189      	lsls	r1, r1, #6
 800393a:	430a      	orrs	r2, r1
 800393c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fd fafd 	bl	8000f3c <HAL_GetTick>
 8003942:	0003      	movs	r3, r0
 8003944:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003948:	f7fd faf8 	bl	8000f3c <HAL_GetTick>
 800394c:	0002      	movs	r2, r0
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e0c9      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800395a:	4b23      	ldr	r3, [pc, #140]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2202      	movs	r2, #2
 8003960:	4013      	ands	r3, r2
 8003962:	d0f1      	beq.n	8003948 <HAL_RCC_OscConfig+0x5cc>
 8003964:	e01e      	b.n	80039a4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003966:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	4b1f      	ldr	r3, [pc, #124]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800396c:	2101      	movs	r1, #1
 800396e:	438a      	bics	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
 8003972:	4b23      	ldr	r3, [pc, #140]	@ (8003a00 <HAL_RCC_OscConfig+0x684>)
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	4b22      	ldr	r3, [pc, #136]	@ (8003a00 <HAL_RCC_OscConfig+0x684>)
 8003978:	4922      	ldr	r1, [pc, #136]	@ (8003a04 <HAL_RCC_OscConfig+0x688>)
 800397a:	400a      	ands	r2, r1
 800397c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fd fadd 	bl	8000f3c <HAL_GetTick>
 8003982:	0003      	movs	r3, r0
 8003984:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003988:	f7fd fad8 	bl	8000f3c <HAL_GetTick>
 800398c:	0002      	movs	r2, r0
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0a9      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800399a:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2202      	movs	r2, #2
 80039a0:	4013      	ands	r3, r2
 80039a2:	d1f1      	bne.n	8003988 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d100      	bne.n	80039ae <HAL_RCC_OscConfig+0x632>
 80039ac:	e09e      	b.n	8003aec <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	d100      	bne.n	80039b6 <HAL_RCC_OscConfig+0x63a>
 80039b4:	e077      	b.n	8003aa6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d158      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <HAL_RCC_OscConfig+0x66c>)
 80039c4:	4910      	ldr	r1, [pc, #64]	@ (8003a08 <HAL_RCC_OscConfig+0x68c>)
 80039c6:	400a      	ands	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ca:	f7fd fab7 	bl	8000f3c <HAL_GetTick>
 80039ce:	0003      	movs	r3, r0
 80039d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039d2:	e01b      	b.n	8003a0c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fd fab2 	bl	8000f3c <HAL_GetTick>
 80039d8:	0002      	movs	r2, r0
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d914      	bls.n	8003a0c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e083      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	40021000 	.word	0x40021000
 80039ec:	fffffeff 	.word	0xfffffeff
 80039f0:	40007000 	.word	0x40007000
 80039f4:	fffffbff 	.word	0xfffffbff
 80039f8:	00001388 	.word	0x00001388
 80039fc:	efffffff 	.word	0xefffffff
 8003a00:	40010000 	.word	0x40010000
 8003a04:	ffffdfff 	.word	0xffffdfff
 8003a08:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	@ 0x80
 8003a12:	049b      	lsls	r3, r3, #18
 8003a14:	4013      	ands	r3, r2
 8003a16:	d1dd      	bne.n	80039d4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a18:	4b37      	ldr	r3, [pc, #220]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a37      	ldr	r2, [pc, #220]	@ (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	0019      	movs	r1, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	431a      	orrs	r2, r3
 8003a32:	4b31      	ldr	r3, [pc, #196]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a34:	430a      	orrs	r2, r1
 8003a36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a38:	4b2f      	ldr	r3, [pc, #188]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a3e:	2180      	movs	r1, #128	@ 0x80
 8003a40:	0449      	lsls	r1, r1, #17
 8003a42:	430a      	orrs	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a46:	f7fd fa79 	bl	8000f3c <HAL_GetTick>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fd fa74 	bl	8000f3c <HAL_GetTick>
 8003a54:	0002      	movs	r2, r0
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e045      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003a62:	4b25      	ldr	r3, [pc, #148]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	2380      	movs	r3, #128	@ 0x80
 8003a68:	049b      	lsls	r3, r3, #18
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x6d4>
 8003a6e:	e03d      	b.n	8003aec <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a70:	4b21      	ldr	r3, [pc, #132]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a76:	4922      	ldr	r1, [pc, #136]	@ (8003b00 <HAL_RCC_OscConfig+0x784>)
 8003a78:	400a      	ands	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fa5e 	bl	8000f3c <HAL_GetTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fd fa59 	bl	8000f3c <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e02a      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a98:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	049b      	lsls	r3, r3, #18
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d1f0      	bne.n	8003a86 <HAL_RCC_OscConfig+0x70a>
 8003aa4:	e022      	b.n	8003aec <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e01d      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ab2:	4b11      	ldr	r3, [pc, #68]	@ (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	2380      	movs	r3, #128	@ 0x80
 8003abc:	025b      	lsls	r3, r3, #9
 8003abe:	401a      	ands	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d10f      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	23f0      	movs	r3, #240	@ 0xf0
 8003acc:	039b      	lsls	r3, r3, #14
 8003ace:	401a      	ands	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	23c0      	movs	r3, #192	@ 0xc0
 8003adc:	041b      	lsls	r3, r3, #16
 8003ade:	401a      	ands	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	0018      	movs	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b00a      	add	sp, #40	@ 0x28
 8003af4:	bdb0      	pop	{r4, r5, r7, pc}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	40021000 	.word	0x40021000
 8003afc:	ff02ffff 	.word	0xff02ffff
 8003b00:	feffffff 	.word	0xfeffffff

08003b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b5b0      	push	{r4, r5, r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e128      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b96      	ldr	r3, [pc, #600]	@ (8003d74 <HAL_RCC_ClockConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	4013      	ands	r3, r2
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d91e      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b93      	ldr	r3, [pc, #588]	@ (8003d74 <HAL_RCC_ClockConfig+0x270>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4393      	bics	r3, r2
 8003b2e:	0019      	movs	r1, r3
 8003b30:	4b90      	ldr	r3, [pc, #576]	@ (8003d74 <HAL_RCC_ClockConfig+0x270>)
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b38:	f7fd fa00 	bl	8000f3c <HAL_GetTick>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b40:	e009      	b.n	8003b56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b42:	f7fd f9fb 	bl	8000f3c <HAL_GetTick>
 8003b46:	0002      	movs	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	4a8a      	ldr	r2, [pc, #552]	@ (8003d78 <HAL_RCC_ClockConfig+0x274>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e109      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b87      	ldr	r3, [pc, #540]	@ (8003d74 <HAL_RCC_ClockConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1ee      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6e:	4b83      	ldr	r3, [pc, #524]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	22f0      	movs	r2, #240	@ 0xf0
 8003b74:	4393      	bics	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <HAL_RCC_ClockConfig+0x8a>
 8003b8c:	e089      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b96:	4b79      	ldr	r3, [pc, #484]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	2380      	movs	r3, #128	@ 0x80
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d120      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0e1      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d107      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bae:	4b73      	ldr	r3, [pc, #460]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	2380      	movs	r3, #128	@ 0x80
 8003bb4:	049b      	lsls	r3, r3, #18
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d114      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e0d5      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d109      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0ca      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003bd4:	4b69      	ldr	r3, [pc, #420]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0c2      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be4:	4b65      	ldr	r3, [pc, #404]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2203      	movs	r2, #3
 8003bea:	4393      	bics	r3, r2
 8003bec:	0019      	movs	r1, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	4b62      	ldr	r3, [pc, #392]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf8:	f7fd f9a0 	bl	8000f3c <HAL_GetTick>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d111      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c08:	e009      	b.n	8003c1e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0a:	f7fd f997 	bl	8000f3c <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	4a58      	ldr	r2, [pc, #352]	@ (8003d78 <HAL_RCC_ClockConfig+0x274>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e0a5      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c1e:	4b57      	ldr	r3, [pc, #348]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	220c      	movs	r2, #12
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d1ef      	bne.n	8003c0a <HAL_RCC_ClockConfig+0x106>
 8003c2a:	e03a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d111      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c34:	e009      	b.n	8003c4a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c36:	f7fd f981 	bl	8000f3c <HAL_GetTick>
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	4a4d      	ldr	r2, [pc, #308]	@ (8003d78 <HAL_RCC_ClockConfig+0x274>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e08f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	220c      	movs	r2, #12
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b0c      	cmp	r3, #12
 8003c54:	d1ef      	bne.n	8003c36 <HAL_RCC_ClockConfig+0x132>
 8003c56:	e024      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d11b      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c60:	e009      	b.n	8003c76 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c62:	f7fd f96b 	bl	8000f3c <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	4a42      	ldr	r2, [pc, #264]	@ (8003d78 <HAL_RCC_ClockConfig+0x274>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e079      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c76:	4b41      	ldr	r3, [pc, #260]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	220c      	movs	r2, #12
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d1ef      	bne.n	8003c62 <HAL_RCC_ClockConfig+0x15e>
 8003c82:	e00e      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c84:	f7fd f95a 	bl	8000f3c <HAL_GetTick>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	4a3a      	ldr	r2, [pc, #232]	@ (8003d78 <HAL_RCC_ClockConfig+0x274>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e068      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c98:	4b38      	ldr	r3, [pc, #224]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	220c      	movs	r2, #12
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca2:	4b34      	ldr	r3, [pc, #208]	@ (8003d74 <HAL_RCC_ClockConfig+0x270>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4013      	ands	r3, r2
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d21e      	bcs.n	8003cee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb0:	4b30      	ldr	r3, [pc, #192]	@ (8003d74 <HAL_RCC_ClockConfig+0x270>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	0019      	movs	r1, r3
 8003cba:	4b2e      	ldr	r3, [pc, #184]	@ (8003d74 <HAL_RCC_ClockConfig+0x270>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cc2:	f7fd f93b 	bl	8000f3c <HAL_GetTick>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	e009      	b.n	8003ce0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fd f936 	bl	8000f3c <HAL_GetTick>
 8003cd0:	0002      	movs	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	4a28      	ldr	r2, [pc, #160]	@ (8003d78 <HAL_RCC_ClockConfig+0x274>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e044      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce0:	4b24      	ldr	r3, [pc, #144]	@ (8003d74 <HAL_RCC_ClockConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf8:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a20      	ldr	r2, [pc, #128]	@ (8003d80 <HAL_RCC_ClockConfig+0x27c>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2208      	movs	r2, #8
 8003d12:	4013      	ands	r3, r2
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d16:	4b19      	ldr	r3, [pc, #100]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d84 <HAL_RCC_ClockConfig+0x280>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	0019      	movs	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	00da      	lsls	r2, r3, #3
 8003d26:	4b15      	ldr	r3, [pc, #84]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d2c:	f000 f832 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8003d30:	0001      	movs	r1, r0
 8003d32:	4b12      	ldr	r3, [pc, #72]	@ (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	220f      	movs	r2, #15
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	4a12      	ldr	r2, [pc, #72]	@ (8003d88 <HAL_RCC_ClockConfig+0x284>)
 8003d3e:	5cd3      	ldrb	r3, [r2, r3]
 8003d40:	000a      	movs	r2, r1
 8003d42:	40da      	lsrs	r2, r3
 8003d44:	4b11      	ldr	r3, [pc, #68]	@ (8003d8c <HAL_RCC_ClockConfig+0x288>)
 8003d46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d48:	4b11      	ldr	r3, [pc, #68]	@ (8003d90 <HAL_RCC_ClockConfig+0x28c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	250b      	movs	r5, #11
 8003d4e:	197c      	adds	r4, r7, r5
 8003d50:	0018      	movs	r0, r3
 8003d52:	f7fd f8ad 	bl	8000eb0 <HAL_InitTick>
 8003d56:	0003      	movs	r3, r0
 8003d58:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003d5a:	197b      	adds	r3, r7, r5
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003d62:	197b      	adds	r3, r7, r5
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b004      	add	sp, #16
 8003d70:	bdb0      	pop	{r4, r5, r7, pc}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	40022000 	.word	0x40022000
 8003d78:	00001388 	.word	0x00001388
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	fffff8ff 	.word	0xfffff8ff
 8003d84:	ffffc7ff 	.word	0xffffc7ff
 8003d88:	08009558 	.word	0x08009558
 8003d8c:	20000000 	.word	0x20000000
 8003d90:	20000004 	.word	0x20000004

08003d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d94:	b5b0      	push	{r4, r5, r7, lr}
 8003d96:	b08e      	sub	sp, #56	@ 0x38
 8003d98:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x138>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da2:	230c      	movs	r3, #12
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d014      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003daa:	d900      	bls.n	8003dae <HAL_RCC_GetSysClockFreq+0x1a>
 8003dac:	e07b      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x112>
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x24>
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d00b      	beq.n	8003dce <HAL_RCC_GetSysClockFreq+0x3a>
 8003db6:	e076      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003db8:	4b44      	ldr	r3, [pc, #272]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x138>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d002      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003dc2:	4b43      	ldr	r3, [pc, #268]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003dc4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003dc6:	e07c      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003dc8:	4b42      	ldr	r3, [pc, #264]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003dca:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003dcc:	e079      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dce:	4b42      	ldr	r3, [pc, #264]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003dd0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003dd2:	e076      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd6:	0c9a      	lsrs	r2, r3, #18
 8003dd8:	230f      	movs	r3, #15
 8003dda:	401a      	ands	r2, r3
 8003ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x148>)
 8003dde:	5c9b      	ldrb	r3, [r3, r2]
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de4:	0d9a      	lsrs	r2, r3, #22
 8003de6:	2303      	movs	r3, #3
 8003de8:	4013      	ands	r3, r2
 8003dea:	3301      	adds	r3, #1
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dee:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x138>)
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	2380      	movs	r3, #128	@ 0x80
 8003df4:	025b      	lsls	r3, r3, #9
 8003df6:	4013      	ands	r3, r2
 8003df8:	d01a      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	4a35      	ldr	r2, [pc, #212]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003e04:	2300      	movs	r3, #0
 8003e06:	69b8      	ldr	r0, [r7, #24]
 8003e08:	69f9      	ldr	r1, [r7, #28]
 8003e0a:	f7fc fa29 	bl	8000260 <__aeabi_lmul>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	000b      	movs	r3, r1
 8003e12:	0010      	movs	r0, r2
 8003e14:	0019      	movs	r1, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f7fc f9fd 	bl	8000220 <__aeabi_uldivmod>
 8003e26:	0002      	movs	r2, r0
 8003e28:	000b      	movs	r3, r1
 8003e2a:	0013      	movs	r3, r2
 8003e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e2e:	e037      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003e30:	4b26      	ldr	r3, [pc, #152]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x138>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2210      	movs	r2, #16
 8003e36:	4013      	ands	r3, r2
 8003e38:	d01a      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	4a23      	ldr	r2, [pc, #140]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e44:	2300      	movs	r3, #0
 8003e46:	68b8      	ldr	r0, [r7, #8]
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	f7fc fa09 	bl	8000260 <__aeabi_lmul>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	000b      	movs	r3, r1
 8003e52:	0010      	movs	r0, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f7fc f9dd 	bl	8000220 <__aeabi_uldivmod>
 8003e66:	0002      	movs	r2, r0
 8003e68:	000b      	movs	r3, r1
 8003e6a:	0013      	movs	r3, r2
 8003e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e6e:	e017      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e72:	0018      	movs	r0, r3
 8003e74:	2300      	movs	r3, #0
 8003e76:	0019      	movs	r1, r3
 8003e78:	4a16      	ldr	r2, [pc, #88]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f7fc f9f0 	bl	8000260 <__aeabi_lmul>
 8003e80:	0002      	movs	r2, r0
 8003e82:	000b      	movs	r3, r1
 8003e84:	0010      	movs	r0, r2
 8003e86:	0019      	movs	r1, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	001c      	movs	r4, r3
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	001d      	movs	r5, r3
 8003e90:	0022      	movs	r2, r4
 8003e92:	002b      	movs	r3, r5
 8003e94:	f7fc f9c4 	bl	8000220 <__aeabi_uldivmod>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	000b      	movs	r3, r1
 8003e9c:	0013      	movs	r3, r2
 8003e9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003ea4:	e00d      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ea6:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x138>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	0b5b      	lsrs	r3, r3, #13
 8003eac:	2207      	movs	r2, #7
 8003eae:	4013      	ands	r3, r2
 8003eb0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	2280      	movs	r2, #128	@ 0x80
 8003eb8:	0212      	lsls	r2, r2, #8
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003ec0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b00e      	add	sp, #56	@ 0x38
 8003eca:	bdb0      	pop	{r4, r5, r7, pc}
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	003d0900 	.word	0x003d0900
 8003ed4:	00f42400 	.word	0x00f42400
 8003ed8:	007a1200 	.word	0x007a1200
 8003edc:	08009570 	.word	0x08009570

08003ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee4:	4b02      	ldr	r3, [pc, #8]	@ (8003ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			@ (mov r8, r8)
 8003ef0:	20000000 	.word	0x20000000

08003ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ef8:	f7ff fff2 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003efc:	0001      	movs	r1, r0
 8003efe:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	2207      	movs	r2, #7
 8003f06:	4013      	ands	r3, r2
 8003f08:	4a04      	ldr	r2, [pc, #16]	@ (8003f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f0a:	5cd3      	ldrb	r3, [r2, r3]
 8003f0c:	40d9      	lsrs	r1, r3
 8003f0e:	000b      	movs	r3, r1
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	08009568 	.word	0x08009568

08003f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f24:	f7ff ffdc 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f28:	0001      	movs	r1, r0
 8003f2a:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	0adb      	lsrs	r3, r3, #11
 8003f30:	2207      	movs	r2, #7
 8003f32:	4013      	ands	r3, r2
 8003f34:	4a04      	ldr	r2, [pc, #16]	@ (8003f48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	40d9      	lsrs	r1, r3
 8003f3a:	000b      	movs	r3, r1
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	40021000 	.word	0x40021000
 8003f48:	08009568 	.word	0x08009568

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003f54:	2317      	movs	r3, #23
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2220      	movs	r2, #32
 8003f62:	4013      	ands	r3, r2
 8003f64:	d106      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	2380      	movs	r3, #128	@ 0x80
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d100      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003f72:	e104      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f74:	4bb1      	ldr	r3, [pc, #708]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f78:	2380      	movs	r3, #128	@ 0x80
 8003f7a:	055b      	lsls	r3, r3, #21
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d10a      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f80:	4bae      	ldr	r3, [pc, #696]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f84:	4bad      	ldr	r3, [pc, #692]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f86:	2180      	movs	r1, #128	@ 0x80
 8003f88:	0549      	lsls	r1, r1, #21
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003f8e:	2317      	movs	r3, #23
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	4baa      	ldr	r3, [pc, #680]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	2380      	movs	r3, #128	@ 0x80
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4ba7      	ldr	r3, [pc, #668]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4ba6      	ldr	r3, [pc, #664]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fa8:	2180      	movs	r1, #128	@ 0x80
 8003faa:	0049      	lsls	r1, r1, #1
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb0:	f7fc ffc4 	bl	8000f3c <HAL_GetTick>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	e008      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fba:	f7fc ffbf 	bl	8000f3c <HAL_GetTick>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b64      	cmp	r3, #100	@ 0x64
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e133      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	4b9c      	ldr	r3, [pc, #624]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	2380      	movs	r3, #128	@ 0x80
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003fd8:	4b98      	ldr	r3, [pc, #608]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	23c0      	movs	r3, #192	@ 0xc0
 8003fde:	039b      	lsls	r3, r3, #14
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	23c0      	movs	r3, #192	@ 0xc0
 8003fea:	039b      	lsls	r3, r3, #14
 8003fec:	4013      	ands	r3, r2
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d107      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	23c0      	movs	r3, #192	@ 0xc0
 8003ffa:	039b      	lsls	r3, r3, #14
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	429a      	cmp	r2, r3
 8004002:	d013      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	23c0      	movs	r3, #192	@ 0xc0
 800400a:	029b      	lsls	r3, r3, #10
 800400c:	401a      	ands	r2, r3
 800400e:	23c0      	movs	r3, #192	@ 0xc0
 8004010:	029b      	lsls	r3, r3, #10
 8004012:	429a      	cmp	r2, r3
 8004014:	d10a      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004016:	4b89      	ldr	r3, [pc, #548]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	2380      	movs	r3, #128	@ 0x80
 800401c:	029b      	lsls	r3, r3, #10
 800401e:	401a      	ands	r2, r3
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	029b      	lsls	r3, r3, #10
 8004024:	429a      	cmp	r2, r3
 8004026:	d101      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e103      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800402c:	4b83      	ldr	r3, [pc, #524]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800402e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004030:	23c0      	movs	r3, #192	@ 0xc0
 8004032:	029b      	lsls	r3, r3, #10
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d049      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	23c0      	movs	r3, #192	@ 0xc0
 8004044:	029b      	lsls	r3, r3, #10
 8004046:	4013      	ands	r3, r2
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	429a      	cmp	r2, r3
 800404c:	d004      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2220      	movs	r2, #32
 8004054:	4013      	ands	r3, r2
 8004056:	d10d      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	23c0      	movs	r3, #192	@ 0xc0
 800405e:	029b      	lsls	r3, r3, #10
 8004060:	4013      	ands	r3, r2
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	429a      	cmp	r2, r3
 8004066:	d034      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	2380      	movs	r3, #128	@ 0x80
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	4013      	ands	r3, r2
 8004072:	d02e      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004074:	4b71      	ldr	r3, [pc, #452]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004078:	4a72      	ldr	r2, [pc, #456]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800407a:	4013      	ands	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407e:	4b6f      	ldr	r3, [pc, #444]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004080:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004082:	4b6e      	ldr	r3, [pc, #440]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004084:	2180      	movs	r1, #128	@ 0x80
 8004086:	0309      	lsls	r1, r1, #12
 8004088:	430a      	orrs	r2, r1
 800408a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800408c:	4b6b      	ldr	r3, [pc, #428]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800408e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004090:	4b6a      	ldr	r3, [pc, #424]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004092:	496d      	ldr	r1, [pc, #436]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004094:	400a      	ands	r2, r1
 8004096:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004098:	4b68      	ldr	r3, [pc, #416]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4013      	ands	r3, r2
 80040a6:	d014      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fc ff48 	bl	8000f3c <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040b0:	e009      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fc ff43 	bl	8000f3c <HAL_GetTick>
 80040b6:	0002      	movs	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	4a63      	ldr	r2, [pc, #396]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0b6      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040c6:	4b5d      	ldr	r3, [pc, #372]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4013      	ands	r3, r2
 80040d0:	d0ef      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	2380      	movs	r3, #128	@ 0x80
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	4013      	ands	r3, r2
 80040dc:	d01f      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	23c0      	movs	r3, #192	@ 0xc0
 80040e4:	029b      	lsls	r3, r3, #10
 80040e6:	401a      	ands	r2, r3
 80040e8:	23c0      	movs	r3, #192	@ 0xc0
 80040ea:	029b      	lsls	r3, r3, #10
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d10c      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80040f0:	4b52      	ldr	r3, [pc, #328]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a56      	ldr	r2, [pc, #344]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	23c0      	movs	r3, #192	@ 0xc0
 8004100:	039b      	lsls	r3, r3, #14
 8004102:	401a      	ands	r2, r3
 8004104:	4b4d      	ldr	r3, [pc, #308]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	4b4c      	ldr	r3, [pc, #304]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800410c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	23c0      	movs	r3, #192	@ 0xc0
 8004114:	029b      	lsls	r3, r3, #10
 8004116:	401a      	ands	r2, r3
 8004118:	4b48      	ldr	r3, [pc, #288]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800411a:	430a      	orrs	r2, r1
 800411c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2220      	movs	r2, #32
 8004124:	4013      	ands	r3, r2
 8004126:	d01f      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	23c0      	movs	r3, #192	@ 0xc0
 800412e:	029b      	lsls	r3, r3, #10
 8004130:	401a      	ands	r2, r3
 8004132:	23c0      	movs	r3, #192	@ 0xc0
 8004134:	029b      	lsls	r3, r3, #10
 8004136:	429a      	cmp	r2, r3
 8004138:	d10c      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800413a:	4b40      	ldr	r3, [pc, #256]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a44      	ldr	r2, [pc, #272]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004140:	4013      	ands	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	23c0      	movs	r3, #192	@ 0xc0
 800414a:	039b      	lsls	r3, r3, #14
 800414c:	401a      	ands	r2, r3
 800414e:	4b3b      	ldr	r3, [pc, #236]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	4b39      	ldr	r3, [pc, #228]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004156:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	23c0      	movs	r3, #192	@ 0xc0
 800415e:	029b      	lsls	r3, r3, #10
 8004160:	401a      	ands	r2, r3
 8004162:	4b36      	ldr	r3, [pc, #216]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004164:	430a      	orrs	r2, r1
 8004166:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004168:	2317      	movs	r3, #23
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d105      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004172:	4b32      	ldr	r3, [pc, #200]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004176:	4b31      	ldr	r3, [pc, #196]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004178:	4936      	ldr	r1, [pc, #216]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800417a:	400a      	ands	r2, r1
 800417c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2201      	movs	r2, #1
 8004184:	4013      	ands	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004188:	4b2c      	ldr	r3, [pc, #176]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800418a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418c:	2203      	movs	r2, #3
 800418e:	4393      	bics	r3, r2
 8004190:	0019      	movs	r1, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	4b29      	ldr	r3, [pc, #164]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004198:	430a      	orrs	r2, r1
 800419a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2202      	movs	r2, #2
 80041a2:	4013      	ands	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a6:	4b25      	ldr	r3, [pc, #148]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041aa:	220c      	movs	r2, #12
 80041ac:	4393      	bics	r3, r2
 80041ae:	0019      	movs	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	4b21      	ldr	r3, [pc, #132]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041b6:	430a      	orrs	r2, r1
 80041b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2204      	movs	r2, #4
 80041c0:	4013      	ands	r3, r2
 80041c2:	d009      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c4:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c8:	4a23      	ldr	r2, [pc, #140]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	0019      	movs	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	4b1a      	ldr	r3, [pc, #104]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041d4:	430a      	orrs	r2, r1
 80041d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2208      	movs	r2, #8
 80041de:	4013      	ands	r3, r2
 80041e0:	d009      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e2:	4b16      	ldr	r3, [pc, #88]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e6:	4a1d      	ldr	r2, [pc, #116]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	4b12      	ldr	r3, [pc, #72]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041f2:	430a      	orrs	r2, r1
 80041f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2240      	movs	r2, #64	@ 0x40
 80041fc:	4013      	ands	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004200:	4b0e      	ldr	r3, [pc, #56]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004204:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004206:	4013      	ands	r3, r2
 8004208:	0019      	movs	r1, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004210:	430a      	orrs	r2, r1
 8004212:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2280      	movs	r2, #128	@ 0x80
 800421a:	4013      	ands	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800421e:	4b07      	ldr	r3, [pc, #28]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004222:	4a10      	ldr	r2, [pc, #64]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004224:	4013      	ands	r3, r2
 8004226:	0019      	movs	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	4b03      	ldr	r3, [pc, #12]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800422e:	430a      	orrs	r2, r1
 8004230:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b006      	add	sp, #24
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
 8004244:	fffcffff 	.word	0xfffcffff
 8004248:	fff7ffff 	.word	0xfff7ffff
 800424c:	00001388 	.word	0x00001388
 8004250:	ffcfffff 	.word	0xffcfffff
 8004254:	efffffff 	.word	0xefffffff
 8004258:	fffff3ff 	.word	0xfffff3ff
 800425c:	ffffcfff 	.word	0xffffcfff
 8004260:	fbffffff 	.word	0xfbffffff
 8004264:	fff3ffff 	.word	0xfff3ffff

08004268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e083      	b.n	8004382 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	2382      	movs	r3, #130	@ 0x82
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	429a      	cmp	r2, r3
 800428c:	d009      	beq.n	80042a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	61da      	str	r2, [r3, #28]
 8004294:	e005      	b.n	80042a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2251      	movs	r2, #81	@ 0x51
 80042ac:	5c9b      	ldrb	r3, [r3, r2]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d107      	bne.n	80042c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2250      	movs	r2, #80	@ 0x50
 80042b8:	2100      	movs	r1, #0
 80042ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	0018      	movs	r0, r3
 80042c0:	f7fc fbd4 	bl	8000a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2251      	movs	r2, #81	@ 0x51
 80042c8:	2102      	movs	r1, #2
 80042ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2140      	movs	r1, #64	@ 0x40
 80042d8:	438a      	bics	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	2382      	movs	r3, #130	@ 0x82
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	401a      	ands	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6899      	ldr	r1, [r3, #8]
 80042ea:	2384      	movs	r3, #132	@ 0x84
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	400b      	ands	r3, r1
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68d9      	ldr	r1, [r3, #12]
 80042f6:	2380      	movs	r3, #128	@ 0x80
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	400b      	ands	r3, r1
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2102      	movs	r1, #2
 8004304:	400b      	ands	r3, r1
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	2101      	movs	r1, #1
 800430e:	400b      	ands	r3, r1
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6999      	ldr	r1, [r3, #24]
 8004316:	2380      	movs	r3, #128	@ 0x80
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	400b      	ands	r3, r1
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	2138      	movs	r1, #56	@ 0x38
 8004324:	400b      	ands	r3, r1
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	2180      	movs	r1, #128	@ 0x80
 800432e:	400b      	ands	r3, r1
 8004330:	431a      	orrs	r2, r3
 8004332:	0011      	movs	r1, r2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004338:	2380      	movs	r3, #128	@ 0x80
 800433a:	019b      	lsls	r3, r3, #6
 800433c:	401a      	ands	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	2204      	movs	r2, #4
 800434e:	4013      	ands	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	2210      	movs	r2, #16
 8004358:	401a      	ands	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4907      	ldr	r1, [pc, #28]	@ (800438c <HAL_SPI_Init+0x124>)
 800436e:	400a      	ands	r2, r1
 8004370:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2251      	movs	r2, #81	@ 0x51
 800437c:	2101      	movs	r1, #1
 800437e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b002      	add	sp, #8
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	fffff7ff 	.word	0xfffff7ff

08004390 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e074      	b.n	800448c <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	223c      	movs	r2, #60	@ 0x3c
 80043a6:	5c9b      	ldrb	r3, [r3, r2]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	223d      	movs	r2, #61	@ 0x3d
 80043b2:	2100      	movs	r1, #0
 80043b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f7fc fbf1 	bl	8000ba0 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	223c      	movs	r2, #60	@ 0x3c
 80043c2:	2102      	movs	r1, #2
 80043c4:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80043dc:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 80043e4:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80043ea:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 80043f0:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 80043f6:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 80043fc:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 8004402:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7b1b      	ldrb	r3, [r3, #12]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d108      	bne.n	8004426 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2180      	movs	r1, #128	@ 0x80
 8004420:	0249      	lsls	r1, r1, #9
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	43d2      	mvns	r2, r2
 800443c:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004456:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681c      	ldr	r4, [r3, #0]
 8004460:	0010      	movs	r0, r2
 8004462:	f000 f817 	bl	8004494 <TSC_extract_groups>
 8004466:	0003      	movs	r3, r0
 8004468:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2103      	movs	r1, #3
 8004476:	438a      	bics	r2, r1
 8004478:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2203      	movs	r2, #3
 8004480:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	223c      	movs	r2, #60	@ 0x3c
 8004486:	2101      	movs	r1, #1
 8004488:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b003      	add	sp, #12
 8004492:	bd90      	pop	{r4, r7, pc}

08004494 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80044a0:	2300      	movs	r3, #0
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	e011      	b.n	80044ca <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	220f      	movs	r2, #15
 80044ac:	409a      	lsls	r2, r3
 80044ae:	0013      	movs	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4013      	ands	r3, r2
 80044b4:	d006      	beq.n	80044c4 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80044b6:	2201      	movs	r2, #1
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	409a      	lsls	r2, r3
 80044bc:	0013      	movs	r3, r2
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b07      	cmp	r3, #7
 80044ce:	d9ea      	bls.n	80044a6 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	0018      	movs	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b004      	add	sp, #16
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e044      	b.n	8004578 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2278      	movs	r2, #120	@ 0x78
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	0018      	movs	r0, r3
 8004502:	f7fc fbe5 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2224      	movs	r2, #36	@ 0x24
 800450a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2101      	movs	r1, #1
 8004518:	438a      	bics	r2, r1
 800451a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	0018      	movs	r0, r3
 8004520:	f000 f830 	bl	8004584 <UART_SetConfig>
 8004524:	0003      	movs	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e024      	b.n	8004578 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f000 faa7 	bl	8004a8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	490d      	ldr	r1, [pc, #52]	@ (8004580 <HAL_UART_Init+0xa4>)
 800454a:	400a      	ands	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	212a      	movs	r1, #42	@ 0x2a
 800455a:	438a      	bics	r2, r1
 800455c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	430a      	orrs	r2, r1
 800456c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0018      	movs	r0, r3
 8004572:	f000 fb3f 	bl	8004bf4 <UART_CheckIdleState>
 8004576:	0003      	movs	r3, r0
}
 8004578:	0018      	movs	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	b002      	add	sp, #8
 800457e:	bd80      	pop	{r7, pc}
 8004580:	ffffb7ff 	.word	0xffffb7ff

08004584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004584:	b5b0      	push	{r4, r5, r7, lr}
 8004586:	b08e      	sub	sp, #56	@ 0x38
 8004588:	af00      	add	r7, sp, #0
 800458a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800458c:	231a      	movs	r3, #26
 800458e:	2218      	movs	r2, #24
 8004590:	189b      	adds	r3, r3, r2
 8004592:	19db      	adds	r3, r3, r7
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4ac6      	ldr	r2, [pc, #792]	@ (80048d0 <UART_SetConfig+0x34c>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	0019      	movs	r1, r3
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045c2:	430a      	orrs	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4ac1      	ldr	r2, [pc, #772]	@ (80048d4 <UART_SetConfig+0x350>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	0019      	movs	r1, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4abb      	ldr	r2, [pc, #748]	@ (80048d8 <UART_SetConfig+0x354>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045f4:	4313      	orrs	r3, r2
 80045f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	4ab7      	ldr	r2, [pc, #732]	@ (80048dc <UART_SetConfig+0x358>)
 8004600:	4013      	ands	r3, r2
 8004602:	0019      	movs	r1, r3
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4ab3      	ldr	r2, [pc, #716]	@ (80048e0 <UART_SetConfig+0x35c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d131      	bne.n	800467c <UART_SetConfig+0xf8>
 8004618:	4bb2      	ldr	r3, [pc, #712]	@ (80048e4 <UART_SetConfig+0x360>)
 800461a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461c:	2203      	movs	r2, #3
 800461e:	4013      	ands	r3, r2
 8004620:	2b03      	cmp	r3, #3
 8004622:	d01d      	beq.n	8004660 <UART_SetConfig+0xdc>
 8004624:	d823      	bhi.n	800466e <UART_SetConfig+0xea>
 8004626:	2b02      	cmp	r3, #2
 8004628:	d00c      	beq.n	8004644 <UART_SetConfig+0xc0>
 800462a:	d820      	bhi.n	800466e <UART_SetConfig+0xea>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <UART_SetConfig+0xb2>
 8004630:	2b01      	cmp	r3, #1
 8004632:	d00e      	beq.n	8004652 <UART_SetConfig+0xce>
 8004634:	e01b      	b.n	800466e <UART_SetConfig+0xea>
 8004636:	231b      	movs	r3, #27
 8004638:	2218      	movs	r2, #24
 800463a:	189b      	adds	r3, r3, r2
 800463c:	19db      	adds	r3, r3, r7
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e09c      	b.n	800477e <UART_SetConfig+0x1fa>
 8004644:	231b      	movs	r3, #27
 8004646:	2218      	movs	r2, #24
 8004648:	189b      	adds	r3, r3, r2
 800464a:	19db      	adds	r3, r3, r7
 800464c:	2202      	movs	r2, #2
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	e095      	b.n	800477e <UART_SetConfig+0x1fa>
 8004652:	231b      	movs	r3, #27
 8004654:	2218      	movs	r2, #24
 8004656:	189b      	adds	r3, r3, r2
 8004658:	19db      	adds	r3, r3, r7
 800465a:	2204      	movs	r2, #4
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e08e      	b.n	800477e <UART_SetConfig+0x1fa>
 8004660:	231b      	movs	r3, #27
 8004662:	2218      	movs	r2, #24
 8004664:	189b      	adds	r3, r3, r2
 8004666:	19db      	adds	r3, r3, r7
 8004668:	2208      	movs	r2, #8
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e087      	b.n	800477e <UART_SetConfig+0x1fa>
 800466e:	231b      	movs	r3, #27
 8004670:	2218      	movs	r2, #24
 8004672:	189b      	adds	r3, r3, r2
 8004674:	19db      	adds	r3, r3, r7
 8004676:	2210      	movs	r2, #16
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e080      	b.n	800477e <UART_SetConfig+0x1fa>
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a99      	ldr	r2, [pc, #612]	@ (80048e8 <UART_SetConfig+0x364>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d131      	bne.n	80046ea <UART_SetConfig+0x166>
 8004686:	4b97      	ldr	r3, [pc, #604]	@ (80048e4 <UART_SetConfig+0x360>)
 8004688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468a:	220c      	movs	r2, #12
 800468c:	4013      	ands	r3, r2
 800468e:	2b0c      	cmp	r3, #12
 8004690:	d01d      	beq.n	80046ce <UART_SetConfig+0x14a>
 8004692:	d823      	bhi.n	80046dc <UART_SetConfig+0x158>
 8004694:	2b08      	cmp	r3, #8
 8004696:	d00c      	beq.n	80046b2 <UART_SetConfig+0x12e>
 8004698:	d820      	bhi.n	80046dc <UART_SetConfig+0x158>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <UART_SetConfig+0x120>
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d00e      	beq.n	80046c0 <UART_SetConfig+0x13c>
 80046a2:	e01b      	b.n	80046dc <UART_SetConfig+0x158>
 80046a4:	231b      	movs	r3, #27
 80046a6:	2218      	movs	r2, #24
 80046a8:	189b      	adds	r3, r3, r2
 80046aa:	19db      	adds	r3, r3, r7
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e065      	b.n	800477e <UART_SetConfig+0x1fa>
 80046b2:	231b      	movs	r3, #27
 80046b4:	2218      	movs	r2, #24
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	19db      	adds	r3, r3, r7
 80046ba:	2202      	movs	r2, #2
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e05e      	b.n	800477e <UART_SetConfig+0x1fa>
 80046c0:	231b      	movs	r3, #27
 80046c2:	2218      	movs	r2, #24
 80046c4:	189b      	adds	r3, r3, r2
 80046c6:	19db      	adds	r3, r3, r7
 80046c8:	2204      	movs	r2, #4
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	e057      	b.n	800477e <UART_SetConfig+0x1fa>
 80046ce:	231b      	movs	r3, #27
 80046d0:	2218      	movs	r2, #24
 80046d2:	189b      	adds	r3, r3, r2
 80046d4:	19db      	adds	r3, r3, r7
 80046d6:	2208      	movs	r2, #8
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e050      	b.n	800477e <UART_SetConfig+0x1fa>
 80046dc:	231b      	movs	r3, #27
 80046de:	2218      	movs	r2, #24
 80046e0:	189b      	adds	r3, r3, r2
 80046e2:	19db      	adds	r3, r3, r7
 80046e4:	2210      	movs	r2, #16
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	e049      	b.n	800477e <UART_SetConfig+0x1fa>
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a7a      	ldr	r2, [pc, #488]	@ (80048d8 <UART_SetConfig+0x354>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d13e      	bne.n	8004772 <UART_SetConfig+0x1ee>
 80046f4:	4b7b      	ldr	r3, [pc, #492]	@ (80048e4 <UART_SetConfig+0x360>)
 80046f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046f8:	23c0      	movs	r3, #192	@ 0xc0
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	4013      	ands	r3, r2
 80046fe:	22c0      	movs	r2, #192	@ 0xc0
 8004700:	0112      	lsls	r2, r2, #4
 8004702:	4293      	cmp	r3, r2
 8004704:	d027      	beq.n	8004756 <UART_SetConfig+0x1d2>
 8004706:	22c0      	movs	r2, #192	@ 0xc0
 8004708:	0112      	lsls	r2, r2, #4
 800470a:	4293      	cmp	r3, r2
 800470c:	d82a      	bhi.n	8004764 <UART_SetConfig+0x1e0>
 800470e:	2280      	movs	r2, #128	@ 0x80
 8004710:	0112      	lsls	r2, r2, #4
 8004712:	4293      	cmp	r3, r2
 8004714:	d011      	beq.n	800473a <UART_SetConfig+0x1b6>
 8004716:	2280      	movs	r2, #128	@ 0x80
 8004718:	0112      	lsls	r2, r2, #4
 800471a:	4293      	cmp	r3, r2
 800471c:	d822      	bhi.n	8004764 <UART_SetConfig+0x1e0>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <UART_SetConfig+0x1a8>
 8004722:	2280      	movs	r2, #128	@ 0x80
 8004724:	00d2      	lsls	r2, r2, #3
 8004726:	4293      	cmp	r3, r2
 8004728:	d00e      	beq.n	8004748 <UART_SetConfig+0x1c4>
 800472a:	e01b      	b.n	8004764 <UART_SetConfig+0x1e0>
 800472c:	231b      	movs	r3, #27
 800472e:	2218      	movs	r2, #24
 8004730:	189b      	adds	r3, r3, r2
 8004732:	19db      	adds	r3, r3, r7
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e021      	b.n	800477e <UART_SetConfig+0x1fa>
 800473a:	231b      	movs	r3, #27
 800473c:	2218      	movs	r2, #24
 800473e:	189b      	adds	r3, r3, r2
 8004740:	19db      	adds	r3, r3, r7
 8004742:	2202      	movs	r2, #2
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e01a      	b.n	800477e <UART_SetConfig+0x1fa>
 8004748:	231b      	movs	r3, #27
 800474a:	2218      	movs	r2, #24
 800474c:	189b      	adds	r3, r3, r2
 800474e:	19db      	adds	r3, r3, r7
 8004750:	2204      	movs	r2, #4
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e013      	b.n	800477e <UART_SetConfig+0x1fa>
 8004756:	231b      	movs	r3, #27
 8004758:	2218      	movs	r2, #24
 800475a:	189b      	adds	r3, r3, r2
 800475c:	19db      	adds	r3, r3, r7
 800475e:	2208      	movs	r2, #8
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e00c      	b.n	800477e <UART_SetConfig+0x1fa>
 8004764:	231b      	movs	r3, #27
 8004766:	2218      	movs	r2, #24
 8004768:	189b      	adds	r3, r3, r2
 800476a:	19db      	adds	r3, r3, r7
 800476c:	2210      	movs	r2, #16
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e005      	b.n	800477e <UART_SetConfig+0x1fa>
 8004772:	231b      	movs	r3, #27
 8004774:	2218      	movs	r2, #24
 8004776:	189b      	adds	r3, r3, r2
 8004778:	19db      	adds	r3, r3, r7
 800477a:	2210      	movs	r2, #16
 800477c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a55      	ldr	r2, [pc, #340]	@ (80048d8 <UART_SetConfig+0x354>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d000      	beq.n	800478a <UART_SetConfig+0x206>
 8004788:	e084      	b.n	8004894 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800478a:	231b      	movs	r3, #27
 800478c:	2218      	movs	r2, #24
 800478e:	189b      	adds	r3, r3, r2
 8004790:	19db      	adds	r3, r3, r7
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d01d      	beq.n	80047d4 <UART_SetConfig+0x250>
 8004798:	dc20      	bgt.n	80047dc <UART_SetConfig+0x258>
 800479a:	2b04      	cmp	r3, #4
 800479c:	d015      	beq.n	80047ca <UART_SetConfig+0x246>
 800479e:	dc1d      	bgt.n	80047dc <UART_SetConfig+0x258>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <UART_SetConfig+0x226>
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d005      	beq.n	80047b4 <UART_SetConfig+0x230>
 80047a8:	e018      	b.n	80047dc <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047aa:	f7ff fba3 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80047ae:	0003      	movs	r3, r0
 80047b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047b2:	e01c      	b.n	80047ee <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b4:	4b4b      	ldr	r3, [pc, #300]	@ (80048e4 <UART_SetConfig+0x360>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2210      	movs	r2, #16
 80047ba:	4013      	ands	r3, r2
 80047bc:	d002      	beq.n	80047c4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80047be:	4b4b      	ldr	r3, [pc, #300]	@ (80048ec <UART_SetConfig+0x368>)
 80047c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047c2:	e014      	b.n	80047ee <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80047c4:	4b4a      	ldr	r3, [pc, #296]	@ (80048f0 <UART_SetConfig+0x36c>)
 80047c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047c8:	e011      	b.n	80047ee <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ca:	f7ff fae3 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 80047ce:	0003      	movs	r3, r0
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047d2:	e00c      	b.n	80047ee <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d4:	2380      	movs	r3, #128	@ 0x80
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047da:	e008      	b.n	80047ee <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80047e0:	231a      	movs	r3, #26
 80047e2:	2218      	movs	r2, #24
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	19db      	adds	r3, r3, r7
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
        break;
 80047ec:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d100      	bne.n	80047f6 <UART_SetConfig+0x272>
 80047f4:	e132      	b.n	8004a5c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	0013      	movs	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004802:	429a      	cmp	r2, r3
 8004804:	d305      	bcc.n	8004812 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800480c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800480e:	429a      	cmp	r2, r3
 8004810:	d906      	bls.n	8004820 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004812:	231a      	movs	r3, #26
 8004814:	2218      	movs	r2, #24
 8004816:	189b      	adds	r3, r3, r2
 8004818:	19db      	adds	r3, r3, r7
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e11d      	b.n	8004a5c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	6939      	ldr	r1, [r7, #16]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	000b      	movs	r3, r1
 800482e:	0e1b      	lsrs	r3, r3, #24
 8004830:	0010      	movs	r0, r2
 8004832:	0205      	lsls	r5, r0, #8
 8004834:	431d      	orrs	r5, r3
 8004836:	000b      	movs	r3, r1
 8004838:	021c      	lsls	r4, r3, #8
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	68f9      	ldr	r1, [r7, #12]
 800484a:	1900      	adds	r0, r0, r4
 800484c:	4169      	adcs	r1, r5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	2300      	movs	r3, #0
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f7fb fce0 	bl	8000220 <__aeabi_uldivmod>
 8004860:	0002      	movs	r2, r0
 8004862:	000b      	movs	r3, r1
 8004864:	0013      	movs	r3, r2
 8004866:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800486a:	23c0      	movs	r3, #192	@ 0xc0
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	429a      	cmp	r2, r3
 8004870:	d309      	bcc.n	8004886 <UART_SetConfig+0x302>
 8004872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004874:	2380      	movs	r3, #128	@ 0x80
 8004876:	035b      	lsls	r3, r3, #13
 8004878:	429a      	cmp	r2, r3
 800487a:	d204      	bcs.n	8004886 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004882:	60da      	str	r2, [r3, #12]
 8004884:	e0ea      	b.n	8004a5c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8004886:	231a      	movs	r3, #26
 8004888:	2218      	movs	r2, #24
 800488a:	189b      	adds	r3, r3, r2
 800488c:	19db      	adds	r3, r3, r7
 800488e:	2201      	movs	r2, #1
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e0e3      	b.n	8004a5c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	2380      	movs	r3, #128	@ 0x80
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	429a      	cmp	r2, r3
 800489e:	d000      	beq.n	80048a2 <UART_SetConfig+0x31e>
 80048a0:	e085      	b.n	80049ae <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80048a2:	231b      	movs	r3, #27
 80048a4:	2218      	movs	r2, #24
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	19db      	adds	r3, r3, r7
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d837      	bhi.n	8004920 <UART_SetConfig+0x39c>
 80048b0:	009a      	lsls	r2, r3, #2
 80048b2:	4b10      	ldr	r3, [pc, #64]	@ (80048f4 <UART_SetConfig+0x370>)
 80048b4:	18d3      	adds	r3, r2, r3
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ba:	f7ff fb1b 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80048be:	0003      	movs	r3, r0
 80048c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048c2:	e036      	b.n	8004932 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7ff fb2c 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 80048c8:	0003      	movs	r3, r0
 80048ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048cc:	e031      	b.n	8004932 <UART_SetConfig+0x3ae>
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	efff69f3 	.word	0xefff69f3
 80048d4:	ffffcfff 	.word	0xffffcfff
 80048d8:	40004800 	.word	0x40004800
 80048dc:	fffff4ff 	.word	0xfffff4ff
 80048e0:	40013800 	.word	0x40013800
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40004400 	.word	0x40004400
 80048ec:	003d0900 	.word	0x003d0900
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	0800957c 	.word	0x0800957c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048f8:	4b60      	ldr	r3, [pc, #384]	@ (8004a7c <UART_SetConfig+0x4f8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2210      	movs	r2, #16
 80048fe:	4013      	ands	r3, r2
 8004900:	d002      	beq.n	8004908 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004902:	4b5f      	ldr	r3, [pc, #380]	@ (8004a80 <UART_SetConfig+0x4fc>)
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004906:	e014      	b.n	8004932 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004908:	4b5e      	ldr	r3, [pc, #376]	@ (8004a84 <UART_SetConfig+0x500>)
 800490a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800490c:	e011      	b.n	8004932 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490e:	f7ff fa41 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8004912:	0003      	movs	r3, r0
 8004914:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004916:	e00c      	b.n	8004932 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004918:	2380      	movs	r3, #128	@ 0x80
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800491e:	e008      	b.n	8004932 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004924:	231a      	movs	r3, #26
 8004926:	2218      	movs	r2, #24
 8004928:	189b      	adds	r3, r3, r2
 800492a:	19db      	adds	r3, r3, r7
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
        break;
 8004930:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d100      	bne.n	800493a <UART_SetConfig+0x3b6>
 8004938:	e090      	b.n	8004a5c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800493a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493c:	005a      	lsls	r2, r3, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	18d2      	adds	r2, r2, r3
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	0019      	movs	r1, r3
 800494c:	0010      	movs	r0, r2
 800494e:	f7fb fbdb 	bl	8000108 <__udivsi3>
 8004952:	0003      	movs	r3, r0
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004958:	2b0f      	cmp	r3, #15
 800495a:	d921      	bls.n	80049a0 <UART_SetConfig+0x41c>
 800495c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800495e:	2380      	movs	r3, #128	@ 0x80
 8004960:	025b      	lsls	r3, r3, #9
 8004962:	429a      	cmp	r2, r3
 8004964:	d21c      	bcs.n	80049a0 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004968:	b29a      	uxth	r2, r3
 800496a:	200e      	movs	r0, #14
 800496c:	2418      	movs	r4, #24
 800496e:	1903      	adds	r3, r0, r4
 8004970:	19db      	adds	r3, r3, r7
 8004972:	210f      	movs	r1, #15
 8004974:	438a      	bics	r2, r1
 8004976:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	2207      	movs	r2, #7
 8004980:	4013      	ands	r3, r2
 8004982:	b299      	uxth	r1, r3
 8004984:	1903      	adds	r3, r0, r4
 8004986:	19db      	adds	r3, r3, r7
 8004988:	1902      	adds	r2, r0, r4
 800498a:	19d2      	adds	r2, r2, r7
 800498c:	8812      	ldrh	r2, [r2, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1902      	adds	r2, r0, r4
 8004998:	19d2      	adds	r2, r2, r7
 800499a:	8812      	ldrh	r2, [r2, #0]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	e05d      	b.n	8004a5c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80049a0:	231a      	movs	r3, #26
 80049a2:	2218      	movs	r2, #24
 80049a4:	189b      	adds	r3, r3, r2
 80049a6:	19db      	adds	r3, r3, r7
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	e056      	b.n	8004a5c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ae:	231b      	movs	r3, #27
 80049b0:	2218      	movs	r2, #24
 80049b2:	189b      	adds	r3, r3, r2
 80049b4:	19db      	adds	r3, r3, r7
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d822      	bhi.n	8004a02 <UART_SetConfig+0x47e>
 80049bc:	009a      	lsls	r2, r3, #2
 80049be:	4b32      	ldr	r3, [pc, #200]	@ (8004a88 <UART_SetConfig+0x504>)
 80049c0:	18d3      	adds	r3, r2, r3
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c6:	f7ff fa95 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80049ca:	0003      	movs	r3, r0
 80049cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049ce:	e021      	b.n	8004a14 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d0:	f7ff faa6 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 80049d4:	0003      	movs	r3, r0
 80049d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049d8:	e01c      	b.n	8004a14 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049da:	4b28      	ldr	r3, [pc, #160]	@ (8004a7c <UART_SetConfig+0x4f8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2210      	movs	r2, #16
 80049e0:	4013      	ands	r3, r2
 80049e2:	d002      	beq.n	80049ea <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049e4:	4b26      	ldr	r3, [pc, #152]	@ (8004a80 <UART_SetConfig+0x4fc>)
 80049e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049e8:	e014      	b.n	8004a14 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80049ea:	4b26      	ldr	r3, [pc, #152]	@ (8004a84 <UART_SetConfig+0x500>)
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049ee:	e011      	b.n	8004a14 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f0:	f7ff f9d0 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 80049f4:	0003      	movs	r3, r0
 80049f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049f8:	e00c      	b.n	8004a14 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fa:	2380      	movs	r3, #128	@ 0x80
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a00:	e008      	b.n	8004a14 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004a06:	231a      	movs	r3, #26
 8004a08:	2218      	movs	r2, #24
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	19db      	adds	r3, r3, r7
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
        break;
 8004a12:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d020      	beq.n	8004a5c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	085a      	lsrs	r2, r3, #1
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a22:	18d2      	adds	r2, r2, r3
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	0019      	movs	r1, r3
 8004a2a:	0010      	movs	r0, r2
 8004a2c:	f7fb fb6c 	bl	8000108 <__udivsi3>
 8004a30:	0003      	movs	r3, r0
 8004a32:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a36:	2b0f      	cmp	r3, #15
 8004a38:	d90a      	bls.n	8004a50 <UART_SetConfig+0x4cc>
 8004a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a3c:	2380      	movs	r3, #128	@ 0x80
 8004a3e:	025b      	lsls	r3, r3, #9
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d205      	bcs.n	8004a50 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e005      	b.n	8004a5c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a50:	231a      	movs	r3, #26
 8004a52:	2218      	movs	r2, #24
 8004a54:	189b      	adds	r3, r3, r2
 8004a56:	19db      	adds	r3, r3, r7
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	2200      	movs	r2, #0
 8004a66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a68:	231a      	movs	r3, #26
 8004a6a:	2218      	movs	r2, #24
 8004a6c:	189b      	adds	r3, r3, r2
 8004a6e:	19db      	adds	r3, r3, r7
 8004a70:	781b      	ldrb	r3, [r3, #0]
}
 8004a72:	0018      	movs	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b00e      	add	sp, #56	@ 0x38
 8004a78:	bdb0      	pop	{r4, r5, r7, pc}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	003d0900 	.word	0x003d0900
 8004a84:	00f42400 	.word	0x00f42400
 8004a88:	080095a0 	.word	0x080095a0

08004a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8004bd0 <UART_AdvFeatureConfig+0x144>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	2202      	movs	r2, #2
 8004abc:	4013      	ands	r3, r2
 8004abe:	d00b      	beq.n	8004ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4a43      	ldr	r2, [pc, #268]	@ (8004bd4 <UART_AdvFeatureConfig+0x148>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	0019      	movs	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	2204      	movs	r2, #4
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8004bd8 <UART_AdvFeatureConfig+0x14c>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	0019      	movs	r1, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	2208      	movs	r2, #8
 8004b00:	4013      	ands	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4a34      	ldr	r2, [pc, #208]	@ (8004bdc <UART_AdvFeatureConfig+0x150>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	0019      	movs	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	2210      	movs	r2, #16
 8004b22:	4013      	ands	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8004be0 <UART_AdvFeatureConfig+0x154>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	0019      	movs	r1, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	2220      	movs	r2, #32
 8004b44:	4013      	ands	r3, r2
 8004b46:	d00b      	beq.n	8004b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4a25      	ldr	r2, [pc, #148]	@ (8004be4 <UART_AdvFeatureConfig+0x158>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	0019      	movs	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	2240      	movs	r2, #64	@ 0x40
 8004b66:	4013      	ands	r3, r2
 8004b68:	d01d      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a1d      	ldr	r2, [pc, #116]	@ (8004be8 <UART_AdvFeatureConfig+0x15c>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b86:	2380      	movs	r3, #128	@ 0x80
 8004b88:	035b      	lsls	r3, r3, #13
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d10b      	bne.n	8004ba6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a15      	ldr	r2, [pc, #84]	@ (8004bec <UART_AdvFeatureConfig+0x160>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	2280      	movs	r2, #128	@ 0x80
 8004bac:	4013      	ands	r3, r2
 8004bae:	d00b      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf0 <UART_AdvFeatureConfig+0x164>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	0019      	movs	r1, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }
}
 8004bc8:	46c0      	nop			@ (mov r8, r8)
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	fffdffff 	.word	0xfffdffff
 8004bd4:	fffeffff 	.word	0xfffeffff
 8004bd8:	fffbffff 	.word	0xfffbffff
 8004bdc:	ffff7fff 	.word	0xffff7fff
 8004be0:	ffffefff 	.word	0xffffefff
 8004be4:	ffffdfff 	.word	0xffffdfff
 8004be8:	ffefffff 	.word	0xffefffff
 8004bec:	ff9fffff 	.word	0xff9fffff
 8004bf0:	fff7ffff 	.word	0xfff7ffff

08004bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b092      	sub	sp, #72	@ 0x48
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2284      	movs	r2, #132	@ 0x84
 8004c00:	2100      	movs	r1, #0
 8004c02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c04:	f7fc f99a 	bl	8000f3c <HAL_GetTick>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2208      	movs	r2, #8
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d12c      	bne.n	8004c74 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1c:	2280      	movs	r2, #128	@ 0x80
 8004c1e:	0391      	lsls	r1, r2, #14
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4a46      	ldr	r2, [pc, #280]	@ (8004d3c <UART_CheckIdleState+0x148>)
 8004c24:	9200      	str	r2, [sp, #0]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f000 f88c 	bl	8004d44 <UART_WaitOnFlagUntilTimeout>
 8004c2c:	1e03      	subs	r3, r0, #0
 8004c2e:	d021      	beq.n	8004c74 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c30:	f3ef 8310 	mrs	r3, PRIMASK
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	f383 8810 	msr	PRIMASK, r3
}
 8004c44:	46c0      	nop			@ (mov r8, r8)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2180      	movs	r1, #128	@ 0x80
 8004c52:	438a      	bics	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5c:	f383 8810 	msr	PRIMASK, r3
}
 8004c60:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2278      	movs	r2, #120	@ 0x78
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e05f      	b.n	8004d34 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d146      	bne.n	8004d10 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	2280      	movs	r2, #128	@ 0x80
 8004c86:	03d1      	lsls	r1, r2, #15
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d3c <UART_CheckIdleState+0x148>)
 8004c8c:	9200      	str	r2, [sp, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f000 f858 	bl	8004d44 <UART_WaitOnFlagUntilTimeout>
 8004c94:	1e03      	subs	r3, r0, #0
 8004c96:	d03b      	beq.n	8004d10 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c98:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f383 8810 	msr	PRIMASK, r3
}
 8004cac:	46c0      	nop			@ (mov r8, r8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4921      	ldr	r1, [pc, #132]	@ (8004d40 <UART_CheckIdleState+0x14c>)
 8004cba:	400a      	ands	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cca:	f3ef 8310 	mrs	r3, PRIMASK
 8004cce:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f383 8810 	msr	PRIMASK, r3
}
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2101      	movs	r1, #1
 8004cec:	438a      	bics	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f383 8810 	msr	PRIMASK, r3
}
 8004cfa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2280      	movs	r2, #128	@ 0x80
 8004d00:	2120      	movs	r1, #32
 8004d02:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2278      	movs	r2, #120	@ 0x78
 8004d08:	2100      	movs	r1, #0
 8004d0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e011      	b.n	8004d34 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2280      	movs	r2, #128	@ 0x80
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2278      	movs	r2, #120	@ 0x78
 8004d2e:	2100      	movs	r1, #0
 8004d30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	0018      	movs	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b010      	add	sp, #64	@ 0x40
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	01ffffff 	.word	0x01ffffff
 8004d40:	fffffedf 	.word	0xfffffedf

08004d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	1dfb      	adds	r3, r7, #7
 8004d52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d54:	e04b      	b.n	8004dee <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	d048      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5c:	f7fc f8ee 	bl	8000f3c <HAL_GetTick>
 8004d60:	0002      	movs	r2, r0
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e04b      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d035      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d111      	bne.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2208      	movs	r2, #8
 8004d96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 f83c 	bl	8004e18 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2284      	movs	r2, #132	@ 0x84
 8004da4:	2108      	movs	r1, #8
 8004da6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2278      	movs	r2, #120	@ 0x78
 8004dac:	2100      	movs	r1, #0
 8004dae:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e02c      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	2380      	movs	r3, #128	@ 0x80
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	2380      	movs	r3, #128	@ 0x80
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d112      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2280      	movs	r2, #128	@ 0x80
 8004dce:	0112      	lsls	r2, r2, #4
 8004dd0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f000 f81f 	bl	8004e18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2284      	movs	r2, #132	@ 0x84
 8004dde:	2120      	movs	r1, #32
 8004de0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2278      	movs	r2, #120	@ 0x78
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e00f      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	425a      	negs	r2, r3
 8004dfe:	4153      	adcs	r3, r2
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	001a      	movs	r2, r3
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d0a4      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b004      	add	sp, #16
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08e      	sub	sp, #56	@ 0x38
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e20:	f3ef 8310 	mrs	r3, PRIMASK
 8004e24:	617b      	str	r3, [r7, #20]
  return(result);
 8004e26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f383 8810 	msr	PRIMASK, r3
}
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4926      	ldr	r1, [pc, #152]	@ (8004edc <UART_EndRxTransfer+0xc4>)
 8004e42:	400a      	ands	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f383 8810 	msr	PRIMASK, r3
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	623b      	str	r3, [r7, #32]
  return(result);
 8004e58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2101      	movs	r1, #1
 8004e74:	438a      	bics	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	f383 8810 	msr	PRIMASK, r3
}
 8004e82:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d118      	bne.n	8004ebe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e90:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e96:	2301      	movs	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ea0:	46c0      	nop			@ (mov r8, r8)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2110      	movs	r1, #16
 8004eae:	438a      	bics	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f383 8810 	msr	PRIMASK, r3
}
 8004ebc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2280      	movs	r2, #128	@ 0x80
 8004ec2:	2120      	movs	r1, #32
 8004ec4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ed2:	46c0      	nop			@ (mov r8, r8)
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b00e      	add	sp, #56	@ 0x38
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	fffffedf 	.word	0xfffffedf

08004ee0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2244      	movs	r2, #68	@ 0x44
 8004eec:	2100      	movs	r1, #0
 8004eee:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ef0:	4b05      	ldr	r3, [pc, #20]	@ (8004f08 <USB_EnableGlobalInt+0x28>)
 8004ef2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	b299      	uxth	r1, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2240      	movs	r2, #64	@ 0x40
 8004efc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b004      	add	sp, #16
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	0000bf80 	.word	0x0000bf80

08004f0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f14:	4b09      	ldr	r3, [pc, #36]	@ (8004f3c <USB_DisableGlobalInt+0x30>)
 8004f16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2240      	movs	r2, #64	@ 0x40
 8004f1c:	5a9b      	ldrh	r3, [r3, r2]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	b292      	uxth	r2, r2
 8004f24:	43d2      	mvns	r2, r2
 8004f26:	b292      	uxth	r2, r2
 8004f28:	4013      	ands	r3, r2
 8004f2a:	b299      	uxth	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2240      	movs	r2, #64	@ 0x40
 8004f30:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	0018      	movs	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b004      	add	sp, #16
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	0000bf80 	.word	0x0000bf80

08004f40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f40:	b084      	sub	sp, #16
 8004f42:	b590      	push	{r4, r7, lr}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	2004      	movs	r0, #4
 8004f4c:	2410      	movs	r4, #16
 8004f4e:	1900      	adds	r0, r0, r4
 8004f50:	2408      	movs	r4, #8
 8004f52:	46a4      	mov	ip, r4
 8004f54:	44bc      	add	ip, r7
 8004f56:	4460      	add	r0, ip
 8004f58:	6001      	str	r1, [r0, #0]
 8004f5a:	6042      	str	r2, [r0, #4]
 8004f5c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2240      	movs	r2, #64	@ 0x40
 8004f62:	2101      	movs	r1, #1
 8004f64:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2240      	movs	r2, #64	@ 0x40
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2244      	movs	r2, #68	@ 0x44
 8004f72:	2100      	movs	r1, #0
 8004f74:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2250      	movs	r2, #80	@ 0x50
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b003      	add	sp, #12
 8004f86:	bc90      	pop	{r4, r7}
 8004f88:	bc08      	pop	{r3}
 8004f8a:	b004      	add	sp, #16
 8004f8c:	4718      	bx	r3
	...

08004f90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b09c      	sub	sp, #112	@ 0x70
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f9a:	236f      	movs	r3, #111	@ 0x6f
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	18d3      	adds	r3, r2, r3
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	236c      	movs	r3, #108	@ 0x6c
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	49a3      	ldr	r1, [pc, #652]	@ (8005244 <USB_ActivateEndpoint+0x2b4>)
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	78db      	ldrb	r3, [r3, #3]
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d017      	beq.n	8004ff2 <USB_ActivateEndpoint+0x62>
 8004fc2:	dc28      	bgt.n	8005016 <USB_ActivateEndpoint+0x86>
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d00e      	beq.n	8004fe6 <USB_ActivateEndpoint+0x56>
 8004fc8:	dc25      	bgt.n	8005016 <USB_ActivateEndpoint+0x86>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <USB_ActivateEndpoint+0x44>
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d018      	beq.n	8005004 <USB_ActivateEndpoint+0x74>
 8004fd2:	e020      	b.n	8005016 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004fd4:	226c      	movs	r2, #108	@ 0x6c
 8004fd6:	18bb      	adds	r3, r7, r2
 8004fd8:	18ba      	adds	r2, r7, r2
 8004fda:	8812      	ldrh	r2, [r2, #0]
 8004fdc:	2180      	movs	r1, #128	@ 0x80
 8004fde:	0089      	lsls	r1, r1, #2
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	801a      	strh	r2, [r3, #0]
      break;
 8004fe4:	e01c      	b.n	8005020 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8004fe6:	226c      	movs	r2, #108	@ 0x6c
 8004fe8:	18bb      	adds	r3, r7, r2
 8004fea:	18ba      	adds	r2, r7, r2
 8004fec:	8812      	ldrh	r2, [r2, #0]
 8004fee:	801a      	strh	r2, [r3, #0]
      break;
 8004ff0:	e016      	b.n	8005020 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ff2:	226c      	movs	r2, #108	@ 0x6c
 8004ff4:	18bb      	adds	r3, r7, r2
 8004ff6:	18ba      	adds	r2, r7, r2
 8004ff8:	8812      	ldrh	r2, [r2, #0]
 8004ffa:	21c0      	movs	r1, #192	@ 0xc0
 8004ffc:	00c9      	lsls	r1, r1, #3
 8004ffe:	430a      	orrs	r2, r1
 8005000:	801a      	strh	r2, [r3, #0]
      break;
 8005002:	e00d      	b.n	8005020 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005004:	226c      	movs	r2, #108	@ 0x6c
 8005006:	18bb      	adds	r3, r7, r2
 8005008:	18ba      	adds	r2, r7, r2
 800500a:	8812      	ldrh	r2, [r2, #0]
 800500c:	2180      	movs	r1, #128	@ 0x80
 800500e:	00c9      	lsls	r1, r1, #3
 8005010:	430a      	orrs	r2, r1
 8005012:	801a      	strh	r2, [r3, #0]
      break;
 8005014:	e004      	b.n	8005020 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8005016:	236f      	movs	r3, #111	@ 0x6f
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	2201      	movs	r2, #1
 800501c:	701a      	strb	r2, [r3, #0]
      break;
 800501e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	18d3      	adds	r3, r2, r3
 800502a:	226c      	movs	r2, #108	@ 0x6c
 800502c:	18ba      	adds	r2, r7, r2
 800502e:	8812      	ldrh	r2, [r2, #0]
 8005030:	4985      	ldr	r1, [pc, #532]	@ (8005248 <USB_ActivateEndpoint+0x2b8>)
 8005032:	430a      	orrs	r2, r1
 8005034:	b292      	uxth	r2, r2
 8005036:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	18d3      	adds	r3, r2, r3
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	b21b      	sxth	r3, r3
 8005048:	4a80      	ldr	r2, [pc, #512]	@ (800524c <USB_ActivateEndpoint+0x2bc>)
 800504a:	4013      	ands	r3, r2
 800504c:	b21a      	sxth	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b21b      	sxth	r3, r3
 8005054:	4313      	orrs	r3, r2
 8005056:	b21a      	sxth	r2, r3
 8005058:	2166      	movs	r1, #102	@ 0x66
 800505a:	187b      	adds	r3, r7, r1
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	18d3      	adds	r3, r2, r3
 8005068:	187a      	adds	r2, r7, r1
 800506a:	8812      	ldrh	r2, [r2, #0]
 800506c:	4976      	ldr	r1, [pc, #472]	@ (8005248 <USB_ActivateEndpoint+0x2b8>)
 800506e:	430a      	orrs	r2, r1
 8005070:	b292      	uxth	r2, r2
 8005072:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	7b1b      	ldrb	r3, [r3, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d000      	beq.n	800507e <USB_ActivateEndpoint+0xee>
 800507c:	e178      	b.n	8005370 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d100      	bne.n	8005088 <USB_ActivateEndpoint+0xf8>
 8005086:	e07a      	b.n	800517e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2250      	movs	r2, #80	@ 0x50
 8005090:	5a9b      	ldrh	r3, [r3, r2]
 8005092:	b29b      	uxth	r3, r3
 8005094:	001a      	movs	r2, r3
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	189b      	adds	r3, r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	00da      	lsls	r2, r3, #3
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	18d3      	adds	r3, r2, r3
 80050a6:	2280      	movs	r2, #128	@ 0x80
 80050a8:	00d2      	lsls	r2, r2, #3
 80050aa:	4694      	mov	ip, r2
 80050ac:	4463      	add	r3, ip
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	88db      	ldrh	r3, [r3, #6]
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	18db      	adds	r3, r3, r3
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	18d2      	adds	r2, r2, r3
 80050ca:	2112      	movs	r1, #18
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	8812      	ldrh	r2, [r2, #0]
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	2240      	movs	r2, #64	@ 0x40
 80050d8:	4013      	ands	r3, r2
 80050da:	d016      	beq.n	800510a <USB_ActivateEndpoint+0x17a>
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	18d3      	adds	r3, r2, r3
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	2010      	movs	r0, #16
 80050ec:	183b      	adds	r3, r7, r0
 80050ee:	4957      	ldr	r1, [pc, #348]	@ (800524c <USB_ActivateEndpoint+0x2bc>)
 80050f0:	400a      	ands	r2, r1
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	18d3      	adds	r3, r2, r3
 80050fe:	183a      	adds	r2, r7, r0
 8005100:	8812      	ldrh	r2, [r2, #0]
 8005102:	4953      	ldr	r1, [pc, #332]	@ (8005250 <USB_ActivateEndpoint+0x2c0>)
 8005104:	430a      	orrs	r2, r1
 8005106:	b292      	uxth	r2, r2
 8005108:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	78db      	ldrb	r3, [r3, #3]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d01d      	beq.n	800514e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	18d3      	adds	r3, r2, r3
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29a      	uxth	r2, r3
 8005120:	200c      	movs	r0, #12
 8005122:	183b      	adds	r3, r7, r0
 8005124:	494b      	ldr	r1, [pc, #300]	@ (8005254 <USB_ActivateEndpoint+0x2c4>)
 8005126:	400a      	ands	r2, r1
 8005128:	801a      	strh	r2, [r3, #0]
 800512a:	183b      	adds	r3, r7, r0
 800512c:	183a      	adds	r2, r7, r0
 800512e:	8812      	ldrh	r2, [r2, #0]
 8005130:	2120      	movs	r1, #32
 8005132:	404a      	eors	r2, r1
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	18d3      	adds	r3, r2, r3
 8005140:	183a      	adds	r2, r7, r0
 8005142:	8812      	ldrh	r2, [r2, #0]
 8005144:	4940      	ldr	r1, [pc, #256]	@ (8005248 <USB_ActivateEndpoint+0x2b8>)
 8005146:	430a      	orrs	r2, r1
 8005148:	b292      	uxth	r2, r2
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	e2b4      	b.n	80056b8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	18d3      	adds	r3, r2, r3
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	b29a      	uxth	r2, r3
 800515c:	200e      	movs	r0, #14
 800515e:	183b      	adds	r3, r7, r0
 8005160:	493c      	ldr	r1, [pc, #240]	@ (8005254 <USB_ActivateEndpoint+0x2c4>)
 8005162:	400a      	ands	r2, r1
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	18d3      	adds	r3, r2, r3
 8005170:	183a      	adds	r2, r7, r0
 8005172:	8812      	ldrh	r2, [r2, #0]
 8005174:	4934      	ldr	r1, [pc, #208]	@ (8005248 <USB_ActivateEndpoint+0x2b8>)
 8005176:	430a      	orrs	r2, r1
 8005178:	b292      	uxth	r2, r2
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e29c      	b.n	80056b8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	633b      	str	r3, [r7, #48]	@ 0x30
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2250      	movs	r2, #80	@ 0x50
 8005186:	5a9b      	ldrh	r3, [r3, r2]
 8005188:	b29b      	uxth	r3, r3
 800518a:	001a      	movs	r2, r3
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	189b      	adds	r3, r3, r2
 8005190:	633b      	str	r3, [r7, #48]	@ 0x30
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	00da      	lsls	r2, r3, #3
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	18d3      	adds	r3, r2, r3
 800519c:	4a2e      	ldr	r2, [pc, #184]	@ (8005258 <USB_ActivateEndpoint+0x2c8>)
 800519e:	4694      	mov	ip, r2
 80051a0:	4463      	add	r3, ip
 80051a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	88db      	ldrh	r3, [r3, #6]
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	18db      	adds	r3, r3, r3
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2250      	movs	r2, #80	@ 0x50
 80051bc:	5a9b      	ldrh	r3, [r3, r2]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	001a      	movs	r2, r3
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	189b      	adds	r3, r3, r2
 80051c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	00da      	lsls	r2, r3, #3
 80051ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d0:	18d3      	adds	r3, r2, r3
 80051d2:	4a22      	ldr	r2, [pc, #136]	@ (800525c <USB_ActivateEndpoint+0x2cc>)
 80051d4:	4694      	mov	ip, r2
 80051d6:	4463      	add	r3, ip
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	059b      	lsls	r3, r3, #22
 80051e2:	0d9b      	lsrs	r3, r3, #22
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80051f0:	d91a      	bls.n	8005228 <USB_ActivateEndpoint+0x298>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	221f      	movs	r2, #31
 8005200:	4013      	ands	r3, r2
 8005202:	d102      	bne.n	800520a <USB_ActivateEndpoint+0x27a>
 8005204:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005206:	3b01      	subs	r3, #1
 8005208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29a      	uxth	r2, r3
 8005210:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005212:	b29b      	uxth	r3, r3
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	b29b      	uxth	r3, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	b29b      	uxth	r3, r3
 800521c:	4a10      	ldr	r2, [pc, #64]	@ (8005260 <USB_ActivateEndpoint+0x2d0>)
 800521e:	4313      	orrs	r3, r2
 8005220:	b29a      	uxth	r2, r3
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	e034      	b.n	8005292 <USB_ActivateEndpoint+0x302>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d119      	bne.n	8005264 <USB_ActivateEndpoint+0x2d4>
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	4a0a      	ldr	r2, [pc, #40]	@ (8005260 <USB_ActivateEndpoint+0x2d0>)
 8005238:	4313      	orrs	r3, r2
 800523a:	b29a      	uxth	r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e027      	b.n	8005292 <USB_ActivateEndpoint+0x302>
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	ffff898f 	.word	0xffff898f
 8005248:	ffff8080 	.word	0xffff8080
 800524c:	ffff8f8f 	.word	0xffff8f8f
 8005250:	ffff80c0 	.word	0xffff80c0
 8005254:	ffff8fbf 	.word	0xffff8fbf
 8005258:	00000404 	.word	0x00000404
 800525c:	00000406 	.word	0x00000406
 8005260:	ffff8000 	.word	0xffff8000
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2201      	movs	r2, #1
 8005272:	4013      	ands	r3, r2
 8005274:	d002      	beq.n	800527c <USB_ActivateEndpoint+0x2ec>
 8005276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005278:	3301      	adds	r3, #1
 800527a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29a      	uxth	r2, r3
 8005282:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005284:	b29b      	uxth	r3, r3
 8005286:	029b      	lsls	r3, r3, #10
 8005288:	b29b      	uxth	r3, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	b29a      	uxth	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	18d2      	adds	r2, r2, r3
 800529c:	2122      	movs	r1, #34	@ 0x22
 800529e:	187b      	adds	r3, r7, r1
 80052a0:	8812      	ldrh	r2, [r2, #0]
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	881a      	ldrh	r2, [r3, #0]
 80052a8:	2380      	movs	r3, #128	@ 0x80
 80052aa:	01db      	lsls	r3, r3, #7
 80052ac:	4013      	ands	r3, r2
 80052ae:	d016      	beq.n	80052de <USB_ActivateEndpoint+0x34e>
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	18d3      	adds	r3, r2, r3
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29a      	uxth	r2, r3
 80052be:	2020      	movs	r0, #32
 80052c0:	183b      	adds	r3, r7, r0
 80052c2:	49dd      	ldr	r1, [pc, #884]	@ (8005638 <USB_ActivateEndpoint+0x6a8>)
 80052c4:	400a      	ands	r2, r1
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	18d3      	adds	r3, r2, r3
 80052d2:	183a      	adds	r2, r7, r0
 80052d4:	8812      	ldrh	r2, [r2, #0]
 80052d6:	49d9      	ldr	r1, [pc, #868]	@ (800563c <USB_ActivateEndpoint+0x6ac>)
 80052d8:	430a      	orrs	r2, r1
 80052da:	b292      	uxth	r2, r2
 80052dc:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d125      	bne.n	8005332 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	18d3      	adds	r3, r2, r3
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	201c      	movs	r0, #28
 80052f6:	183b      	adds	r3, r7, r0
 80052f8:	49d1      	ldr	r1, [pc, #836]	@ (8005640 <USB_ActivateEndpoint+0x6b0>)
 80052fa:	400a      	ands	r2, r1
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	183b      	adds	r3, r7, r0
 8005300:	183a      	adds	r2, r7, r0
 8005302:	8812      	ldrh	r2, [r2, #0]
 8005304:	2180      	movs	r1, #128	@ 0x80
 8005306:	0149      	lsls	r1, r1, #5
 8005308:	404a      	eors	r2, r1
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	183b      	adds	r3, r7, r0
 800530e:	183a      	adds	r2, r7, r0
 8005310:	8812      	ldrh	r2, [r2, #0]
 8005312:	2180      	movs	r1, #128	@ 0x80
 8005314:	0189      	lsls	r1, r1, #6
 8005316:	404a      	eors	r2, r1
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	18d3      	adds	r3, r2, r3
 8005324:	183a      	adds	r2, r7, r0
 8005326:	8812      	ldrh	r2, [r2, #0]
 8005328:	49c6      	ldr	r1, [pc, #792]	@ (8005644 <USB_ActivateEndpoint+0x6b4>)
 800532a:	430a      	orrs	r2, r1
 800532c:	b292      	uxth	r2, r2
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	e1c2      	b.n	80056b8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	18d3      	adds	r3, r2, r3
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29a      	uxth	r2, r3
 8005340:	201e      	movs	r0, #30
 8005342:	183b      	adds	r3, r7, r0
 8005344:	49be      	ldr	r1, [pc, #760]	@ (8005640 <USB_ActivateEndpoint+0x6b0>)
 8005346:	400a      	ands	r2, r1
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	183b      	adds	r3, r7, r0
 800534c:	183a      	adds	r2, r7, r0
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	2180      	movs	r1, #128	@ 0x80
 8005352:	0189      	lsls	r1, r1, #6
 8005354:	404a      	eors	r2, r1
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	18d3      	adds	r3, r2, r3
 8005362:	183a      	adds	r2, r7, r0
 8005364:	8812      	ldrh	r2, [r2, #0]
 8005366:	49b7      	ldr	r1, [pc, #732]	@ (8005644 <USB_ActivateEndpoint+0x6b4>)
 8005368:	430a      	orrs	r2, r1
 800536a:	b292      	uxth	r2, r2
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	e1a3      	b.n	80056b8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	78db      	ldrb	r3, [r3, #3]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d117      	bne.n	80053a8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29a      	uxth	r2, r3
 8005386:	2062      	movs	r0, #98	@ 0x62
 8005388:	183b      	adds	r3, r7, r0
 800538a:	49ab      	ldr	r1, [pc, #684]	@ (8005638 <USB_ActivateEndpoint+0x6a8>)
 800538c:	400a      	ands	r2, r1
 800538e:	801a      	strh	r2, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	183a      	adds	r2, r7, r0
 800539c:	8812      	ldrh	r2, [r2, #0]
 800539e:	49aa      	ldr	r1, [pc, #680]	@ (8005648 <USB_ActivateEndpoint+0x6b8>)
 80053a0:	430a      	orrs	r2, r1
 80053a2:	b292      	uxth	r2, r2
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	e016      	b.n	80053d6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	18d3      	adds	r3, r2, r3
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	2064      	movs	r0, #100	@ 0x64
 80053b8:	183b      	adds	r3, r7, r0
 80053ba:	49a4      	ldr	r1, [pc, #656]	@ (800564c <USB_ActivateEndpoint+0x6bc>)
 80053bc:	400a      	ands	r2, r1
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	18d3      	adds	r3, r2, r3
 80053ca:	183a      	adds	r2, r7, r0
 80053cc:	8812      	ldrh	r2, [r2, #0]
 80053ce:	499d      	ldr	r1, [pc, #628]	@ (8005644 <USB_ActivateEndpoint+0x6b4>)
 80053d0:	430a      	orrs	r2, r1
 80053d2:	b292      	uxth	r2, r2
 80053d4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2250      	movs	r2, #80	@ 0x50
 80053de:	5a9b      	ldrh	r3, [r3, r2]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	001a      	movs	r2, r3
 80053e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	00da      	lsls	r2, r3, #3
 80053f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f2:	18d3      	adds	r3, r2, r3
 80053f4:	2280      	movs	r2, #128	@ 0x80
 80053f6:	00d2      	lsls	r2, r2, #3
 80053f8:	4694      	mov	ip, r2
 80053fa:	4463      	add	r3, ip
 80053fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	891b      	ldrh	r3, [r3, #8]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	b29b      	uxth	r3, r3
 8005406:	18db      	adds	r3, r3, r3
 8005408:	b29a      	uxth	r2, r3
 800540a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800540c:	801a      	strh	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	657b      	str	r3, [r7, #84]	@ 0x54
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2250      	movs	r2, #80	@ 0x50
 8005416:	5a9b      	ldrh	r3, [r3, r2]
 8005418:	b29b      	uxth	r3, r3
 800541a:	001a      	movs	r2, r3
 800541c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800541e:	189b      	adds	r3, r3, r2
 8005420:	657b      	str	r3, [r7, #84]	@ 0x54
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	00da      	lsls	r2, r3, #3
 8005428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800542a:	18d3      	adds	r3, r2, r3
 800542c:	4a88      	ldr	r2, [pc, #544]	@ (8005650 <USB_ActivateEndpoint+0x6c0>)
 800542e:	4694      	mov	ip, r2
 8005430:	4463      	add	r3, ip
 8005432:	653b      	str	r3, [r7, #80]	@ 0x50
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	895b      	ldrh	r3, [r3, #10]
 8005438:	085b      	lsrs	r3, r3, #1
 800543a:	b29b      	uxth	r3, r3
 800543c:	18db      	adds	r3, r3, r3
 800543e:	b29a      	uxth	r2, r3
 8005440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005442:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d000      	beq.n	800544e <USB_ActivateEndpoint+0x4be>
 800544c:	e087      	b.n	800555e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	18d2      	adds	r2, r2, r3
 8005458:	2140      	movs	r1, #64	@ 0x40
 800545a:	187b      	adds	r3, r7, r1
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	187b      	adds	r3, r7, r1
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	2380      	movs	r3, #128	@ 0x80
 8005466:	01db      	lsls	r3, r3, #7
 8005468:	4013      	ands	r3, r2
 800546a:	d016      	beq.n	800549a <USB_ActivateEndpoint+0x50a>
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	18d3      	adds	r3, r2, r3
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29a      	uxth	r2, r3
 800547a:	203e      	movs	r0, #62	@ 0x3e
 800547c:	183b      	adds	r3, r7, r0
 800547e:	496e      	ldr	r1, [pc, #440]	@ (8005638 <USB_ActivateEndpoint+0x6a8>)
 8005480:	400a      	ands	r2, r1
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	18d3      	adds	r3, r2, r3
 800548e:	183a      	adds	r2, r7, r0
 8005490:	8812      	ldrh	r2, [r2, #0]
 8005492:	496a      	ldr	r1, [pc, #424]	@ (800563c <USB_ActivateEndpoint+0x6ac>)
 8005494:	430a      	orrs	r2, r1
 8005496:	b292      	uxth	r2, r2
 8005498:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	18d2      	adds	r2, r2, r3
 80054a4:	213c      	movs	r1, #60	@ 0x3c
 80054a6:	187b      	adds	r3, r7, r1
 80054a8:	8812      	ldrh	r2, [r2, #0]
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	2240      	movs	r2, #64	@ 0x40
 80054b2:	4013      	ands	r3, r2
 80054b4:	d016      	beq.n	80054e4 <USB_ActivateEndpoint+0x554>
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	203a      	movs	r0, #58	@ 0x3a
 80054c6:	183b      	adds	r3, r7, r0
 80054c8:	495b      	ldr	r1, [pc, #364]	@ (8005638 <USB_ActivateEndpoint+0x6a8>)
 80054ca:	400a      	ands	r2, r1
 80054cc:	801a      	strh	r2, [r3, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	18d3      	adds	r3, r2, r3
 80054d8:	183a      	adds	r2, r7, r0
 80054da:	8812      	ldrh	r2, [r2, #0]
 80054dc:	495d      	ldr	r1, [pc, #372]	@ (8005654 <USB_ActivateEndpoint+0x6c4>)
 80054de:	430a      	orrs	r2, r1
 80054e0:	b292      	uxth	r2, r2
 80054e2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	2038      	movs	r0, #56	@ 0x38
 80054f4:	183b      	adds	r3, r7, r0
 80054f6:	4952      	ldr	r1, [pc, #328]	@ (8005640 <USB_ActivateEndpoint+0x6b0>)
 80054f8:	400a      	ands	r2, r1
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	183b      	adds	r3, r7, r0
 80054fe:	183a      	adds	r2, r7, r0
 8005500:	8812      	ldrh	r2, [r2, #0]
 8005502:	2180      	movs	r1, #128	@ 0x80
 8005504:	0149      	lsls	r1, r1, #5
 8005506:	404a      	eors	r2, r1
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	183b      	adds	r3, r7, r0
 800550c:	183a      	adds	r2, r7, r0
 800550e:	8812      	ldrh	r2, [r2, #0]
 8005510:	2180      	movs	r1, #128	@ 0x80
 8005512:	0189      	lsls	r1, r1, #6
 8005514:	404a      	eors	r2, r1
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	18d3      	adds	r3, r2, r3
 8005522:	183a      	adds	r2, r7, r0
 8005524:	8812      	ldrh	r2, [r2, #0]
 8005526:	4947      	ldr	r1, [pc, #284]	@ (8005644 <USB_ActivateEndpoint+0x6b4>)
 8005528:	430a      	orrs	r2, r1
 800552a:	b292      	uxth	r2, r2
 800552c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	18d3      	adds	r3, r2, r3
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29a      	uxth	r2, r3
 800553c:	2036      	movs	r0, #54	@ 0x36
 800553e:	183b      	adds	r3, r7, r0
 8005540:	4945      	ldr	r1, [pc, #276]	@ (8005658 <USB_ActivateEndpoint+0x6c8>)
 8005542:	400a      	ands	r2, r1
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	18d3      	adds	r3, r2, r3
 8005550:	183a      	adds	r2, r7, r0
 8005552:	8812      	ldrh	r2, [r2, #0]
 8005554:	493b      	ldr	r1, [pc, #236]	@ (8005644 <USB_ActivateEndpoint+0x6b4>)
 8005556:	430a      	orrs	r2, r1
 8005558:	b292      	uxth	r2, r2
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	e0ac      	b.n	80056b8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	18d2      	adds	r2, r2, r3
 8005568:	214e      	movs	r1, #78	@ 0x4e
 800556a:	187b      	adds	r3, r7, r1
 800556c:	8812      	ldrh	r2, [r2, #0]
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	187b      	adds	r3, r7, r1
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	2380      	movs	r3, #128	@ 0x80
 8005576:	01db      	lsls	r3, r3, #7
 8005578:	4013      	ands	r3, r2
 800557a:	d016      	beq.n	80055aa <USB_ActivateEndpoint+0x61a>
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	18d3      	adds	r3, r2, r3
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29a      	uxth	r2, r3
 800558a:	204c      	movs	r0, #76	@ 0x4c
 800558c:	183b      	adds	r3, r7, r0
 800558e:	492a      	ldr	r1, [pc, #168]	@ (8005638 <USB_ActivateEndpoint+0x6a8>)
 8005590:	400a      	ands	r2, r1
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	18d3      	adds	r3, r2, r3
 800559e:	183a      	adds	r2, r7, r0
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	4926      	ldr	r1, [pc, #152]	@ (800563c <USB_ActivateEndpoint+0x6ac>)
 80055a4:	430a      	orrs	r2, r1
 80055a6:	b292      	uxth	r2, r2
 80055a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	18d2      	adds	r2, r2, r3
 80055b4:	214a      	movs	r1, #74	@ 0x4a
 80055b6:	187b      	adds	r3, r7, r1
 80055b8:	8812      	ldrh	r2, [r2, #0]
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	2240      	movs	r2, #64	@ 0x40
 80055c2:	4013      	ands	r3, r2
 80055c4:	d016      	beq.n	80055f4 <USB_ActivateEndpoint+0x664>
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	18d3      	adds	r3, r2, r3
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	2048      	movs	r0, #72	@ 0x48
 80055d6:	183b      	adds	r3, r7, r0
 80055d8:	4917      	ldr	r1, [pc, #92]	@ (8005638 <USB_ActivateEndpoint+0x6a8>)
 80055da:	400a      	ands	r2, r1
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	18d3      	adds	r3, r2, r3
 80055e8:	183a      	adds	r2, r7, r0
 80055ea:	8812      	ldrh	r2, [r2, #0]
 80055ec:	4919      	ldr	r1, [pc, #100]	@ (8005654 <USB_ActivateEndpoint+0x6c4>)
 80055ee:	430a      	orrs	r2, r1
 80055f0:	b292      	uxth	r2, r2
 80055f2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	78db      	ldrb	r3, [r3, #3]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d02f      	beq.n	800565c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	18d3      	adds	r3, r2, r3
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29a      	uxth	r2, r3
 800560a:	2044      	movs	r0, #68	@ 0x44
 800560c:	183b      	adds	r3, r7, r0
 800560e:	4912      	ldr	r1, [pc, #72]	@ (8005658 <USB_ActivateEndpoint+0x6c8>)
 8005610:	400a      	ands	r2, r1
 8005612:	801a      	strh	r2, [r3, #0]
 8005614:	183b      	adds	r3, r7, r0
 8005616:	183a      	adds	r2, r7, r0
 8005618:	8812      	ldrh	r2, [r2, #0]
 800561a:	2120      	movs	r1, #32
 800561c:	404a      	eors	r2, r1
 800561e:	801a      	strh	r2, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	18d3      	adds	r3, r2, r3
 800562a:	183a      	adds	r2, r7, r0
 800562c:	8812      	ldrh	r2, [r2, #0]
 800562e:	4905      	ldr	r1, [pc, #20]	@ (8005644 <USB_ActivateEndpoint+0x6b4>)
 8005630:	430a      	orrs	r2, r1
 8005632:	b292      	uxth	r2, r2
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e028      	b.n	800568a <USB_ActivateEndpoint+0x6fa>
 8005638:	ffff8f8f 	.word	0xffff8f8f
 800563c:	ffffc080 	.word	0xffffc080
 8005640:	ffffbf8f 	.word	0xffffbf8f
 8005644:	ffff8080 	.word	0xffff8080
 8005648:	ffff8180 	.word	0xffff8180
 800564c:	ffff8e8f 	.word	0xffff8e8f
 8005650:	00000404 	.word	0x00000404
 8005654:	ffff80c0 	.word	0xffff80c0
 8005658:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	18d3      	adds	r3, r2, r3
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29a      	uxth	r2, r3
 800566a:	2046      	movs	r0, #70	@ 0x46
 800566c:	183b      	adds	r3, r7, r0
 800566e:	4916      	ldr	r1, [pc, #88]	@ (80056c8 <USB_ActivateEndpoint+0x738>)
 8005670:	400a      	ands	r2, r1
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	18d3      	adds	r3, r2, r3
 800567e:	183a      	adds	r2, r7, r0
 8005680:	8812      	ldrh	r2, [r2, #0]
 8005682:	4912      	ldr	r1, [pc, #72]	@ (80056cc <USB_ActivateEndpoint+0x73c>)
 8005684:	430a      	orrs	r2, r1
 8005686:	b292      	uxth	r2, r2
 8005688:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	18d3      	adds	r3, r2, r3
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29a      	uxth	r2, r3
 8005698:	2042      	movs	r0, #66	@ 0x42
 800569a:	183b      	adds	r3, r7, r0
 800569c:	490c      	ldr	r1, [pc, #48]	@ (80056d0 <USB_ActivateEndpoint+0x740>)
 800569e:	400a      	ands	r2, r1
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	18d3      	adds	r3, r2, r3
 80056ac:	183a      	adds	r2, r7, r0
 80056ae:	8812      	ldrh	r2, [r2, #0]
 80056b0:	4906      	ldr	r1, [pc, #24]	@ (80056cc <USB_ActivateEndpoint+0x73c>)
 80056b2:	430a      	orrs	r2, r1
 80056b4:	b292      	uxth	r2, r2
 80056b6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80056b8:	236f      	movs	r3, #111	@ 0x6f
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	781b      	ldrb	r3, [r3, #0]
}
 80056be:	0018      	movs	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b01c      	add	sp, #112	@ 0x70
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	ffff8fbf 	.word	0xffff8fbf
 80056cc:	ffff8080 	.word	0xffff8080
 80056d0:	ffffbf8f 	.word	0xffffbf8f

080056d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08c      	sub	sp, #48	@ 0x30
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	7b1b      	ldrb	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d000      	beq.n	80056e8 <USB_DeactivateEndpoint+0x14>
 80056e6:	e07e      	b.n	80057e6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d03c      	beq.n	800576a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	18d2      	adds	r2, r2, r3
 80056fa:	210c      	movs	r1, #12
 80056fc:	187b      	adds	r3, r7, r1
 80056fe:	8812      	ldrh	r2, [r2, #0]
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	187b      	adds	r3, r7, r1
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	2240      	movs	r2, #64	@ 0x40
 8005708:	4013      	ands	r3, r2
 800570a:	d016      	beq.n	800573a <USB_DeactivateEndpoint+0x66>
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	18d3      	adds	r3, r2, r3
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29a      	uxth	r2, r3
 800571a:	200a      	movs	r0, #10
 800571c:	183b      	adds	r3, r7, r0
 800571e:	49c7      	ldr	r1, [pc, #796]	@ (8005a3c <USB_DeactivateEndpoint+0x368>)
 8005720:	400a      	ands	r2, r1
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	18d3      	adds	r3, r2, r3
 800572e:	183a      	adds	r2, r7, r0
 8005730:	8812      	ldrh	r2, [r2, #0]
 8005732:	49c3      	ldr	r1, [pc, #780]	@ (8005a40 <USB_DeactivateEndpoint+0x36c>)
 8005734:	430a      	orrs	r2, r1
 8005736:	b292      	uxth	r2, r2
 8005738:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	18d3      	adds	r3, r2, r3
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29a      	uxth	r2, r3
 8005748:	2008      	movs	r0, #8
 800574a:	183b      	adds	r3, r7, r0
 800574c:	49bd      	ldr	r1, [pc, #756]	@ (8005a44 <USB_DeactivateEndpoint+0x370>)
 800574e:	400a      	ands	r2, r1
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	18d3      	adds	r3, r2, r3
 800575c:	183a      	adds	r2, r7, r0
 800575e:	8812      	ldrh	r2, [r2, #0]
 8005760:	49b9      	ldr	r1, [pc, #740]	@ (8005a48 <USB_DeactivateEndpoint+0x374>)
 8005762:	430a      	orrs	r2, r1
 8005764:	b292      	uxth	r2, r2
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e163      	b.n	8005a32 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	18d2      	adds	r2, r2, r3
 8005774:	2112      	movs	r1, #18
 8005776:	187b      	adds	r3, r7, r1
 8005778:	8812      	ldrh	r2, [r2, #0]
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	187b      	adds	r3, r7, r1
 800577e:	881a      	ldrh	r2, [r3, #0]
 8005780:	2380      	movs	r3, #128	@ 0x80
 8005782:	01db      	lsls	r3, r3, #7
 8005784:	4013      	ands	r3, r2
 8005786:	d016      	beq.n	80057b6 <USB_DeactivateEndpoint+0xe2>
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	18d3      	adds	r3, r2, r3
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29a      	uxth	r2, r3
 8005796:	2010      	movs	r0, #16
 8005798:	183b      	adds	r3, r7, r0
 800579a:	49a8      	ldr	r1, [pc, #672]	@ (8005a3c <USB_DeactivateEndpoint+0x368>)
 800579c:	400a      	ands	r2, r1
 800579e:	801a      	strh	r2, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	18d3      	adds	r3, r2, r3
 80057aa:	183a      	adds	r2, r7, r0
 80057ac:	8812      	ldrh	r2, [r2, #0]
 80057ae:	49a7      	ldr	r1, [pc, #668]	@ (8005a4c <USB_DeactivateEndpoint+0x378>)
 80057b0:	430a      	orrs	r2, r1
 80057b2:	b292      	uxth	r2, r2
 80057b4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	18d3      	adds	r3, r2, r3
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	200e      	movs	r0, #14
 80057c6:	183b      	adds	r3, r7, r0
 80057c8:	49a1      	ldr	r1, [pc, #644]	@ (8005a50 <USB_DeactivateEndpoint+0x37c>)
 80057ca:	400a      	ands	r2, r1
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	18d3      	adds	r3, r2, r3
 80057d8:	183a      	adds	r2, r7, r0
 80057da:	8812      	ldrh	r2, [r2, #0]
 80057dc:	499a      	ldr	r1, [pc, #616]	@ (8005a48 <USB_DeactivateEndpoint+0x374>)
 80057de:	430a      	orrs	r2, r1
 80057e0:	b292      	uxth	r2, r2
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	e125      	b.n	8005a32 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d000      	beq.n	80057f0 <USB_DeactivateEndpoint+0x11c>
 80057ee:	e090      	b.n	8005912 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	18d2      	adds	r2, r2, r3
 80057fa:	2120      	movs	r1, #32
 80057fc:	187b      	adds	r3, r7, r1
 80057fe:	8812      	ldrh	r2, [r2, #0]
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	187b      	adds	r3, r7, r1
 8005804:	881a      	ldrh	r2, [r3, #0]
 8005806:	2380      	movs	r3, #128	@ 0x80
 8005808:	01db      	lsls	r3, r3, #7
 800580a:	4013      	ands	r3, r2
 800580c:	d016      	beq.n	800583c <USB_DeactivateEndpoint+0x168>
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	18d3      	adds	r3, r2, r3
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29a      	uxth	r2, r3
 800581c:	201e      	movs	r0, #30
 800581e:	183b      	adds	r3, r7, r0
 8005820:	4986      	ldr	r1, [pc, #536]	@ (8005a3c <USB_DeactivateEndpoint+0x368>)
 8005822:	400a      	ands	r2, r1
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	18d3      	adds	r3, r2, r3
 8005830:	183a      	adds	r2, r7, r0
 8005832:	8812      	ldrh	r2, [r2, #0]
 8005834:	4985      	ldr	r1, [pc, #532]	@ (8005a4c <USB_DeactivateEndpoint+0x378>)
 8005836:	430a      	orrs	r2, r1
 8005838:	b292      	uxth	r2, r2
 800583a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	18d2      	adds	r2, r2, r3
 8005846:	211c      	movs	r1, #28
 8005848:	187b      	adds	r3, r7, r1
 800584a:	8812      	ldrh	r2, [r2, #0]
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	187b      	adds	r3, r7, r1
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	2240      	movs	r2, #64	@ 0x40
 8005854:	4013      	ands	r3, r2
 8005856:	d016      	beq.n	8005886 <USB_DeactivateEndpoint+0x1b2>
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	18d3      	adds	r3, r2, r3
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29a      	uxth	r2, r3
 8005866:	201a      	movs	r0, #26
 8005868:	183b      	adds	r3, r7, r0
 800586a:	4974      	ldr	r1, [pc, #464]	@ (8005a3c <USB_DeactivateEndpoint+0x368>)
 800586c:	400a      	ands	r2, r1
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	18d3      	adds	r3, r2, r3
 800587a:	183a      	adds	r2, r7, r0
 800587c:	8812      	ldrh	r2, [r2, #0]
 800587e:	4970      	ldr	r1, [pc, #448]	@ (8005a40 <USB_DeactivateEndpoint+0x36c>)
 8005880:	430a      	orrs	r2, r1
 8005882:	b292      	uxth	r2, r2
 8005884:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	18d3      	adds	r3, r2, r3
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29a      	uxth	r2, r3
 8005894:	2018      	movs	r0, #24
 8005896:	183b      	adds	r3, r7, r0
 8005898:	4968      	ldr	r1, [pc, #416]	@ (8005a3c <USB_DeactivateEndpoint+0x368>)
 800589a:	400a      	ands	r2, r1
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	18d3      	adds	r3, r2, r3
 80058a8:	183a      	adds	r2, r7, r0
 80058aa:	8812      	ldrh	r2, [r2, #0]
 80058ac:	4964      	ldr	r1, [pc, #400]	@ (8005a40 <USB_DeactivateEndpoint+0x36c>)
 80058ae:	430a      	orrs	r2, r1
 80058b0:	b292      	uxth	r2, r2
 80058b2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	18d3      	adds	r3, r2, r3
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	2016      	movs	r0, #22
 80058c4:	183b      	adds	r3, r7, r0
 80058c6:	4962      	ldr	r1, [pc, #392]	@ (8005a50 <USB_DeactivateEndpoint+0x37c>)
 80058c8:	400a      	ands	r2, r1
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	183a      	adds	r2, r7, r0
 80058d8:	8812      	ldrh	r2, [r2, #0]
 80058da:	495b      	ldr	r1, [pc, #364]	@ (8005a48 <USB_DeactivateEndpoint+0x374>)
 80058dc:	430a      	orrs	r2, r1
 80058de:	b292      	uxth	r2, r2
 80058e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	18d3      	adds	r3, r2, r3
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	2014      	movs	r0, #20
 80058f2:	183b      	adds	r3, r7, r0
 80058f4:	4953      	ldr	r1, [pc, #332]	@ (8005a44 <USB_DeactivateEndpoint+0x370>)
 80058f6:	400a      	ands	r2, r1
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	18d3      	adds	r3, r2, r3
 8005904:	183a      	adds	r2, r7, r0
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	494f      	ldr	r1, [pc, #316]	@ (8005a48 <USB_DeactivateEndpoint+0x374>)
 800590a:	430a      	orrs	r2, r1
 800590c:	b292      	uxth	r2, r2
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e08f      	b.n	8005a32 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	18d2      	adds	r2, r2, r3
 800591c:	212e      	movs	r1, #46	@ 0x2e
 800591e:	187b      	adds	r3, r7, r1
 8005920:	8812      	ldrh	r2, [r2, #0]
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	187b      	adds	r3, r7, r1
 8005926:	881a      	ldrh	r2, [r3, #0]
 8005928:	2380      	movs	r3, #128	@ 0x80
 800592a:	01db      	lsls	r3, r3, #7
 800592c:	4013      	ands	r3, r2
 800592e:	d016      	beq.n	800595e <USB_DeactivateEndpoint+0x28a>
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	18d3      	adds	r3, r2, r3
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29a      	uxth	r2, r3
 800593e:	202c      	movs	r0, #44	@ 0x2c
 8005940:	183b      	adds	r3, r7, r0
 8005942:	493e      	ldr	r1, [pc, #248]	@ (8005a3c <USB_DeactivateEndpoint+0x368>)
 8005944:	400a      	ands	r2, r1
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	18d3      	adds	r3, r2, r3
 8005952:	183a      	adds	r2, r7, r0
 8005954:	8812      	ldrh	r2, [r2, #0]
 8005956:	493d      	ldr	r1, [pc, #244]	@ (8005a4c <USB_DeactivateEndpoint+0x378>)
 8005958:	430a      	orrs	r2, r1
 800595a:	b292      	uxth	r2, r2
 800595c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	18d2      	adds	r2, r2, r3
 8005968:	212a      	movs	r1, #42	@ 0x2a
 800596a:	187b      	adds	r3, r7, r1
 800596c:	8812      	ldrh	r2, [r2, #0]
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	187b      	adds	r3, r7, r1
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	2240      	movs	r2, #64	@ 0x40
 8005976:	4013      	ands	r3, r2
 8005978:	d016      	beq.n	80059a8 <USB_DeactivateEndpoint+0x2d4>
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	18d3      	adds	r3, r2, r3
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29a      	uxth	r2, r3
 8005988:	2028      	movs	r0, #40	@ 0x28
 800598a:	183b      	adds	r3, r7, r0
 800598c:	492b      	ldr	r1, [pc, #172]	@ (8005a3c <USB_DeactivateEndpoint+0x368>)
 800598e:	400a      	ands	r2, r1
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	18d3      	adds	r3, r2, r3
 800599c:	183a      	adds	r2, r7, r0
 800599e:	8812      	ldrh	r2, [r2, #0]
 80059a0:	4927      	ldr	r1, [pc, #156]	@ (8005a40 <USB_DeactivateEndpoint+0x36c>)
 80059a2:	430a      	orrs	r2, r1
 80059a4:	b292      	uxth	r2, r2
 80059a6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	18d3      	adds	r3, r2, r3
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	2026      	movs	r0, #38	@ 0x26
 80059b8:	183b      	adds	r3, r7, r0
 80059ba:	4920      	ldr	r1, [pc, #128]	@ (8005a3c <USB_DeactivateEndpoint+0x368>)
 80059bc:	400a      	ands	r2, r1
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	18d3      	adds	r3, r2, r3
 80059ca:	183a      	adds	r2, r7, r0
 80059cc:	8812      	ldrh	r2, [r2, #0]
 80059ce:	491f      	ldr	r1, [pc, #124]	@ (8005a4c <USB_DeactivateEndpoint+0x378>)
 80059d0:	430a      	orrs	r2, r1
 80059d2:	b292      	uxth	r2, r2
 80059d4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	18d3      	adds	r3, r2, r3
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	2024      	movs	r0, #36	@ 0x24
 80059e6:	183b      	adds	r3, r7, r0
 80059e8:	4916      	ldr	r1, [pc, #88]	@ (8005a44 <USB_DeactivateEndpoint+0x370>)
 80059ea:	400a      	ands	r2, r1
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	18d3      	adds	r3, r2, r3
 80059f8:	183a      	adds	r2, r7, r0
 80059fa:	8812      	ldrh	r2, [r2, #0]
 80059fc:	4912      	ldr	r1, [pc, #72]	@ (8005a48 <USB_DeactivateEndpoint+0x374>)
 80059fe:	430a      	orrs	r2, r1
 8005a00:	b292      	uxth	r2, r2
 8005a02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	18d3      	adds	r3, r2, r3
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	2022      	movs	r0, #34	@ 0x22
 8005a14:	183b      	adds	r3, r7, r0
 8005a16:	490e      	ldr	r1, [pc, #56]	@ (8005a50 <USB_DeactivateEndpoint+0x37c>)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	18d3      	adds	r3, r2, r3
 8005a26:	183a      	adds	r2, r7, r0
 8005a28:	8812      	ldrh	r2, [r2, #0]
 8005a2a:	4907      	ldr	r1, [pc, #28]	@ (8005a48 <USB_DeactivateEndpoint+0x374>)
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b00c      	add	sp, #48	@ 0x30
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	ffff8f8f 	.word	0xffff8f8f
 8005a40:	ffff80c0 	.word	0xffff80c0
 8005a44:	ffff8fbf 	.word	0xffff8fbf
 8005a48:	ffff8080 	.word	0xffff8080
 8005a4c:	ffffc080 	.word	0xffffc080
 8005a50:	ffffbf8f 	.word	0xffffbf8f

08005a54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a54:	b590      	push	{r4, r7, lr}
 8005a56:	b0c3      	sub	sp, #268	@ 0x10c
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d001      	beq.n	8005a6a <USB_EPStartXfer+0x16>
 8005a66:	f000 fd2d 	bl	80064c4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d905      	bls.n	8005a82 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	1d7a      	adds	r2, r7, #5
 8005a7c:	32ff      	adds	r2, #255	@ 0xff
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	e004      	b.n	8005a8c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	1d7a      	adds	r2, r7, #5
 8005a88:	32ff      	adds	r2, #255	@ 0xff
 8005a8a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	7b1b      	ldrb	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d125      	bne.n	8005ae0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6959      	ldr	r1, [r3, #20]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	88da      	ldrh	r2, [r3, #6]
 8005a9c:	1d7b      	adds	r3, r7, #5
 8005a9e:	33ff      	adds	r3, #255	@ 0xff
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 fa47 	bl	8006f38 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2250      	movs	r2, #80	@ 0x50
 8005ab2:	5a9b      	ldrh	r3, [r3, r2]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	001a      	movs	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	00da      	lsls	r2, r3, #3
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	18d3      	adds	r3, r2, r3
 8005ac8:	4ad7      	ldr	r2, [pc, #860]	@ (8005e28 <USB_EPStartXfer+0x3d4>)
 8005aca:	4694      	mov	ip, r2
 8005acc:	4463      	add	r3, ip
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	1d7b      	adds	r3, r7, #5
 8005ad2:	33ff      	adds	r3, #255	@ 0xff
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	f000 fccd 	bl	800647a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	78db      	ldrb	r3, [r3, #3]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d000      	beq.n	8005aea <USB_EPStartXfer+0x96>
 8005ae8:	e362      	b.n	80061b0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6a1a      	ldr	r2, [r3, #32]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d800      	bhi.n	8005af8 <USB_EPStartXfer+0xa4>
 8005af6:	e309      	b.n	800610c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	18d3      	adds	r3, r2, r3
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	2056      	movs	r0, #86	@ 0x56
 8005b08:	183b      	adds	r3, r7, r0
 8005b0a:	49c8      	ldr	r1, [pc, #800]	@ (8005e2c <USB_EPStartXfer+0x3d8>)
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	18d3      	adds	r3, r2, r3
 8005b1a:	183a      	adds	r2, r7, r0
 8005b1c:	8812      	ldrh	r2, [r2, #0]
 8005b1e:	49c4      	ldr	r1, [pc, #784]	@ (8005e30 <USB_EPStartXfer+0x3dc>)
 8005b20:	430a      	orrs	r2, r1
 8005b22:	b292      	uxth	r2, r2
 8005b24:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6a1a      	ldr	r2, [r3, #32]
 8005b2a:	1d7b      	adds	r3, r7, #5
 8005b2c:	33ff      	adds	r3, #255	@ 0xff
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1ad2      	subs	r2, r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	18d3      	adds	r3, r2, r3
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	001a      	movs	r2, r3
 8005b46:	2340      	movs	r3, #64	@ 0x40
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <USB_EPStartXfer+0xfa>
 8005b4c:	e176      	b.n	8005e3c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d000      	beq.n	8005b5c <USB_EPStartXfer+0x108>
 8005b5a:	e074      	b.n	8005c46 <USB_EPStartXfer+0x1f2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2250      	movs	r2, #80	@ 0x50
 8005b64:	5a9b      	ldrh	r3, [r3, r2]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	001a      	movs	r2, r3
 8005b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6c:	189b      	adds	r3, r3, r2
 8005b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	00da      	lsls	r2, r3, #3
 8005b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b78:	18d3      	adds	r3, r2, r3
 8005b7a:	4aae      	ldr	r2, [pc, #696]	@ (8005e34 <USB_EPStartXfer+0x3e0>)
 8005b7c:	4694      	mov	ip, r2
 8005b7e:	4463      	add	r3, ip
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	059b      	lsls	r3, r3, #22
 8005b8a:	0d9b      	lsrs	r3, r3, #22
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	801a      	strh	r2, [r3, #0]
 8005b92:	1d7b      	adds	r3, r7, #5
 8005b94:	33ff      	adds	r3, #255	@ 0xff
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b9a:	d924      	bls.n	8005be6 <USB_EPStartXfer+0x192>
 8005b9c:	1d7b      	adds	r3, r7, #5
 8005b9e:	33ff      	adds	r3, #255	@ 0xff
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	1c7a      	adds	r2, r7, #1
 8005ba6:	32ff      	adds	r2, #255	@ 0xff
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	1d7b      	adds	r3, r7, #5
 8005bac:	33ff      	adds	r3, #255	@ 0xff
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	221f      	movs	r2, #31
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d106      	bne.n	8005bc4 <USB_EPStartXfer+0x170>
 8005bb6:	1c7b      	adds	r3, r7, #1
 8005bb8:	33ff      	adds	r3, #255	@ 0xff
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	1c7a      	adds	r2, r7, #1
 8005bc0:	32ff      	adds	r2, #255	@ 0xff
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	1c7b      	adds	r3, r7, #1
 8005bcc:	33ff      	adds	r3, #255	@ 0xff
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	029b      	lsls	r3, r3, #10
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	4a97      	ldr	r2, [pc, #604]	@ (8005e38 <USB_EPStartXfer+0x3e4>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e04a      	b.n	8005c7c <USB_EPStartXfer+0x228>
 8005be6:	1d7b      	adds	r3, r7, #5
 8005be8:	33ff      	adds	r3, #255	@ 0xff
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d108      	bne.n	8005c02 <USB_EPStartXfer+0x1ae>
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	4a90      	ldr	r2, [pc, #576]	@ (8005e38 <USB_EPStartXfer+0x3e4>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e03c      	b.n	8005c7c <USB_EPStartXfer+0x228>
 8005c02:	1d7b      	adds	r3, r7, #5
 8005c04:	33ff      	adds	r3, #255	@ 0xff
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	1c7a      	adds	r2, r7, #1
 8005c0c:	32ff      	adds	r2, #255	@ 0xff
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	1d7b      	adds	r3, r7, #5
 8005c12:	33ff      	adds	r3, #255	@ 0xff
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2201      	movs	r2, #1
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d006      	beq.n	8005c2a <USB_EPStartXfer+0x1d6>
 8005c1c:	1c7b      	adds	r3, r7, #1
 8005c1e:	33ff      	adds	r3, #255	@ 0xff
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	1c7a      	adds	r2, r7, #1
 8005c26:	32ff      	adds	r2, #255	@ 0xff
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	1c7b      	adds	r3, r7, #1
 8005c32:	33ff      	adds	r3, #255	@ 0xff
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	e01a      	b.n	8005c7c <USB_EPStartXfer+0x228>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d116      	bne.n	8005c7c <USB_EPStartXfer+0x228>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2250      	movs	r2, #80	@ 0x50
 8005c52:	5a9b      	ldrh	r3, [r3, r2]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	001a      	movs	r2, r3
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	189b      	adds	r3, r3, r2
 8005c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	00da      	lsls	r2, r3, #3
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	18d3      	adds	r3, r2, r3
 8005c68:	4a72      	ldr	r2, [pc, #456]	@ (8005e34 <USB_EPStartXfer+0x3e0>)
 8005c6a:	4694      	mov	ip, r2
 8005c6c:	4463      	add	r3, ip
 8005c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c70:	1d7b      	adds	r3, r7, #5
 8005c72:	33ff      	adds	r3, #255	@ 0xff
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c7c:	2076      	movs	r0, #118	@ 0x76
 8005c7e:	183b      	adds	r3, r7, r0
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	8952      	ldrh	r2, [r2, #10]
 8005c84:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6959      	ldr	r1, [r3, #20]
 8005c8a:	1d7b      	adds	r3, r7, #5
 8005c8c:	33ff      	adds	r3, #255	@ 0xff
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	b29c      	uxth	r4, r3
 8005c92:	183b      	adds	r3, r7, r0
 8005c94:	881a      	ldrh	r2, [r3, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	0023      	movs	r3, r4
 8005c9a:	f001 f94d 	bl	8006f38 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	1d7b      	adds	r3, r7, #5
 8005ca4:	33ff      	adds	r3, #255	@ 0xff
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	18d2      	adds	r2, r2, r3
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6a1a      	ldr	r2, [r3, #32]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d908      	bls.n	8005ccc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	1d7b      	adds	r3, r7, #5
 8005cc0:	33ff      	adds	r3, #255	@ 0xff
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	1ad2      	subs	r2, r2, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	621a      	str	r2, [r3, #32]
 8005cca:	e007      	b.n	8005cdc <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	1d7a      	adds	r2, r7, #5
 8005cd2:	32ff      	adds	r2, #255	@ 0xff
 8005cd4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d000      	beq.n	8005ce6 <USB_EPStartXfer+0x292>
 8005ce4:	e070      	b.n	8005dc8 <USB_EPStartXfer+0x374>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2250      	movs	r2, #80	@ 0x50
 8005cee:	5a9b      	ldrh	r3, [r3, r2]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	001a      	movs	r2, r3
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	189b      	adds	r3, r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	00da      	lsls	r2, r3, #3
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	18d3      	adds	r3, r2, r3
 8005d04:	4a48      	ldr	r2, [pc, #288]	@ (8005e28 <USB_EPStartXfer+0x3d4>)
 8005d06:	4694      	mov	ip, r2
 8005d08:	4463      	add	r3, ip
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	059b      	lsls	r3, r3, #22
 8005d14:	0d9b      	lsrs	r3, r3, #22
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	1d7b      	adds	r3, r7, #5
 8005d1e:	33ff      	adds	r3, #255	@ 0xff
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d24:	d922      	bls.n	8005d6c <USB_EPStartXfer+0x318>
 8005d26:	1d7b      	adds	r3, r7, #5
 8005d28:	33ff      	adds	r3, #255	@ 0xff
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	21fc      	movs	r1, #252	@ 0xfc
 8005d30:	187a      	adds	r2, r7, r1
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	1d7b      	adds	r3, r7, #5
 8005d36:	33ff      	adds	r3, #255	@ 0xff
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	221f      	movs	r2, #31
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d104      	bne.n	8005d4a <USB_EPStartXfer+0x2f6>
 8005d40:	187b      	adds	r3, r7, r1
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	187a      	adds	r2, r7, r1
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	23fc      	movs	r3, #252	@ 0xfc
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	4a35      	ldr	r2, [pc, #212]	@ (8005e38 <USB_EPStartXfer+0x3e4>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	e04a      	b.n	8005e02 <USB_EPStartXfer+0x3ae>
 8005d6c:	1d7b      	adds	r3, r7, #5
 8005d6e:	33ff      	adds	r3, #255	@ 0xff
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d108      	bne.n	8005d88 <USB_EPStartXfer+0x334>
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e38 <USB_EPStartXfer+0x3e4>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	e03c      	b.n	8005e02 <USB_EPStartXfer+0x3ae>
 8005d88:	1d7b      	adds	r3, r7, #5
 8005d8a:	33ff      	adds	r3, #255	@ 0xff
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	21fc      	movs	r1, #252	@ 0xfc
 8005d92:	187a      	adds	r2, r7, r1
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	1d7b      	adds	r3, r7, #5
 8005d98:	33ff      	adds	r3, #255	@ 0xff
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d004      	beq.n	8005dac <USB_EPStartXfer+0x358>
 8005da2:	187b      	adds	r3, r7, r1
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	187a      	adds	r2, r7, r1
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	23fc      	movs	r3, #252	@ 0xfc
 8005db4:	18fb      	adds	r3, r7, r3
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	029b      	lsls	r3, r3, #10
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	e01c      	b.n	8005e02 <USB_EPStartXfer+0x3ae>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d118      	bne.n	8005e02 <USB_EPStartXfer+0x3ae>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	623b      	str	r3, [r7, #32]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2250      	movs	r2, #80	@ 0x50
 8005dd8:	5a9b      	ldrh	r3, [r3, r2]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	001a      	movs	r2, r3
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	189b      	adds	r3, r3, r2
 8005de2:	623b      	str	r3, [r7, #32]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	00da      	lsls	r2, r3, #3
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	18d3      	adds	r3, r2, r3
 8005dee:	4a0e      	ldr	r2, [pc, #56]	@ (8005e28 <USB_EPStartXfer+0x3d4>)
 8005df0:	4694      	mov	ip, r2
 8005df2:	4463      	add	r3, ip
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	1d7b      	adds	r3, r7, #5
 8005df8:	33ff      	adds	r3, #255	@ 0xff
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e02:	2076      	movs	r0, #118	@ 0x76
 8005e04:	183b      	adds	r3, r7, r0
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	8912      	ldrh	r2, [r2, #8]
 8005e0a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6959      	ldr	r1, [r3, #20]
 8005e10:	1d7b      	adds	r3, r7, #5
 8005e12:	33ff      	adds	r3, #255	@ 0xff
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	b29c      	uxth	r4, r3
 8005e18:	183b      	adds	r3, r7, r0
 8005e1a:	881a      	ldrh	r2, [r3, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	0023      	movs	r3, r4
 8005e20:	f001 f88a 	bl	8006f38 <USB_WritePMA>
 8005e24:	e329      	b.n	800647a <USB_EPStartXfer+0xa26>
 8005e26:	46c0      	nop			@ (mov r8, r8)
 8005e28:	00000402 	.word	0x00000402
 8005e2c:	ffff8f8f 	.word	0xffff8f8f
 8005e30:	ffff8180 	.word	0xffff8180
 8005e34:	00000406 	.word	0x00000406
 8005e38:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d000      	beq.n	8005e46 <USB_EPStartXfer+0x3f2>
 8005e44:	e070      	b.n	8005f28 <USB_EPStartXfer+0x4d4>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2250      	movs	r2, #80	@ 0x50
 8005e4e:	5a9b      	ldrh	r3, [r3, r2]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	001a      	movs	r2, r3
 8005e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e56:	189b      	adds	r3, r3, r2
 8005e58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	00da      	lsls	r2, r3, #3
 8005e60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e62:	18d3      	adds	r3, r2, r3
 8005e64:	4acd      	ldr	r2, [pc, #820]	@ (800619c <USB_EPStartXfer+0x748>)
 8005e66:	4694      	mov	ip, r2
 8005e68:	4463      	add	r3, ip
 8005e6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	059b      	lsls	r3, r3, #22
 8005e74:	0d9b      	lsrs	r3, r3, #22
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	1d7b      	adds	r3, r7, #5
 8005e7e:	33ff      	adds	r3, #255	@ 0xff
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e84:	d922      	bls.n	8005ecc <USB_EPStartXfer+0x478>
 8005e86:	1d7b      	adds	r3, r7, #5
 8005e88:	33ff      	adds	r3, #255	@ 0xff
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	21f8      	movs	r1, #248	@ 0xf8
 8005e90:	187a      	adds	r2, r7, r1
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	1d7b      	adds	r3, r7, #5
 8005e96:	33ff      	adds	r3, #255	@ 0xff
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	221f      	movs	r2, #31
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d104      	bne.n	8005eaa <USB_EPStartXfer+0x456>
 8005ea0:	187b      	adds	r3, r7, r1
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	187a      	adds	r2, r7, r1
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	23f8      	movs	r3, #248	@ 0xf8
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	4ab7      	ldr	r2, [pc, #732]	@ (80061a0 <USB_EPStartXfer+0x74c>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e04a      	b.n	8005f62 <USB_EPStartXfer+0x50e>
 8005ecc:	1d7b      	adds	r3, r7, #5
 8005ece:	33ff      	adds	r3, #255	@ 0xff
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d108      	bne.n	8005ee8 <USB_EPStartXfer+0x494>
 8005ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	4ab0      	ldr	r2, [pc, #704]	@ (80061a0 <USB_EPStartXfer+0x74c>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e03c      	b.n	8005f62 <USB_EPStartXfer+0x50e>
 8005ee8:	1d7b      	adds	r3, r7, #5
 8005eea:	33ff      	adds	r3, #255	@ 0xff
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	21f8      	movs	r1, #248	@ 0xf8
 8005ef2:	187a      	adds	r2, r7, r1
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	1d7b      	adds	r3, r7, #5
 8005ef8:	33ff      	adds	r3, #255	@ 0xff
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2201      	movs	r2, #1
 8005efe:	4013      	ands	r3, r2
 8005f00:	d004      	beq.n	8005f0c <USB_EPStartXfer+0x4b8>
 8005f02:	187b      	adds	r3, r7, r1
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	187a      	adds	r2, r7, r1
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	23f8      	movs	r3, #248	@ 0xf8
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	029b      	lsls	r3, r3, #10
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f24:	801a      	strh	r2, [r3, #0]
 8005f26:	e01c      	b.n	8005f62 <USB_EPStartXfer+0x50e>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d118      	bne.n	8005f62 <USB_EPStartXfer+0x50e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2250      	movs	r2, #80	@ 0x50
 8005f38:	5a9b      	ldrh	r3, [r3, r2]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	001a      	movs	r2, r3
 8005f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f40:	189b      	adds	r3, r3, r2
 8005f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	00da      	lsls	r2, r3, #3
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f4c:	18d3      	adds	r3, r2, r3
 8005f4e:	4a93      	ldr	r2, [pc, #588]	@ (800619c <USB_EPStartXfer+0x748>)
 8005f50:	4694      	mov	ip, r2
 8005f52:	4463      	add	r3, ip
 8005f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f56:	1d7b      	adds	r3, r7, #5
 8005f58:	33ff      	adds	r3, #255	@ 0xff
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f62:	2076      	movs	r0, #118	@ 0x76
 8005f64:	183b      	adds	r3, r7, r0
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	8912      	ldrh	r2, [r2, #8]
 8005f6a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6959      	ldr	r1, [r3, #20]
 8005f70:	1d7b      	adds	r3, r7, #5
 8005f72:	33ff      	adds	r3, #255	@ 0xff
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	b29c      	uxth	r4, r3
 8005f78:	183b      	adds	r3, r7, r0
 8005f7a:	881a      	ldrh	r2, [r3, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	0023      	movs	r3, r4
 8005f80:	f000 ffda 	bl	8006f38 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	1d7b      	adds	r3, r7, #5
 8005f8a:	33ff      	adds	r3, #255	@ 0xff
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	18d2      	adds	r2, r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d908      	bls.n	8005fb2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	6a1a      	ldr	r2, [r3, #32]
 8005fa4:	1d7b      	adds	r3, r7, #5
 8005fa6:	33ff      	adds	r3, #255	@ 0xff
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	1ad2      	subs	r2, r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	621a      	str	r2, [r3, #32]
 8005fb0:	e007      	b.n	8005fc2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	1d7a      	adds	r2, r7, #5
 8005fb8:	32ff      	adds	r2, #255	@ 0xff
 8005fba:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d000      	beq.n	8005fd0 <USB_EPStartXfer+0x57c>
 8005fce:	e070      	b.n	80060b2 <USB_EPStartXfer+0x65e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2250      	movs	r2, #80	@ 0x50
 8005fd8:	5a9b      	ldrh	r3, [r3, r2]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	001a      	movs	r2, r3
 8005fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe0:	189b      	adds	r3, r3, r2
 8005fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	00da      	lsls	r2, r3, #3
 8005fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fec:	18d3      	adds	r3, r2, r3
 8005fee:	4a6d      	ldr	r2, [pc, #436]	@ (80061a4 <USB_EPStartXfer+0x750>)
 8005ff0:	4694      	mov	ip, r2
 8005ff2:	4463      	add	r3, ip
 8005ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	059b      	lsls	r3, r3, #22
 8005ffe:	0d9b      	lsrs	r3, r3, #22
 8006000:	b29a      	uxth	r2, r3
 8006002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	1d7b      	adds	r3, r7, #5
 8006008:	33ff      	adds	r3, #255	@ 0xff
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b3e      	cmp	r3, #62	@ 0x3e
 800600e:	d922      	bls.n	8006056 <USB_EPStartXfer+0x602>
 8006010:	1d7b      	adds	r3, r7, #5
 8006012:	33ff      	adds	r3, #255	@ 0xff
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	21f4      	movs	r1, #244	@ 0xf4
 800601a:	187a      	adds	r2, r7, r1
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	1d7b      	adds	r3, r7, #5
 8006020:	33ff      	adds	r3, #255	@ 0xff
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	221f      	movs	r2, #31
 8006026:	4013      	ands	r3, r2
 8006028:	d104      	bne.n	8006034 <USB_EPStartXfer+0x5e0>
 800602a:	187b      	adds	r3, r7, r1
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3b01      	subs	r3, #1
 8006030:	187a      	adds	r2, r7, r1
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29a      	uxth	r2, r3
 800603a:	23f4      	movs	r3, #244	@ 0xf4
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	029b      	lsls	r3, r3, #10
 8006044:	b29b      	uxth	r3, r3
 8006046:	4313      	orrs	r3, r2
 8006048:	b29b      	uxth	r3, r3
 800604a:	4a55      	ldr	r2, [pc, #340]	@ (80061a0 <USB_EPStartXfer+0x74c>)
 800604c:	4313      	orrs	r3, r2
 800604e:	b29a      	uxth	r2, r3
 8006050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e048      	b.n	80060e8 <USB_EPStartXfer+0x694>
 8006056:	1d7b      	adds	r3, r7, #5
 8006058:	33ff      	adds	r3, #255	@ 0xff
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d108      	bne.n	8006072 <USB_EPStartXfer+0x61e>
 8006060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	4a4e      	ldr	r2, [pc, #312]	@ (80061a0 <USB_EPStartXfer+0x74c>)
 8006068:	4313      	orrs	r3, r2
 800606a:	b29a      	uxth	r2, r3
 800606c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e03a      	b.n	80060e8 <USB_EPStartXfer+0x694>
 8006072:	1d7b      	adds	r3, r7, #5
 8006074:	33ff      	adds	r3, #255	@ 0xff
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	21f4      	movs	r1, #244	@ 0xf4
 800607c:	187a      	adds	r2, r7, r1
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	1d7b      	adds	r3, r7, #5
 8006082:	33ff      	adds	r3, #255	@ 0xff
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2201      	movs	r2, #1
 8006088:	4013      	ands	r3, r2
 800608a:	d004      	beq.n	8006096 <USB_EPStartXfer+0x642>
 800608c:	187b      	adds	r3, r7, r1
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	187a      	adds	r2, r7, r1
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29a      	uxth	r2, r3
 800609c:	23f4      	movs	r3, #244	@ 0xf4
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	029b      	lsls	r3, r3, #10
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	e01a      	b.n	80060e8 <USB_EPStartXfer+0x694>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d116      	bne.n	80060e8 <USB_EPStartXfer+0x694>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2250      	movs	r2, #80	@ 0x50
 80060be:	5a9b      	ldrh	r3, [r3, r2]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	001a      	movs	r2, r3
 80060c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060c6:	189b      	adds	r3, r3, r2
 80060c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	00da      	lsls	r2, r3, #3
 80060d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060d2:	18d3      	adds	r3, r2, r3
 80060d4:	4a33      	ldr	r2, [pc, #204]	@ (80061a4 <USB_EPStartXfer+0x750>)
 80060d6:	4694      	mov	ip, r2
 80060d8:	4463      	add	r3, ip
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060dc:	1d7b      	adds	r3, r7, #5
 80060de:	33ff      	adds	r3, #255	@ 0xff
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060e8:	2076      	movs	r0, #118	@ 0x76
 80060ea:	183b      	adds	r3, r7, r0
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	8952      	ldrh	r2, [r2, #10]
 80060f0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6959      	ldr	r1, [r3, #20]
 80060f6:	1d7b      	adds	r3, r7, #5
 80060f8:	33ff      	adds	r3, #255	@ 0xff
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	b29c      	uxth	r4, r3
 80060fe:	183b      	adds	r3, r7, r0
 8006100:	881a      	ldrh	r2, [r3, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	0023      	movs	r3, r4
 8006106:	f000 ff17 	bl	8006f38 <USB_WritePMA>
 800610a:	e1b6      	b.n	800647a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	1d7a      	adds	r2, r7, #5
 8006112:	32ff      	adds	r2, #255	@ 0xff
 8006114:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	18d3      	adds	r3, r2, r3
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29a      	uxth	r2, r3
 8006124:	2062      	movs	r0, #98	@ 0x62
 8006126:	183b      	adds	r3, r7, r0
 8006128:	491f      	ldr	r1, [pc, #124]	@ (80061a8 <USB_EPStartXfer+0x754>)
 800612a:	400a      	ands	r2, r1
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	18d3      	adds	r3, r2, r3
 8006138:	183a      	adds	r2, r7, r0
 800613a:	8812      	ldrh	r2, [r2, #0]
 800613c:	491b      	ldr	r1, [pc, #108]	@ (80061ac <USB_EPStartXfer+0x758>)
 800613e:	430a      	orrs	r2, r1
 8006140:	b292      	uxth	r2, r2
 8006142:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2250      	movs	r2, #80	@ 0x50
 800614c:	5a9b      	ldrh	r3, [r3, r2]
 800614e:	b29b      	uxth	r3, r3
 8006150:	001a      	movs	r2, r3
 8006152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006154:	189b      	adds	r3, r3, r2
 8006156:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	00da      	lsls	r2, r3, #3
 800615e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006160:	18d3      	adds	r3, r2, r3
 8006162:	4a0e      	ldr	r2, [pc, #56]	@ (800619c <USB_EPStartXfer+0x748>)
 8006164:	4694      	mov	ip, r2
 8006166:	4463      	add	r3, ip
 8006168:	65bb      	str	r3, [r7, #88]	@ 0x58
 800616a:	1d7b      	adds	r3, r7, #5
 800616c:	33ff      	adds	r3, #255	@ 0xff
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	b29a      	uxth	r2, r3
 8006172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006174:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006176:	2076      	movs	r0, #118	@ 0x76
 8006178:	183b      	adds	r3, r7, r0
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	8912      	ldrh	r2, [r2, #8]
 800617e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	6959      	ldr	r1, [r3, #20]
 8006184:	1d7b      	adds	r3, r7, #5
 8006186:	33ff      	adds	r3, #255	@ 0xff
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	b29c      	uxth	r4, r3
 800618c:	183b      	adds	r3, r7, r0
 800618e:	881a      	ldrh	r2, [r3, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	0023      	movs	r3, r4
 8006194:	f000 fed0 	bl	8006f38 <USB_WritePMA>
 8006198:	e16f      	b.n	800647a <USB_EPStartXfer+0xa26>
 800619a:	46c0      	nop			@ (mov r8, r8)
 800619c:	00000402 	.word	0x00000402
 80061a0:	ffff8000 	.word	0xffff8000
 80061a4:	00000406 	.word	0x00000406
 80061a8:	ffff8e8f 	.word	0xffff8e8f
 80061ac:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	1d7b      	adds	r3, r7, #5
 80061b6:	33ff      	adds	r3, #255	@ 0xff
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	18d3      	adds	r3, r2, r3
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	001a      	movs	r2, r3
 80061d0:	2340      	movs	r3, #64	@ 0x40
 80061d2:	4013      	ands	r3, r2
 80061d4:	d100      	bne.n	80061d8 <USB_EPStartXfer+0x784>
 80061d6:	e0a4      	b.n	8006322 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	673b      	str	r3, [r7, #112]	@ 0x70
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	785b      	ldrb	r3, [r3, #1]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d000      	beq.n	80061e6 <USB_EPStartXfer+0x792>
 80061e4:	e070      	b.n	80062c8 <USB_EPStartXfer+0x874>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2250      	movs	r2, #80	@ 0x50
 80061ee:	5a9b      	ldrh	r3, [r3, r2]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	001a      	movs	r2, r3
 80061f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	00da      	lsls	r2, r3, #3
 8006200:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006202:	18d3      	adds	r3, r2, r3
 8006204:	4abc      	ldr	r2, [pc, #752]	@ (80064f8 <USB_EPStartXfer+0xaa4>)
 8006206:	4694      	mov	ip, r2
 8006208:	4463      	add	r3, ip
 800620a:	667b      	str	r3, [r7, #100]	@ 0x64
 800620c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	059b      	lsls	r3, r3, #22
 8006214:	0d9b      	lsrs	r3, r3, #22
 8006216:	b29a      	uxth	r2, r3
 8006218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	1d7b      	adds	r3, r7, #5
 800621e:	33ff      	adds	r3, #255	@ 0xff
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b3e      	cmp	r3, #62	@ 0x3e
 8006224:	d922      	bls.n	800626c <USB_EPStartXfer+0x818>
 8006226:	1d7b      	adds	r3, r7, #5
 8006228:	33ff      	adds	r3, #255	@ 0xff
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	21f0      	movs	r1, #240	@ 0xf0
 8006230:	187a      	adds	r2, r7, r1
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	1d7b      	adds	r3, r7, #5
 8006236:	33ff      	adds	r3, #255	@ 0xff
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	221f      	movs	r2, #31
 800623c:	4013      	ands	r3, r2
 800623e:	d104      	bne.n	800624a <USB_EPStartXfer+0x7f6>
 8006240:	187b      	adds	r3, r7, r1
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3b01      	subs	r3, #1
 8006246:	187a      	adds	r2, r7, r1
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29a      	uxth	r2, r3
 8006250:	23f0      	movs	r3, #240	@ 0xf0
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	029b      	lsls	r3, r3, #10
 800625a:	b29b      	uxth	r3, r3
 800625c:	4313      	orrs	r3, r2
 800625e:	b29b      	uxth	r3, r3
 8006260:	4aa6      	ldr	r2, [pc, #664]	@ (80064fc <USB_EPStartXfer+0xaa8>)
 8006262:	4313      	orrs	r3, r2
 8006264:	b29a      	uxth	r2, r3
 8006266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006268:	801a      	strh	r2, [r3, #0]
 800626a:	e048      	b.n	80062fe <USB_EPStartXfer+0x8aa>
 800626c:	1d7b      	adds	r3, r7, #5
 800626e:	33ff      	adds	r3, #255	@ 0xff
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d108      	bne.n	8006288 <USB_EPStartXfer+0x834>
 8006276:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	4a9f      	ldr	r2, [pc, #636]	@ (80064fc <USB_EPStartXfer+0xaa8>)
 800627e:	4313      	orrs	r3, r2
 8006280:	b29a      	uxth	r2, r3
 8006282:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	e03a      	b.n	80062fe <USB_EPStartXfer+0x8aa>
 8006288:	1d7b      	adds	r3, r7, #5
 800628a:	33ff      	adds	r3, #255	@ 0xff
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	21f0      	movs	r1, #240	@ 0xf0
 8006292:	187a      	adds	r2, r7, r1
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	1d7b      	adds	r3, r7, #5
 8006298:	33ff      	adds	r3, #255	@ 0xff
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2201      	movs	r2, #1
 800629e:	4013      	ands	r3, r2
 80062a0:	d004      	beq.n	80062ac <USB_EPStartXfer+0x858>
 80062a2:	187b      	adds	r3, r7, r1
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	187a      	adds	r2, r7, r1
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	23f0      	movs	r3, #240	@ 0xf0
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4313      	orrs	r3, r2
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	e01a      	b.n	80062fe <USB_EPStartXfer+0x8aa>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d116      	bne.n	80062fe <USB_EPStartXfer+0x8aa>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2250      	movs	r2, #80	@ 0x50
 80062d4:	5a9b      	ldrh	r3, [r3, r2]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	001a      	movs	r2, r3
 80062da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062dc:	189b      	adds	r3, r3, r2
 80062de:	673b      	str	r3, [r7, #112]	@ 0x70
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	00da      	lsls	r2, r3, #3
 80062e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062e8:	18d3      	adds	r3, r2, r3
 80062ea:	4a83      	ldr	r2, [pc, #524]	@ (80064f8 <USB_EPStartXfer+0xaa4>)
 80062ec:	4694      	mov	ip, r2
 80062ee:	4463      	add	r3, ip
 80062f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062f2:	1d7b      	adds	r3, r7, #5
 80062f4:	33ff      	adds	r3, #255	@ 0xff
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80062fe:	2076      	movs	r0, #118	@ 0x76
 8006300:	183b      	adds	r3, r7, r0
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	8952      	ldrh	r2, [r2, #10]
 8006306:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	6959      	ldr	r1, [r3, #20]
 800630c:	1d7b      	adds	r3, r7, #5
 800630e:	33ff      	adds	r3, #255	@ 0xff
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	b29c      	uxth	r4, r3
 8006314:	183b      	adds	r3, r7, r0
 8006316:	881a      	ldrh	r2, [r3, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	0023      	movs	r3, r4
 800631c:	f000 fe0c 	bl	8006f38 <USB_WritePMA>
 8006320:	e0ab      	b.n	800647a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d000      	beq.n	800632c <USB_EPStartXfer+0x8d8>
 800632a:	e070      	b.n	800640e <USB_EPStartXfer+0x9ba>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2250      	movs	r2, #80	@ 0x50
 8006334:	5a9b      	ldrh	r3, [r3, r2]
 8006336:	b29b      	uxth	r3, r3
 8006338:	001a      	movs	r2, r3
 800633a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800633c:	189b      	adds	r3, r3, r2
 800633e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	00da      	lsls	r2, r3, #3
 8006346:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006348:	18d3      	adds	r3, r2, r3
 800634a:	4a6d      	ldr	r2, [pc, #436]	@ (8006500 <USB_EPStartXfer+0xaac>)
 800634c:	4694      	mov	ip, r2
 800634e:	4463      	add	r3, ip
 8006350:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	059b      	lsls	r3, r3, #22
 800635a:	0d9b      	lsrs	r3, r3, #22
 800635c:	b29a      	uxth	r2, r3
 800635e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	1d7b      	adds	r3, r7, #5
 8006364:	33ff      	adds	r3, #255	@ 0xff
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b3e      	cmp	r3, #62	@ 0x3e
 800636a:	d922      	bls.n	80063b2 <USB_EPStartXfer+0x95e>
 800636c:	1d7b      	adds	r3, r7, #5
 800636e:	33ff      	adds	r3, #255	@ 0xff
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	21ec      	movs	r1, #236	@ 0xec
 8006376:	187a      	adds	r2, r7, r1
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	1d7b      	adds	r3, r7, #5
 800637c:	33ff      	adds	r3, #255	@ 0xff
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	221f      	movs	r2, #31
 8006382:	4013      	ands	r3, r2
 8006384:	d104      	bne.n	8006390 <USB_EPStartXfer+0x93c>
 8006386:	187b      	adds	r3, r7, r1
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3b01      	subs	r3, #1
 800638c:	187a      	adds	r2, r7, r1
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29a      	uxth	r2, r3
 8006396:	23ec      	movs	r3, #236	@ 0xec
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	029b      	lsls	r3, r3, #10
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	4313      	orrs	r3, r2
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	4a55      	ldr	r2, [pc, #340]	@ (80064fc <USB_EPStartXfer+0xaa8>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e052      	b.n	8006458 <USB_EPStartXfer+0xa04>
 80063b2:	1d7b      	adds	r3, r7, #5
 80063b4:	33ff      	adds	r3, #255	@ 0xff
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d108      	bne.n	80063ce <USB_EPStartXfer+0x97a>
 80063bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	4a4e      	ldr	r2, [pc, #312]	@ (80064fc <USB_EPStartXfer+0xaa8>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	e044      	b.n	8006458 <USB_EPStartXfer+0xa04>
 80063ce:	1d7b      	adds	r3, r7, #5
 80063d0:	33ff      	adds	r3, #255	@ 0xff
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	21ec      	movs	r1, #236	@ 0xec
 80063d8:	187a      	adds	r2, r7, r1
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	1d7b      	adds	r3, r7, #5
 80063de:	33ff      	adds	r3, #255	@ 0xff
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2201      	movs	r2, #1
 80063e4:	4013      	ands	r3, r2
 80063e6:	d004      	beq.n	80063f2 <USB_EPStartXfer+0x99e>
 80063e8:	187b      	adds	r3, r7, r1
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3301      	adds	r3, #1
 80063ee:	187a      	adds	r2, r7, r1
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	23ec      	movs	r3, #236	@ 0xec
 80063fa:	18fb      	adds	r3, r7, r3
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	029b      	lsls	r3, r3, #10
 8006402:	b29b      	uxth	r3, r3
 8006404:	4313      	orrs	r3, r2
 8006406:	b29a      	uxth	r2, r3
 8006408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	e024      	b.n	8006458 <USB_EPStartXfer+0xa04>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d120      	bne.n	8006458 <USB_EPStartXfer+0xa04>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2184      	movs	r1, #132	@ 0x84
 800641a:	187a      	adds	r2, r7, r1
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2250      	movs	r2, #80	@ 0x50
 8006422:	5a9b      	ldrh	r3, [r3, r2]
 8006424:	b29b      	uxth	r3, r3
 8006426:	001a      	movs	r2, r3
 8006428:	187b      	adds	r3, r7, r1
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	189b      	adds	r3, r3, r2
 800642e:	187a      	adds	r2, r7, r1
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00da      	lsls	r2, r3, #3
 8006438:	187b      	adds	r3, r7, r1
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	18d3      	adds	r3, r2, r3
 800643e:	4a30      	ldr	r2, [pc, #192]	@ (8006500 <USB_EPStartXfer+0xaac>)
 8006440:	4694      	mov	ip, r2
 8006442:	4463      	add	r3, ip
 8006444:	2180      	movs	r1, #128	@ 0x80
 8006446:	187a      	adds	r2, r7, r1
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	1d7b      	adds	r3, r7, #5
 800644c:	33ff      	adds	r3, #255	@ 0xff
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	b29a      	uxth	r2, r3
 8006452:	187b      	adds	r3, r7, r1
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006458:	2076      	movs	r0, #118	@ 0x76
 800645a:	183b      	adds	r3, r7, r0
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	8912      	ldrh	r2, [r2, #8]
 8006460:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6959      	ldr	r1, [r3, #20]
 8006466:	1d7b      	adds	r3, r7, #5
 8006468:	33ff      	adds	r3, #255	@ 0xff
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	b29c      	uxth	r4, r3
 800646e:	183b      	adds	r3, r7, r0
 8006470:	881a      	ldrh	r2, [r3, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	0023      	movs	r3, r4
 8006476:	f000 fd5f 	bl	8006f38 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	18d3      	adds	r3, r2, r3
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29a      	uxth	r2, r3
 8006488:	200a      	movs	r0, #10
 800648a:	183b      	adds	r3, r7, r0
 800648c:	491d      	ldr	r1, [pc, #116]	@ (8006504 <USB_EPStartXfer+0xab0>)
 800648e:	400a      	ands	r2, r1
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	183b      	adds	r3, r7, r0
 8006494:	183a      	adds	r2, r7, r0
 8006496:	8812      	ldrh	r2, [r2, #0]
 8006498:	2110      	movs	r1, #16
 800649a:	404a      	eors	r2, r1
 800649c:	801a      	strh	r2, [r3, #0]
 800649e:	183b      	adds	r3, r7, r0
 80064a0:	183a      	adds	r2, r7, r0
 80064a2:	8812      	ldrh	r2, [r2, #0]
 80064a4:	2120      	movs	r1, #32
 80064a6:	404a      	eors	r2, r1
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	18d3      	adds	r3, r2, r3
 80064b4:	183a      	adds	r2, r7, r0
 80064b6:	8812      	ldrh	r2, [r2, #0]
 80064b8:	4913      	ldr	r1, [pc, #76]	@ (8006508 <USB_EPStartXfer+0xab4>)
 80064ba:	430a      	orrs	r2, r1
 80064bc:	b292      	uxth	r2, r2
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	f000 fbf4 	bl	8006cac <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	7b1b      	ldrb	r3, [r3, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d000      	beq.n	80064ce <USB_EPStartXfer+0xa7a>
 80064cc:	e0a9      	b.n	8006622 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d918      	bls.n	800650c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	1d7a      	adds	r2, r7, #5
 80064e0:	32ff      	adds	r2, #255	@ 0xff
 80064e2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	1d7b      	adds	r3, r7, #5
 80064ea:	33ff      	adds	r3, #255	@ 0xff
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	619a      	str	r2, [r3, #24]
 80064f4:	e012      	b.n	800651c <USB_EPStartXfer+0xac8>
 80064f6:	46c0      	nop			@ (mov r8, r8)
 80064f8:	00000406 	.word	0x00000406
 80064fc:	ffff8000 	.word	0xffff8000
 8006500:	00000402 	.word	0x00000402
 8006504:	ffff8fbf 	.word	0xffff8fbf
 8006508:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	1d7a      	adds	r2, r7, #5
 8006512:	32ff      	adds	r2, #255	@ 0xff
 8006514:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2200      	movs	r2, #0
 800651a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2190      	movs	r1, #144	@ 0x90
 8006520:	187a      	adds	r2, r7, r1
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2250      	movs	r2, #80	@ 0x50
 8006528:	5a9b      	ldrh	r3, [r3, r2]
 800652a:	b29b      	uxth	r3, r3
 800652c:	001a      	movs	r2, r3
 800652e:	187b      	adds	r3, r7, r1
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	189b      	adds	r3, r3, r2
 8006534:	187a      	adds	r2, r7, r1
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	00da      	lsls	r2, r3, #3
 800653e:	187b      	adds	r3, r7, r1
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	18d3      	adds	r3, r2, r3
 8006544:	4acf      	ldr	r2, [pc, #828]	@ (8006884 <USB_EPStartXfer+0xe30>)
 8006546:	4694      	mov	ip, r2
 8006548:	4463      	add	r3, ip
 800654a:	218c      	movs	r1, #140	@ 0x8c
 800654c:	187a      	adds	r2, r7, r1
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	187b      	adds	r3, r7, r1
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29b      	uxth	r3, r3
 8006558:	059b      	lsls	r3, r3, #22
 800655a:	0d9b      	lsrs	r3, r3, #22
 800655c:	b29a      	uxth	r2, r3
 800655e:	187b      	adds	r3, r7, r1
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	801a      	strh	r2, [r3, #0]
 8006564:	1d7b      	adds	r3, r7, #5
 8006566:	33ff      	adds	r3, #255	@ 0xff
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b3e      	cmp	r3, #62	@ 0x3e
 800656c:	d925      	bls.n	80065ba <USB_EPStartXfer+0xb66>
 800656e:	1d7b      	adds	r3, r7, #5
 8006570:	33ff      	adds	r3, #255	@ 0xff
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	21e8      	movs	r1, #232	@ 0xe8
 8006578:	187a      	adds	r2, r7, r1
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	1d7b      	adds	r3, r7, #5
 800657e:	33ff      	adds	r3, #255	@ 0xff
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	221f      	movs	r2, #31
 8006584:	4013      	ands	r3, r2
 8006586:	d104      	bne.n	8006592 <USB_EPStartXfer+0xb3e>
 8006588:	187b      	adds	r3, r7, r1
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3b01      	subs	r3, #1
 800658e:	187a      	adds	r2, r7, r1
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	218c      	movs	r1, #140	@ 0x8c
 8006594:	187b      	adds	r3, r7, r1
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29a      	uxth	r2, r3
 800659c:	23e8      	movs	r3, #232	@ 0xe8
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	029b      	lsls	r3, r3, #10
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	4ab6      	ldr	r2, [pc, #728]	@ (8006888 <USB_EPStartXfer+0xe34>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	187b      	adds	r3, r7, r1
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	e353      	b.n	8006c62 <USB_EPStartXfer+0x120e>
 80065ba:	1d7b      	adds	r3, r7, #5
 80065bc:	33ff      	adds	r3, #255	@ 0xff
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <USB_EPStartXfer+0xb88>
 80065c4:	218c      	movs	r1, #140	@ 0x8c
 80065c6:	187b      	adds	r3, r7, r1
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	4aae      	ldr	r2, [pc, #696]	@ (8006888 <USB_EPStartXfer+0xe34>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	187b      	adds	r3, r7, r1
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	e342      	b.n	8006c62 <USB_EPStartXfer+0x120e>
 80065dc:	1d7b      	adds	r3, r7, #5
 80065de:	33ff      	adds	r3, #255	@ 0xff
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	21e8      	movs	r1, #232	@ 0xe8
 80065e6:	187a      	adds	r2, r7, r1
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	1d7b      	adds	r3, r7, #5
 80065ec:	33ff      	adds	r3, #255	@ 0xff
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2201      	movs	r2, #1
 80065f2:	4013      	ands	r3, r2
 80065f4:	d004      	beq.n	8006600 <USB_EPStartXfer+0xbac>
 80065f6:	187b      	adds	r3, r7, r1
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	187a      	adds	r2, r7, r1
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	218c      	movs	r1, #140	@ 0x8c
 8006602:	187b      	adds	r3, r7, r1
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29a      	uxth	r2, r3
 800660a:	23e8      	movs	r3, #232	@ 0xe8
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	b29b      	uxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	187b      	adds	r3, r7, r1
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e31f      	b.n	8006c62 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	78db      	ldrb	r3, [r3, #3]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d000      	beq.n	800662c <USB_EPStartXfer+0xbd8>
 800662a:	e191      	b.n	8006950 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d000      	beq.n	8006636 <USB_EPStartXfer+0xbe2>
 8006634:	e07c      	b.n	8006730 <USB_EPStartXfer+0xcdc>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	21ac      	movs	r1, #172	@ 0xac
 800663a:	187a      	adds	r2, r7, r1
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2250      	movs	r2, #80	@ 0x50
 8006642:	5a9b      	ldrh	r3, [r3, r2]
 8006644:	b29b      	uxth	r3, r3
 8006646:	001a      	movs	r2, r3
 8006648:	187b      	adds	r3, r7, r1
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	189b      	adds	r3, r3, r2
 800664e:	187a      	adds	r2, r7, r1
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	00da      	lsls	r2, r3, #3
 8006658:	187b      	adds	r3, r7, r1
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	18d3      	adds	r3, r2, r3
 800665e:	4a8b      	ldr	r2, [pc, #556]	@ (800688c <USB_EPStartXfer+0xe38>)
 8006660:	4694      	mov	ip, r2
 8006662:	4463      	add	r3, ip
 8006664:	21a8      	movs	r1, #168	@ 0xa8
 8006666:	187a      	adds	r2, r7, r1
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	187b      	adds	r3, r7, r1
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	059b      	lsls	r3, r3, #22
 8006674:	0d9b      	lsrs	r3, r3, #22
 8006676:	b29a      	uxth	r2, r3
 8006678:	187b      	adds	r3, r7, r1
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	2b3e      	cmp	r3, #62	@ 0x3e
 8006684:	d923      	bls.n	80066ce <USB_EPStartXfer+0xc7a>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	21e4      	movs	r1, #228	@ 0xe4
 800668e:	187a      	adds	r2, r7, r1
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	221f      	movs	r2, #31
 8006698:	4013      	ands	r3, r2
 800669a:	d104      	bne.n	80066a6 <USB_EPStartXfer+0xc52>
 800669c:	187b      	adds	r3, r7, r1
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	187a      	adds	r2, r7, r1
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	21a8      	movs	r1, #168	@ 0xa8
 80066a8:	187b      	adds	r3, r7, r1
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	23e4      	movs	r3, #228	@ 0xe4
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	029b      	lsls	r3, r3, #10
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29b      	uxth	r3, r3
 80066c0:	4a71      	ldr	r2, [pc, #452]	@ (8006888 <USB_EPStartXfer+0xe34>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	187b      	adds	r3, r7, r1
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e054      	b.n	8006778 <USB_EPStartXfer+0xd24>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10b      	bne.n	80066ee <USB_EPStartXfer+0xc9a>
 80066d6:	21a8      	movs	r1, #168	@ 0xa8
 80066d8:	187b      	adds	r3, r7, r1
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4a69      	ldr	r2, [pc, #420]	@ (8006888 <USB_EPStartXfer+0xe34>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	187b      	adds	r3, r7, r1
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	e044      	b.n	8006778 <USB_EPStartXfer+0xd24>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	21e4      	movs	r1, #228	@ 0xe4
 80066f6:	187a      	adds	r2, r7, r1
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2201      	movs	r2, #1
 8006700:	4013      	ands	r3, r2
 8006702:	d004      	beq.n	800670e <USB_EPStartXfer+0xcba>
 8006704:	187b      	adds	r3, r7, r1
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	187a      	adds	r2, r7, r1
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	21a8      	movs	r1, #168	@ 0xa8
 8006710:	187b      	adds	r3, r7, r1
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29a      	uxth	r2, r3
 8006718:	23e4      	movs	r3, #228	@ 0xe4
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	029b      	lsls	r3, r3, #10
 8006722:	b29b      	uxth	r3, r3
 8006724:	4313      	orrs	r3, r2
 8006726:	b29a      	uxth	r2, r3
 8006728:	187b      	adds	r3, r7, r1
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	e023      	b.n	8006778 <USB_EPStartXfer+0xd24>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d11f      	bne.n	8006778 <USB_EPStartXfer+0xd24>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	21b4      	movs	r1, #180	@ 0xb4
 800673c:	187a      	adds	r2, r7, r1
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2250      	movs	r2, #80	@ 0x50
 8006744:	5a9b      	ldrh	r3, [r3, r2]
 8006746:	b29b      	uxth	r3, r3
 8006748:	001a      	movs	r2, r3
 800674a:	187b      	adds	r3, r7, r1
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	189b      	adds	r3, r3, r2
 8006750:	187a      	adds	r2, r7, r1
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	00da      	lsls	r2, r3, #3
 800675a:	187b      	adds	r3, r7, r1
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	18d3      	adds	r3, r2, r3
 8006760:	4a4a      	ldr	r2, [pc, #296]	@ (800688c <USB_EPStartXfer+0xe38>)
 8006762:	4694      	mov	ip, r2
 8006764:	4463      	add	r3, ip
 8006766:	21b0      	movs	r1, #176	@ 0xb0
 8006768:	187a      	adds	r2, r7, r1
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	b29a      	uxth	r2, r3
 8006772:	187b      	adds	r3, r7, r1
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	22a4      	movs	r2, #164	@ 0xa4
 800677c:	18ba      	adds	r2, r7, r2
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d000      	beq.n	800678a <USB_EPStartXfer+0xd36>
 8006788:	e082      	b.n	8006890 <USB_EPStartXfer+0xe3c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	219c      	movs	r1, #156	@ 0x9c
 800678e:	187a      	adds	r2, r7, r1
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2250      	movs	r2, #80	@ 0x50
 8006796:	5a9b      	ldrh	r3, [r3, r2]
 8006798:	b29b      	uxth	r3, r3
 800679a:	001a      	movs	r2, r3
 800679c:	187b      	adds	r3, r7, r1
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	189b      	adds	r3, r3, r2
 80067a2:	187a      	adds	r2, r7, r1
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	00da      	lsls	r2, r3, #3
 80067ac:	187b      	adds	r3, r7, r1
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	18d3      	adds	r3, r2, r3
 80067b2:	4a34      	ldr	r2, [pc, #208]	@ (8006884 <USB_EPStartXfer+0xe30>)
 80067b4:	4694      	mov	ip, r2
 80067b6:	4463      	add	r3, ip
 80067b8:	2198      	movs	r1, #152	@ 0x98
 80067ba:	187a      	adds	r2, r7, r1
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	187b      	adds	r3, r7, r1
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	059b      	lsls	r3, r3, #22
 80067c8:	0d9b      	lsrs	r3, r3, #22
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	187b      	adds	r3, r7, r1
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80067d8:	d923      	bls.n	8006822 <USB_EPStartXfer+0xdce>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	21e0      	movs	r1, #224	@ 0xe0
 80067e2:	187a      	adds	r2, r7, r1
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	221f      	movs	r2, #31
 80067ec:	4013      	ands	r3, r2
 80067ee:	d104      	bne.n	80067fa <USB_EPStartXfer+0xda6>
 80067f0:	187b      	adds	r3, r7, r1
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	187a      	adds	r2, r7, r1
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	2198      	movs	r1, #152	@ 0x98
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29a      	uxth	r2, r3
 8006804:	23e0      	movs	r3, #224	@ 0xe0
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	029b      	lsls	r3, r3, #10
 800680e:	b29b      	uxth	r3, r3
 8006810:	4313      	orrs	r3, r2
 8006812:	b29b      	uxth	r3, r3
 8006814:	4a1c      	ldr	r2, [pc, #112]	@ (8006888 <USB_EPStartXfer+0xe34>)
 8006816:	4313      	orrs	r3, r2
 8006818:	b29a      	uxth	r2, r3
 800681a:	187b      	adds	r3, r7, r1
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e057      	b.n	80068d2 <USB_EPStartXfer+0xe7e>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10b      	bne.n	8006842 <USB_EPStartXfer+0xdee>
 800682a:	2198      	movs	r1, #152	@ 0x98
 800682c:	187b      	adds	r3, r7, r1
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	4a14      	ldr	r2, [pc, #80]	@ (8006888 <USB_EPStartXfer+0xe34>)
 8006836:	4313      	orrs	r3, r2
 8006838:	b29a      	uxth	r2, r3
 800683a:	187b      	adds	r3, r7, r1
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e047      	b.n	80068d2 <USB_EPStartXfer+0xe7e>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	21e0      	movs	r1, #224	@ 0xe0
 800684a:	187a      	adds	r2, r7, r1
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2201      	movs	r2, #1
 8006854:	4013      	ands	r3, r2
 8006856:	d004      	beq.n	8006862 <USB_EPStartXfer+0xe0e>
 8006858:	187b      	adds	r3, r7, r1
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	187a      	adds	r2, r7, r1
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	2198      	movs	r1, #152	@ 0x98
 8006864:	187b      	adds	r3, r7, r1
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29a      	uxth	r2, r3
 800686c:	23e0      	movs	r3, #224	@ 0xe0
 800686e:	18fb      	adds	r3, r7, r3
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	b29b      	uxth	r3, r3
 8006874:	029b      	lsls	r3, r3, #10
 8006876:	b29b      	uxth	r3, r3
 8006878:	4313      	orrs	r3, r2
 800687a:	b29a      	uxth	r2, r3
 800687c:	187b      	adds	r3, r7, r1
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	e026      	b.n	80068d2 <USB_EPStartXfer+0xe7e>
 8006884:	00000406 	.word	0x00000406
 8006888:	ffff8000 	.word	0xffff8000
 800688c:	00000402 	.word	0x00000402
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d11c      	bne.n	80068d2 <USB_EPStartXfer+0xe7e>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2250      	movs	r2, #80	@ 0x50
 800689c:	5a9b      	ldrh	r3, [r3, r2]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	001a      	movs	r2, r3
 80068a2:	21a4      	movs	r1, #164	@ 0xa4
 80068a4:	187b      	adds	r3, r7, r1
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	189b      	adds	r3, r3, r2
 80068aa:	187a      	adds	r2, r7, r1
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	00da      	lsls	r2, r3, #3
 80068b4:	187b      	adds	r3, r7, r1
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	18d3      	adds	r3, r2, r3
 80068ba:	4ad2      	ldr	r2, [pc, #840]	@ (8006c04 <USB_EPStartXfer+0x11b0>)
 80068bc:	4694      	mov	ip, r2
 80068be:	4463      	add	r3, ip
 80068c0:	21a0      	movs	r1, #160	@ 0xa0
 80068c2:	187a      	adds	r2, r7, r1
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	187b      	adds	r3, r7, r1
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d100      	bne.n	80068dc <USB_EPStartXfer+0xe88>
 80068da:	e1c2      	b.n	8006c62 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	18d2      	adds	r2, r2, r3
 80068e6:	2196      	movs	r1, #150	@ 0x96
 80068e8:	187b      	adds	r3, r7, r1
 80068ea:	8812      	ldrh	r2, [r2, #0]
 80068ec:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068ee:	187b      	adds	r3, r7, r1
 80068f0:	881a      	ldrh	r2, [r3, #0]
 80068f2:	2380      	movs	r3, #128	@ 0x80
 80068f4:	01db      	lsls	r3, r3, #7
 80068f6:	4013      	ands	r3, r2
 80068f8:	d004      	beq.n	8006904 <USB_EPStartXfer+0xeb0>
 80068fa:	187b      	adds	r3, r7, r1
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	2240      	movs	r2, #64	@ 0x40
 8006900:	4013      	ands	r3, r2
 8006902:	d10d      	bne.n	8006920 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006904:	2196      	movs	r1, #150	@ 0x96
 8006906:	187b      	adds	r3, r7, r1
 8006908:	881a      	ldrh	r2, [r3, #0]
 800690a:	2380      	movs	r3, #128	@ 0x80
 800690c:	01db      	lsls	r3, r3, #7
 800690e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006910:	d000      	beq.n	8006914 <USB_EPStartXfer+0xec0>
 8006912:	e1a6      	b.n	8006c62 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006914:	187b      	adds	r3, r7, r1
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	2240      	movs	r2, #64	@ 0x40
 800691a:	4013      	ands	r3, r2
 800691c:	d000      	beq.n	8006920 <USB_EPStartXfer+0xecc>
 800691e:	e1a0      	b.n	8006c62 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	18d3      	adds	r3, r2, r3
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29a      	uxth	r2, r3
 800692e:	2094      	movs	r0, #148	@ 0x94
 8006930:	183b      	adds	r3, r7, r0
 8006932:	49b5      	ldr	r1, [pc, #724]	@ (8006c08 <USB_EPStartXfer+0x11b4>)
 8006934:	400a      	ands	r2, r1
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	18d3      	adds	r3, r2, r3
 8006942:	183a      	adds	r2, r7, r0
 8006944:	8812      	ldrh	r2, [r2, #0]
 8006946:	49b1      	ldr	r1, [pc, #708]	@ (8006c0c <USB_EPStartXfer+0x11b8>)
 8006948:	430a      	orrs	r2, r1
 800694a:	b292      	uxth	r2, r2
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e188      	b.n	8006c62 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	78db      	ldrb	r3, [r3, #3]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d000      	beq.n	800695a <USB_EPStartXfer+0xf06>
 8006958:	e181      	b.n	8006c5e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	429a      	cmp	r2, r3
 8006964:	d90d      	bls.n	8006982 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	1d7a      	adds	r2, r7, #5
 800696c:	32ff      	adds	r2, #255	@ 0xff
 800696e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	699a      	ldr	r2, [r3, #24]
 8006974:	1d7b      	adds	r3, r7, #5
 8006976:	33ff      	adds	r3, #255	@ 0xff
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	1ad2      	subs	r2, r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	619a      	str	r2, [r3, #24]
 8006980:	e007      	b.n	8006992 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	1d7a      	adds	r2, r7, #5
 8006988:	32ff      	adds	r2, #255	@ 0xff
 800698a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d000      	beq.n	800699c <USB_EPStartXfer+0xf48>
 800699a:	e082      	b.n	8006aa2 <USB_EPStartXfer+0x104e>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	21cc      	movs	r1, #204	@ 0xcc
 80069a0:	187a      	adds	r2, r7, r1
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2250      	movs	r2, #80	@ 0x50
 80069a8:	5a9b      	ldrh	r3, [r3, r2]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	001a      	movs	r2, r3
 80069ae:	187b      	adds	r3, r7, r1
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	187a      	adds	r2, r7, r1
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	00da      	lsls	r2, r3, #3
 80069be:	187b      	adds	r3, r7, r1
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	18d3      	adds	r3, r2, r3
 80069c4:	4a92      	ldr	r2, [pc, #584]	@ (8006c10 <USB_EPStartXfer+0x11bc>)
 80069c6:	4694      	mov	ip, r2
 80069c8:	4463      	add	r3, ip
 80069ca:	21c8      	movs	r1, #200	@ 0xc8
 80069cc:	187a      	adds	r2, r7, r1
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	187b      	adds	r3, r7, r1
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	059b      	lsls	r3, r3, #22
 80069da:	0d9b      	lsrs	r3, r3, #22
 80069dc:	b29a      	uxth	r2, r3
 80069de:	187b      	adds	r3, r7, r1
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	1d7b      	adds	r3, r7, #5
 80069e6:	33ff      	adds	r3, #255	@ 0xff
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80069ec:	d925      	bls.n	8006a3a <USB_EPStartXfer+0xfe6>
 80069ee:	1d7b      	adds	r3, r7, #5
 80069f0:	33ff      	adds	r3, #255	@ 0xff
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	21dc      	movs	r1, #220	@ 0xdc
 80069f8:	187a      	adds	r2, r7, r1
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	1d7b      	adds	r3, r7, #5
 80069fe:	33ff      	adds	r3, #255	@ 0xff
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	221f      	movs	r2, #31
 8006a04:	4013      	ands	r3, r2
 8006a06:	d104      	bne.n	8006a12 <USB_EPStartXfer+0xfbe>
 8006a08:	187b      	adds	r3, r7, r1
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	187a      	adds	r2, r7, r1
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	21c8      	movs	r1, #200	@ 0xc8
 8006a14:	187b      	adds	r3, r7, r1
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	23dc      	movs	r3, #220	@ 0xdc
 8006a1e:	18fb      	adds	r3, r7, r3
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	029b      	lsls	r3, r3, #10
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	4a79      	ldr	r2, [pc, #484]	@ (8006c14 <USB_EPStartXfer+0x11c0>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	187b      	adds	r3, r7, r1
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	e058      	b.n	8006aec <USB_EPStartXfer+0x1098>
 8006a3a:	1d7b      	adds	r3, r7, #5
 8006a3c:	33ff      	adds	r3, #255	@ 0xff
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10b      	bne.n	8006a5c <USB_EPStartXfer+0x1008>
 8006a44:	21c8      	movs	r1, #200	@ 0xc8
 8006a46:	187b      	adds	r3, r7, r1
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	4a71      	ldr	r2, [pc, #452]	@ (8006c14 <USB_EPStartXfer+0x11c0>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	187b      	adds	r3, r7, r1
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	e047      	b.n	8006aec <USB_EPStartXfer+0x1098>
 8006a5c:	1d7b      	adds	r3, r7, #5
 8006a5e:	33ff      	adds	r3, #255	@ 0xff
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	085b      	lsrs	r3, r3, #1
 8006a64:	21dc      	movs	r1, #220	@ 0xdc
 8006a66:	187a      	adds	r2, r7, r1
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	1d7b      	adds	r3, r7, #5
 8006a6c:	33ff      	adds	r3, #255	@ 0xff
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2201      	movs	r2, #1
 8006a72:	4013      	ands	r3, r2
 8006a74:	d004      	beq.n	8006a80 <USB_EPStartXfer+0x102c>
 8006a76:	187b      	adds	r3, r7, r1
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	187a      	adds	r2, r7, r1
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	21c8      	movs	r1, #200	@ 0xc8
 8006a82:	187b      	adds	r3, r7, r1
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	23dc      	movs	r3, #220	@ 0xdc
 8006a8c:	18fb      	adds	r3, r7, r3
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	029b      	lsls	r3, r3, #10
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	4313      	orrs	r3, r2
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	187b      	adds	r3, r7, r1
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e024      	b.n	8006aec <USB_EPStartXfer+0x1098>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d120      	bne.n	8006aec <USB_EPStartXfer+0x1098>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	21d4      	movs	r1, #212	@ 0xd4
 8006aae:	187a      	adds	r2, r7, r1
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2250      	movs	r2, #80	@ 0x50
 8006ab6:	5a9b      	ldrh	r3, [r3, r2]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	001a      	movs	r2, r3
 8006abc:	187b      	adds	r3, r7, r1
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	189b      	adds	r3, r3, r2
 8006ac2:	187a      	adds	r2, r7, r1
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	00da      	lsls	r2, r3, #3
 8006acc:	187b      	adds	r3, r7, r1
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	18d3      	adds	r3, r2, r3
 8006ad2:	4a4f      	ldr	r2, [pc, #316]	@ (8006c10 <USB_EPStartXfer+0x11bc>)
 8006ad4:	4694      	mov	ip, r2
 8006ad6:	4463      	add	r3, ip
 8006ad8:	21d0      	movs	r1, #208	@ 0xd0
 8006ada:	187a      	adds	r2, r7, r1
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	1d7b      	adds	r3, r7, #5
 8006ae0:	33ff      	adds	r3, #255	@ 0xff
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	187b      	adds	r3, r7, r1
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	22c4      	movs	r2, #196	@ 0xc4
 8006af0:	18ba      	adds	r2, r7, r2
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d000      	beq.n	8006afe <USB_EPStartXfer+0x10aa>
 8006afc:	e08c      	b.n	8006c18 <USB_EPStartXfer+0x11c4>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	21bc      	movs	r1, #188	@ 0xbc
 8006b02:	187a      	adds	r2, r7, r1
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2250      	movs	r2, #80	@ 0x50
 8006b0a:	5a9b      	ldrh	r3, [r3, r2]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	001a      	movs	r2, r3
 8006b10:	187b      	adds	r3, r7, r1
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	189b      	adds	r3, r3, r2
 8006b16:	187a      	adds	r2, r7, r1
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	00da      	lsls	r2, r3, #3
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	18d3      	adds	r3, r2, r3
 8006b26:	4a37      	ldr	r2, [pc, #220]	@ (8006c04 <USB_EPStartXfer+0x11b0>)
 8006b28:	4694      	mov	ip, r2
 8006b2a:	4463      	add	r3, ip
 8006b2c:	21b8      	movs	r1, #184	@ 0xb8
 8006b2e:	187a      	adds	r2, r7, r1
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	187b      	adds	r3, r7, r1
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	059b      	lsls	r3, r3, #22
 8006b3c:	0d9b      	lsrs	r3, r3, #22
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	187b      	adds	r3, r7, r1
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	1d7b      	adds	r3, r7, #5
 8006b48:	33ff      	adds	r3, #255	@ 0xff
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b4e:	d925      	bls.n	8006b9c <USB_EPStartXfer+0x1148>
 8006b50:	1d7b      	adds	r3, r7, #5
 8006b52:	33ff      	adds	r3, #255	@ 0xff
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	21d8      	movs	r1, #216	@ 0xd8
 8006b5a:	187a      	adds	r2, r7, r1
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	1d7b      	adds	r3, r7, #5
 8006b60:	33ff      	adds	r3, #255	@ 0xff
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	221f      	movs	r2, #31
 8006b66:	4013      	ands	r3, r2
 8006b68:	d104      	bne.n	8006b74 <USB_EPStartXfer+0x1120>
 8006b6a:	187b      	adds	r3, r7, r1
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	187a      	adds	r2, r7, r1
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	21b8      	movs	r1, #184	@ 0xb8
 8006b76:	187b      	adds	r3, r7, r1
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	23d8      	movs	r3, #216	@ 0xd8
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	029b      	lsls	r3, r3, #10
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	4a21      	ldr	r2, [pc, #132]	@ (8006c14 <USB_EPStartXfer+0x11c0>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	187b      	adds	r3, r7, r1
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	801a      	strh	r2, [r3, #0]
 8006b9a:	e062      	b.n	8006c62 <USB_EPStartXfer+0x120e>
 8006b9c:	1d7b      	adds	r3, r7, #5
 8006b9e:	33ff      	adds	r3, #255	@ 0xff
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10b      	bne.n	8006bbe <USB_EPStartXfer+0x116a>
 8006ba6:	21b8      	movs	r1, #184	@ 0xb8
 8006ba8:	187b      	adds	r3, r7, r1
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	4a18      	ldr	r2, [pc, #96]	@ (8006c14 <USB_EPStartXfer+0x11c0>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	e051      	b.n	8006c62 <USB_EPStartXfer+0x120e>
 8006bbe:	1d7b      	adds	r3, r7, #5
 8006bc0:	33ff      	adds	r3, #255	@ 0xff
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	085b      	lsrs	r3, r3, #1
 8006bc6:	21d8      	movs	r1, #216	@ 0xd8
 8006bc8:	187a      	adds	r2, r7, r1
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	1d7b      	adds	r3, r7, #5
 8006bce:	33ff      	adds	r3, #255	@ 0xff
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <USB_EPStartXfer+0x118e>
 8006bd8:	187b      	adds	r3, r7, r1
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	187a      	adds	r2, r7, r1
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	21b8      	movs	r1, #184	@ 0xb8
 8006be4:	187b      	adds	r3, r7, r1
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	23d8      	movs	r3, #216	@ 0xd8
 8006bee:	18fb      	adds	r3, r7, r3
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	029b      	lsls	r3, r3, #10
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	187b      	adds	r3, r7, r1
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	e02e      	b.n	8006c62 <USB_EPStartXfer+0x120e>
 8006c04:	00000406 	.word	0x00000406
 8006c08:	ffff8f8f 	.word	0xffff8f8f
 8006c0c:	ffff80c0 	.word	0xffff80c0
 8006c10:	00000402 	.word	0x00000402
 8006c14:	ffff8000 	.word	0xffff8000
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d120      	bne.n	8006c62 <USB_EPStartXfer+0x120e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2250      	movs	r2, #80	@ 0x50
 8006c24:	5a9b      	ldrh	r3, [r3, r2]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	001a      	movs	r2, r3
 8006c2a:	21c4      	movs	r1, #196	@ 0xc4
 8006c2c:	187b      	adds	r3, r7, r1
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	189b      	adds	r3, r3, r2
 8006c32:	187a      	adds	r2, r7, r1
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	00da      	lsls	r2, r3, #3
 8006c3c:	187b      	adds	r3, r7, r1
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	18d3      	adds	r3, r2, r3
 8006c42:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb8 <USB_EPStartXfer+0x1264>)
 8006c44:	4694      	mov	ip, r2
 8006c46:	4463      	add	r3, ip
 8006c48:	21c0      	movs	r1, #192	@ 0xc0
 8006c4a:	187a      	adds	r2, r7, r1
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	1d7b      	adds	r3, r7, #5
 8006c50:	33ff      	adds	r3, #255	@ 0xff
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	187b      	adds	r3, r7, r1
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	e001      	b.n	8006c62 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e025      	b.n	8006cae <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	18d3      	adds	r3, r2, r3
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	208a      	movs	r0, #138	@ 0x8a
 8006c72:	183b      	adds	r3, r7, r0
 8006c74:	4911      	ldr	r1, [pc, #68]	@ (8006cbc <USB_EPStartXfer+0x1268>)
 8006c76:	400a      	ands	r2, r1
 8006c78:	801a      	strh	r2, [r3, #0]
 8006c7a:	183b      	adds	r3, r7, r0
 8006c7c:	183a      	adds	r2, r7, r0
 8006c7e:	8812      	ldrh	r2, [r2, #0]
 8006c80:	2180      	movs	r1, #128	@ 0x80
 8006c82:	0149      	lsls	r1, r1, #5
 8006c84:	404a      	eors	r2, r1
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	183b      	adds	r3, r7, r0
 8006c8a:	183a      	adds	r2, r7, r0
 8006c8c:	8812      	ldrh	r2, [r2, #0]
 8006c8e:	2180      	movs	r1, #128	@ 0x80
 8006c90:	0189      	lsls	r1, r1, #6
 8006c92:	404a      	eors	r2, r1
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	18d3      	adds	r3, r2, r3
 8006ca0:	183a      	adds	r2, r7, r0
 8006ca2:	8812      	ldrh	r2, [r2, #0]
 8006ca4:	4906      	ldr	r1, [pc, #24]	@ (8006cc0 <USB_EPStartXfer+0x126c>)
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	b292      	uxth	r2, r2
 8006caa:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	0018      	movs	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b043      	add	sp, #268	@ 0x10c
 8006cb4:	bd90      	pop	{r4, r7, pc}
 8006cb6:	46c0      	nop			@ (mov r8, r8)
 8006cb8:	00000406 	.word	0x00000406
 8006cbc:	ffffbf8f 	.word	0xffffbf8f
 8006cc0:	ffff8080 	.word	0xffff8080

08006cc4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01d      	beq.n	8006d12 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	18d3      	adds	r3, r2, r3
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	200c      	movs	r0, #12
 8006ce6:	183b      	adds	r3, r7, r0
 8006ce8:	491b      	ldr	r1, [pc, #108]	@ (8006d58 <USB_EPSetStall+0x94>)
 8006cea:	400a      	ands	r2, r1
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	183b      	adds	r3, r7, r0
 8006cf0:	183a      	adds	r2, r7, r0
 8006cf2:	8812      	ldrh	r2, [r2, #0]
 8006cf4:	2110      	movs	r1, #16
 8006cf6:	404a      	eors	r2, r1
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	18d3      	adds	r3, r2, r3
 8006d04:	183a      	adds	r2, r7, r0
 8006d06:	8812      	ldrh	r2, [r2, #0]
 8006d08:	4914      	ldr	r1, [pc, #80]	@ (8006d5c <USB_EPSetStall+0x98>)
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	b292      	uxth	r2, r2
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	e01d      	b.n	8006d4e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	18d3      	adds	r3, r2, r3
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	200e      	movs	r0, #14
 8006d22:	183b      	adds	r3, r7, r0
 8006d24:	490e      	ldr	r1, [pc, #56]	@ (8006d60 <USB_EPSetStall+0x9c>)
 8006d26:	400a      	ands	r2, r1
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	183b      	adds	r3, r7, r0
 8006d2c:	183a      	adds	r2, r7, r0
 8006d2e:	8812      	ldrh	r2, [r2, #0]
 8006d30:	2180      	movs	r1, #128	@ 0x80
 8006d32:	0149      	lsls	r1, r1, #5
 8006d34:	404a      	eors	r2, r1
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	18d3      	adds	r3, r2, r3
 8006d42:	183a      	adds	r2, r7, r0
 8006d44:	8812      	ldrh	r2, [r2, #0]
 8006d46:	4905      	ldr	r1, [pc, #20]	@ (8006d5c <USB_EPSetStall+0x98>)
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b004      	add	sp, #16
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	ffff8fbf 	.word	0xffff8fbf
 8006d5c:	ffff8080 	.word	0xffff8080
 8006d60:	ffffbf8f 	.word	0xffffbf8f

08006d64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	7b1b      	ldrb	r3, [r3, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d000      	beq.n	8006d78 <USB_EPClearStall+0x14>
 8006d76:	e095      	b.n	8006ea4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d046      	beq.n	8006e0e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	18d2      	adds	r2, r2, r3
 8006d8a:	2110      	movs	r1, #16
 8006d8c:	187b      	adds	r3, r7, r1
 8006d8e:	8812      	ldrh	r2, [r2, #0]
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	187b      	adds	r3, r7, r1
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	2240      	movs	r2, #64	@ 0x40
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d016      	beq.n	8006dca <USB_EPClearStall+0x66>
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	18d3      	adds	r3, r2, r3
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	200e      	movs	r0, #14
 8006dac:	183b      	adds	r3, r7, r0
 8006dae:	4940      	ldr	r1, [pc, #256]	@ (8006eb0 <USB_EPClearStall+0x14c>)
 8006db0:	400a      	ands	r2, r1
 8006db2:	801a      	strh	r2, [r3, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	18d3      	adds	r3, r2, r3
 8006dbe:	183a      	adds	r2, r7, r0
 8006dc0:	8812      	ldrh	r2, [r2, #0]
 8006dc2:	493c      	ldr	r1, [pc, #240]	@ (8006eb4 <USB_EPClearStall+0x150>)
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	b292      	uxth	r2, r2
 8006dc8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	78db      	ldrb	r3, [r3, #3]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d068      	beq.n	8006ea4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	18d3      	adds	r3, r2, r3
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	200c      	movs	r0, #12
 8006de2:	183b      	adds	r3, r7, r0
 8006de4:	4934      	ldr	r1, [pc, #208]	@ (8006eb8 <USB_EPClearStall+0x154>)
 8006de6:	400a      	ands	r2, r1
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	183b      	adds	r3, r7, r0
 8006dec:	183a      	adds	r2, r7, r0
 8006dee:	8812      	ldrh	r2, [r2, #0]
 8006df0:	2120      	movs	r1, #32
 8006df2:	404a      	eors	r2, r1
 8006df4:	801a      	strh	r2, [r3, #0]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	18d3      	adds	r3, r2, r3
 8006e00:	183a      	adds	r2, r7, r0
 8006e02:	8812      	ldrh	r2, [r2, #0]
 8006e04:	492d      	ldr	r1, [pc, #180]	@ (8006ebc <USB_EPClearStall+0x158>)
 8006e06:	430a      	orrs	r2, r1
 8006e08:	b292      	uxth	r2, r2
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	e04a      	b.n	8006ea4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	18d2      	adds	r2, r2, r3
 8006e18:	2116      	movs	r1, #22
 8006e1a:	187b      	adds	r3, r7, r1
 8006e1c:	8812      	ldrh	r2, [r2, #0]
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	187b      	adds	r3, r7, r1
 8006e22:	881a      	ldrh	r2, [r3, #0]
 8006e24:	2380      	movs	r3, #128	@ 0x80
 8006e26:	01db      	lsls	r3, r3, #7
 8006e28:	4013      	ands	r3, r2
 8006e2a:	d016      	beq.n	8006e5a <USB_EPClearStall+0xf6>
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	18d3      	adds	r3, r2, r3
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	2014      	movs	r0, #20
 8006e3c:	183b      	adds	r3, r7, r0
 8006e3e:	491c      	ldr	r1, [pc, #112]	@ (8006eb0 <USB_EPClearStall+0x14c>)
 8006e40:	400a      	ands	r2, r1
 8006e42:	801a      	strh	r2, [r3, #0]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	18d3      	adds	r3, r2, r3
 8006e4e:	183a      	adds	r2, r7, r0
 8006e50:	8812      	ldrh	r2, [r2, #0]
 8006e52:	491b      	ldr	r1, [pc, #108]	@ (8006ec0 <USB_EPClearStall+0x15c>)
 8006e54:	430a      	orrs	r2, r1
 8006e56:	b292      	uxth	r2, r2
 8006e58:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	18d3      	adds	r3, r2, r3
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	2012      	movs	r0, #18
 8006e6a:	183b      	adds	r3, r7, r0
 8006e6c:	4915      	ldr	r1, [pc, #84]	@ (8006ec4 <USB_EPClearStall+0x160>)
 8006e6e:	400a      	ands	r2, r1
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	183b      	adds	r3, r7, r0
 8006e74:	183a      	adds	r2, r7, r0
 8006e76:	8812      	ldrh	r2, [r2, #0]
 8006e78:	2180      	movs	r1, #128	@ 0x80
 8006e7a:	0149      	lsls	r1, r1, #5
 8006e7c:	404a      	eors	r2, r1
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	183b      	adds	r3, r7, r0
 8006e82:	183a      	adds	r2, r7, r0
 8006e84:	8812      	ldrh	r2, [r2, #0]
 8006e86:	2180      	movs	r1, #128	@ 0x80
 8006e88:	0189      	lsls	r1, r1, #6
 8006e8a:	404a      	eors	r2, r1
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	18d3      	adds	r3, r2, r3
 8006e98:	183a      	adds	r2, r7, r0
 8006e9a:	8812      	ldrh	r2, [r2, #0]
 8006e9c:	4907      	ldr	r1, [pc, #28]	@ (8006ebc <USB_EPClearStall+0x158>)
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	b292      	uxth	r2, r2
 8006ea2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b006      	add	sp, #24
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	46c0      	nop			@ (mov r8, r8)
 8006eb0:	ffff8f8f 	.word	0xffff8f8f
 8006eb4:	ffff80c0 	.word	0xffff80c0
 8006eb8:	ffff8fbf 	.word	0xffff8fbf
 8006ebc:	ffff8080 	.word	0xffff8080
 8006ec0:	ffffc080 	.word	0xffffc080
 8006ec4:	ffffbf8f 	.word	0xffffbf8f

08006ec8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	000a      	movs	r2, r1
 8006ed2:	1cfb      	adds	r3, r7, #3
 8006ed4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006ed6:	1cfb      	adds	r3, r7, #3
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	224c      	movs	r2, #76	@ 0x4c
 8006ee2:	2180      	movs	r1, #128	@ 0x80
 8006ee4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	0018      	movs	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	b002      	add	sp, #8
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2258      	movs	r2, #88	@ 0x58
 8006efc:	5a9b      	ldrh	r3, [r3, r2]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	4a05      	ldr	r2, [pc, #20]	@ (8006f18 <USB_DevConnect+0x28>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	b299      	uxth	r1, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2258      	movs	r2, #88	@ 0x58
 8006f0a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	0018      	movs	r0, r3
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b002      	add	sp, #8
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	46c0      	nop			@ (mov r8, r8)
 8006f18:	ffff8000 	.word	0xffff8000

08006f1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2244      	movs	r2, #68	@ 0x44
 8006f28:	5a9b      	ldrh	r3, [r3, r2]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
}
 8006f30:	0018      	movs	r0, r3
 8006f32:	46bd      	mov	sp, r7
 8006f34:	b004      	add	sp, #16
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	@ 0x28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	0019      	movs	r1, r3
 8006f44:	1dbb      	adds	r3, r7, #6
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	1d3b      	adds	r3, r7, #4
 8006f4a:	1c0a      	adds	r2, r1, #0
 8006f4c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f4e:	1d3b      	adds	r3, r7, #4
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f60:	1dbb      	adds	r3, r7, #6
 8006f62:	881a      	ldrh	r2, [r3, #0]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	18d3      	adds	r3, r2, r3
 8006f68:	2280      	movs	r2, #128	@ 0x80
 8006f6a:	00d2      	lsls	r2, r2, #3
 8006f6c:	4694      	mov	ip, r2
 8006f6e:	4463      	add	r3, ip
 8006f70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f76:	e021      	b.n	8006fbc <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	2112      	movs	r1, #18
 8006f7e:	187b      	adds	r3, r7, r1
 8006f80:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	3301      	adds	r3, #1
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	b21b      	sxth	r3, r3
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	b21a      	sxth	r2, r3
 8006f8e:	187b      	adds	r3, r7, r1
 8006f90:	2000      	movs	r0, #0
 8006f92:	5e1b      	ldrsh	r3, [r3, r0]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	b21a      	sxth	r2, r3
 8006f98:	187b      	adds	r3, r7, r1
 8006f9a:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	187a      	adds	r2, r7, r1
 8006fa0:	8812      	ldrh	r2, [r2, #0]
 8006fa2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	3302      	adds	r3, #2
 8006fa8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1da      	bne.n	8006f78 <USB_WritePMA+0x40>
  }
}
 8006fc2:	46c0      	nop			@ (mov r8, r8)
 8006fc4:	46c0      	nop			@ (mov r8, r8)
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	b00a      	add	sp, #40	@ 0x28
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	@ 0x28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	1dbb      	adds	r3, r7, #6
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	1d3b      	adds	r3, r7, #4
 8006fde:	1c0a      	adds	r2, r1, #0
 8006fe0:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006fe2:	1d3b      	adds	r3, r7, #4
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ff4:	1dbb      	adds	r3, r7, #6
 8006ff6:	881a      	ldrh	r2, [r3, #0]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	18d3      	adds	r3, r2, r3
 8006ffc:	2280      	movs	r2, #128	@ 0x80
 8006ffe:	00d2      	lsls	r2, r2, #3
 8007000:	4694      	mov	ip, r2
 8007002:	4463      	add	r3, ip
 8007004:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
 800700a:	e018      	b.n	800703e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	3302      	adds	r3, #2
 8007018:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	b2da      	uxtb	r2, r3
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	3301      	adds	r3, #1
 8007026:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	b2da      	uxtb	r2, r3
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	3301      	adds	r3, #1
 8007036:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	3b01      	subs	r3, #1
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e3      	bne.n	800700c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007044:	1d3b      	adds	r3, r7, #4
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	4013      	ands	r3, r2
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	701a      	strb	r2, [r3, #0]
  }
}
 8007062:	46c0      	nop			@ (mov r8, r8)
 8007064:	46bd      	mov	sp, r7
 8007066:	b00a      	add	sp, #40	@ 0x28
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800706a:	b590      	push	{r4, r7, lr}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	000a      	movs	r2, r1
 8007074:	1cfb      	adds	r3, r7, #3
 8007076:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8007078:	240f      	movs	r4, #15
 800707a:	193b      	adds	r3, r7, r4
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	2302      	movs	r3, #2
 8007084:	2203      	movs	r2, #3
 8007086:	2181      	movs	r1, #129	@ 0x81
 8007088:	f001 ff11 	bl	8008eae <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	2302      	movs	r3, #2
 8007096:	2203      	movs	r2, #3
 8007098:	2101      	movs	r1, #1
 800709a:	f001 ff08 	bl	8008eae <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	23b6      	movs	r3, #182	@ 0xb6
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	2101      	movs	r1, #1
 80070a6:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80070a8:	2018      	movs	r0, #24
 80070aa:	f002 f8c1 	bl	8009230 <malloc>
 80070ae:	0003      	movs	r3, r0
 80070b0:	0019      	movs	r1, r3
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	23ae      	movs	r3, #174	@ 0xae
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	23ae      	movs	r3, #174	@ 0xae
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	58d3      	ldr	r3, [r2, r3]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 80070c6:	193b      	adds	r3, r7, r4
 80070c8:	2201      	movs	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	e013      	b.n	80070f6 <USBD_CUSTOM_HID_Init+0x8c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	23ae      	movs	r3, #174	@ 0xae
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	58d3      	ldr	r3, [r2, r3]
 80070d6:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	23af      	movs	r3, #175	@ 0xaf
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	58d3      	ldr	r3, [r2, r3]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	2302      	movs	r3, #2
 80070f0:	2101      	movs	r1, #1
 80070f2:	f002 f827 	bl	8009144 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80070f6:	230f      	movs	r3, #15
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	781b      	ldrb	r3, [r3, #0]
}
 80070fc:	0018      	movs	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	b005      	add	sp, #20
 8007102:	bd90      	pop	{r4, r7, pc}

08007104 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	000a      	movs	r2, r1
 800710e:	1cfb      	adds	r3, r7, #3
 8007110:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2181      	movs	r1, #129	@ 0x81
 8007116:	0018      	movs	r0, r3
 8007118:	f001 ff00 	bl	8008f1c <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2101      	movs	r1, #1
 8007126:	0018      	movs	r0, r3
 8007128:	f001 fef8 	bl	8008f1c <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	23b6      	movs	r3, #182	@ 0xb6
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	2100      	movs	r1, #0
 8007134:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	23ae      	movs	r3, #174	@ 0xae
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	58d3      	ldr	r3, [r2, r3]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d011      	beq.n	8007166 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	23af      	movs	r3, #175	@ 0xaf
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	58d3      	ldr	r3, [r2, r3]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	23ae      	movs	r3, #174	@ 0xae
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	58d3      	ldr	r3, [r2, r3]
 8007156:	0018      	movs	r0, r3
 8007158:	f002 f874 	bl	8009244 <free>
    pdev->pClassData = NULL;
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	23ae      	movs	r3, #174	@ 0xae
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	2100      	movs	r1, #0
 8007164:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	0018      	movs	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	b002      	add	sp, #8
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	23ae      	movs	r3, #174	@ 0xae
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	58d3      	ldr	r3, [r2, r3]
 8007182:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007184:	231e      	movs	r3, #30
 8007186:	18fb      	adds	r3, r7, r3
 8007188:	2200      	movs	r2, #0
 800718a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 800718c:	2300      	movs	r3, #0
 800718e:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007190:	230e      	movs	r3, #14
 8007192:	18fb      	adds	r3, r7, r3
 8007194:	2200      	movs	r2, #0
 8007196:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8007198:	2317      	movs	r3, #23
 800719a:	18fb      	adds	r3, r7, r3
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	001a      	movs	r2, r3
 80071a6:	2360      	movs	r3, #96	@ 0x60
 80071a8:	4013      	ands	r3, r2
 80071aa:	d043      	beq.n	8007234 <USBD_CUSTOM_HID_Setup+0xc4>
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d000      	beq.n	80071b2 <USBD_CUSTOM_HID_Setup+0x42>
 80071b0:	e0d7      	b.n	8007362 <USBD_CUSTOM_HID_Setup+0x1f2>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	2b0b      	cmp	r3, #11
 80071b8:	d830      	bhi.n	800721c <USBD_CUSTOM_HID_Setup+0xac>
 80071ba:	009a      	lsls	r2, r3, #2
 80071bc:	4b72      	ldr	r3, [pc, #456]	@ (8007388 <USBD_CUSTOM_HID_Setup+0x218>)
 80071be:	18d3      	adds	r3, r2, r3
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	885b      	ldrh	r3, [r3, #2]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	001a      	movs	r2, r3
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	605a      	str	r2, [r3, #4]
          break;
 80071d0:	e02f      	b.n	8007232 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1d19      	adds	r1, r3, #4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	0018      	movs	r0, r3
 80071dc:	f001 faf9 	bl	80087d2 <USBD_CtlSendData>
          break;
 80071e0:	e027      	b.n	8007232 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	885b      	ldrh	r3, [r3, #2]
 80071e6:	0a1b      	lsrs	r3, r3, #8
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	001a      	movs	r2, r3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	609a      	str	r2, [r3, #8]
          break;
 80071f2:	e01e      	b.n	8007232 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	3308      	adds	r3, #8
 80071f8:	0019      	movs	r1, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	0018      	movs	r0, r3
 8007200:	f001 fae7 	bl	80087d2 <USBD_CtlSendData>
          break;
 8007204:	e015      	b.n	8007232 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2201      	movs	r2, #1
 800720a:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800720c:	6939      	ldr	r1, [r7, #16]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	88da      	ldrh	r2, [r3, #6]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	0018      	movs	r0, r3
 8007216:	f001 fb0f 	bl	8008838 <USBD_CtlPrepareRx>
          break;
 800721a:	e00a      	b.n	8007232 <USBD_CUSTOM_HID_Setup+0xc2>

        default:
          USBD_CtlError(pdev, req);
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	0011      	movs	r1, r2
 8007222:	0018      	movs	r0, r3
 8007224:	f001 fa57 	bl	80086d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007228:	2317      	movs	r3, #23
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	2202      	movs	r2, #2
 800722e:	701a      	strb	r2, [r3, #0]
          break;
 8007230:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8007232:	e0a1      	b.n	8007378 <USBD_CUSTOM_HID_Setup+0x208>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	2b0b      	cmp	r3, #11
 800723a:	d100      	bne.n	800723e <USBD_CUSTOM_HID_Setup+0xce>
 800723c:	e06d      	b.n	800731a <USBD_CUSTOM_HID_Setup+0x1aa>
 800723e:	dd00      	ble.n	8007242 <USBD_CUSTOM_HID_Setup+0xd2>
 8007240:	e083      	b.n	800734a <USBD_CUSTOM_HID_Setup+0x1da>
 8007242:	2b0a      	cmp	r3, #10
 8007244:	d04f      	beq.n	80072e6 <USBD_CUSTOM_HID_Setup+0x176>
 8007246:	dd00      	ble.n	800724a <USBD_CUSTOM_HID_Setup+0xda>
 8007248:	e07f      	b.n	800734a <USBD_CUSTOM_HID_Setup+0x1da>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <USBD_CUSTOM_HID_Setup+0xe4>
 800724e:	2b06      	cmp	r3, #6
 8007250:	d019      	beq.n	8007286 <USBD_CUSTOM_HID_Setup+0x116>
 8007252:	e07a      	b.n	800734a <USBD_CUSTOM_HID_Setup+0x1da>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	23a7      	movs	r3, #167	@ 0xa7
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	5cd3      	ldrb	r3, [r2, r3]
 800725c:	2b03      	cmp	r3, #3
 800725e:	d107      	bne.n	8007270 <USBD_CUSTOM_HID_Setup+0x100>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007260:	230e      	movs	r3, #14
 8007262:	18f9      	adds	r1, r7, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	0018      	movs	r0, r3
 800726a:	f001 fab2 	bl	80087d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800726e:	e077      	b.n	8007360 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	0011      	movs	r1, r2
 8007276:	0018      	movs	r0, r3
 8007278:	f001 fa2d 	bl	80086d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800727c:	2317      	movs	r3, #23
 800727e:	18fb      	adds	r3, r7, r3
 8007280:	2202      	movs	r2, #2
 8007282:	701a      	strb	r2, [r3, #0]
          break;
 8007284:	e06c      	b.n	8007360 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	885b      	ldrh	r3, [r3, #2]
 800728a:	0a1b      	lsrs	r3, r3, #8
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b22      	cmp	r3, #34	@ 0x22
 8007290:	d10f      	bne.n	80072b2 <USBD_CUSTOM_HID_Setup+0x142>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	88db      	ldrh	r3, [r3, #6]
 8007296:	221e      	movs	r2, #30
 8007298:	18ba      	adds	r2, r7, r2
 800729a:	b299      	uxth	r1, r3
 800729c:	2902      	cmp	r1, #2
 800729e:	d900      	bls.n	80072a2 <USBD_CUSTOM_HID_Setup+0x132>
 80072a0:	2302      	movs	r3, #2
 80072a2:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	23af      	movs	r3, #175	@ 0xaf
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	58d3      	ldr	r3, [r2, r3]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	e010      	b.n	80072d4 <USBD_CUSTOM_HID_Setup+0x164>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	885b      	ldrh	r3, [r3, #2]
 80072b6:	0a1b      	lsrs	r3, r3, #8
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b21      	cmp	r3, #33	@ 0x21
 80072bc:	d10a      	bne.n	80072d4 <USBD_CUSTOM_HID_Setup+0x164>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80072be:	4b33      	ldr	r3, [pc, #204]	@ (800738c <USBD_CUSTOM_HID_Setup+0x21c>)
 80072c0:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	88db      	ldrh	r3, [r3, #6]
 80072c6:	221e      	movs	r2, #30
 80072c8:	18ba      	adds	r2, r7, r2
 80072ca:	b299      	uxth	r1, r3
 80072cc:	2909      	cmp	r1, #9
 80072ce:	d900      	bls.n	80072d2 <USBD_CUSTOM_HID_Setup+0x162>
 80072d0:	2309      	movs	r3, #9
 80072d2:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80072d4:	231e      	movs	r3, #30
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	881a      	ldrh	r2, [r3, #0]
 80072da:	69b9      	ldr	r1, [r7, #24]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	0018      	movs	r0, r3
 80072e0:	f001 fa77 	bl	80087d2 <USBD_CtlSendData>
          break;
 80072e4:	e03c      	b.n	8007360 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	23a7      	movs	r3, #167	@ 0xa7
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	5cd3      	ldrb	r3, [r2, r3]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d108      	bne.n	8007304 <USBD_CUSTOM_HID_Setup+0x194>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	330c      	adds	r3, #12
 80072f6:	0019      	movs	r1, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	0018      	movs	r0, r3
 80072fe:	f001 fa68 	bl	80087d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007302:	e02d      	b.n	8007360 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	0011      	movs	r1, r2
 800730a:	0018      	movs	r0, r3
 800730c:	f001 f9e3 	bl	80086d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007310:	2317      	movs	r3, #23
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	2202      	movs	r2, #2
 8007316:	701a      	strb	r2, [r3, #0]
          break;
 8007318:	e022      	b.n	8007360 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	23a7      	movs	r3, #167	@ 0xa7
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	5cd3      	ldrb	r3, [r2, r3]
 8007322:	2b03      	cmp	r3, #3
 8007324:	d106      	bne.n	8007334 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	001a      	movs	r2, r3
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007332:	e015      	b.n	8007360 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	0011      	movs	r1, r2
 800733a:	0018      	movs	r0, r3
 800733c:	f001 f9cb 	bl	80086d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007340:	2317      	movs	r3, #23
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	2202      	movs	r2, #2
 8007346:	701a      	strb	r2, [r3, #0]
          break;
 8007348:	e00a      	b.n	8007360 <USBD_CUSTOM_HID_Setup+0x1f0>

        default:
          USBD_CtlError(pdev, req);
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	0011      	movs	r1, r2
 8007350:	0018      	movs	r0, r3
 8007352:	f001 f9c0 	bl	80086d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007356:	2317      	movs	r3, #23
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	2202      	movs	r2, #2
 800735c:	701a      	strb	r2, [r3, #0]
          break;
 800735e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8007360:	e00a      	b.n	8007378 <USBD_CUSTOM_HID_Setup+0x208>

    default:
      USBD_CtlError(pdev, req);
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	0011      	movs	r1, r2
 8007368:	0018      	movs	r0, r3
 800736a:	f001 f9b4 	bl	80086d6 <USBD_CtlError>
      ret = USBD_FAIL;
 800736e:	2317      	movs	r3, #23
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	2202      	movs	r2, #2
 8007374:	701a      	strb	r2, [r3, #0]
      break;
 8007376:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 8007378:	2317      	movs	r3, #23
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	781b      	ldrb	r3, [r3, #0]
}
 800737e:	0018      	movs	r0, r3
 8007380:	46bd      	mov	sp, r7
 8007382:	b008      	add	sp, #32
 8007384:	bd80      	pop	{r7, pc}
 8007386:	46c0      	nop			@ (mov r8, r8)
 8007388:	080095c4 	.word	0x080095c4
 800738c:	200000d4 	.word	0x200000d4

08007390 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2230      	movs	r2, #48	@ 0x30
 800739c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800739e:	4b02      	ldr	r3, [pc, #8]	@ (80073a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 80073a0:	0018      	movs	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	b002      	add	sp, #8
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000044 	.word	0x20000044

080073ac <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2230      	movs	r2, #48	@ 0x30
 80073b8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80073ba:	4b02      	ldr	r3, [pc, #8]	@ (80073c4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 80073bc:	0018      	movs	r0, r3
 80073be:	46bd      	mov	sp, r7
 80073c0:	b002      	add	sp, #8
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	20000074 	.word	0x20000074

080073c8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2230      	movs	r2, #48	@ 0x30
 80073d4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80073d6:	4b02      	ldr	r3, [pc, #8]	@ (80073e0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	b002      	add	sp, #8
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	200000a4 	.word	0x200000a4

080073e4 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	000a      	movs	r2, r1
 80073ee:	1cfb      	adds	r3, r7, #3
 80073f0:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	23ae      	movs	r3, #174	@ 0xae
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	58d3      	ldr	r3, [r2, r3]
 80073fa:	2200      	movs	r2, #0
 80073fc:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	0018      	movs	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	b002      	add	sp, #8
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	000a      	movs	r2, r1
 8007412:	1cfb      	adds	r3, r7, #3
 8007414:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	23ae      	movs	r3, #174	@ 0xae
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	58d3      	ldr	r3, [r2, r3]
 800741e:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	23af      	movs	r3, #175	@ 0xaf
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	58d3      	ldr	r3, [r2, r3]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	7810      	ldrb	r0, [r2, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	7852      	ldrb	r2, [r2, #1]
 8007432:	0011      	movs	r1, r2
 8007434:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	2302      	movs	r3, #2
 800743c:	2101      	movs	r1, #1
 800743e:	f001 fe81 	bl	8009144 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	0018      	movs	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	b004      	add	sp, #16
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	23ae      	movs	r3, #174	@ 0xae
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	58d3      	ldr	r3, [r2, r3]
 800745c:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d10d      	bne.n	8007482 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	23af      	movs	r3, #175	@ 0xaf
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	58d3      	ldr	r3, [r2, r3]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	7810      	ldrb	r0, [r2, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	7852      	ldrb	r2, [r2, #1]
 8007478:	0011      	movs	r1, r2
 800747a:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	0018      	movs	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	b004      	add	sp, #16
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	220a      	movs	r2, #10
 8007498:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800749a:	4b02      	ldr	r3, [pc, #8]	@ (80074a4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 800749c:	0018      	movs	r0, r3
 800749e:	46bd      	mov	sp, r7
 80074a0:	b002      	add	sp, #8
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	200000e0 	.word	0x200000e0

080074a8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80074b2:	200f      	movs	r0, #15
 80074b4:	183b      	adds	r3, r7, r0
 80074b6:	2202      	movs	r2, #2
 80074b8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	23af      	movs	r3, #175	@ 0xaf
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80074ca:	183b      	adds	r3, r7, r0
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80074d0:	230f      	movs	r3, #15
 80074d2:	18fb      	adds	r3, r7, r3
 80074d4:	781b      	ldrb	r3, [r3, #0]
}
 80074d6:	0018      	movs	r0, r3
 80074d8:	46bd      	mov	sp, r7
 80074da:	b004      	add	sp, #16
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	1dfb      	adds	r3, r7, #7
 80074ea:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80074f2:	2302      	movs	r3, #2
 80074f4:	e020      	b.n	8007538 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	23ad      	movs	r3, #173	@ 0xad
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	58d3      	ldr	r3, [r2, r3]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d004      	beq.n	800750c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	23ad      	movs	r3, #173	@ 0xad
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	2100      	movs	r1, #0
 800750a:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	23ac      	movs	r3, #172	@ 0xac
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	23a7      	movs	r3, #167	@ 0xa7
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	2101      	movs	r1, #1
 8007524:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	1dfa      	adds	r2, r7, #7
 800752a:	7812      	ldrb	r2, [r2, #0]
 800752c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	0018      	movs	r0, r3
 8007532:	f001 fc3f 	bl	8008db4 <USBD_LL_Init>

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	0018      	movs	r0, r3
 800753a:	46bd      	mov	sp, r7
 800753c:	b004      	add	sp, #16
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800754a:	200f      	movs	r0, #15
 800754c:	183b      	adds	r3, r7, r0
 800754e:	2200      	movs	r2, #0
 8007550:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d008      	beq.n	800756a <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	23ad      	movs	r3, #173	@ 0xad
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007562:	183b      	adds	r3, r7, r0
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e003      	b.n	8007572 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800756a:	230f      	movs	r3, #15
 800756c:	18fb      	adds	r3, r7, r3
 800756e:	2202      	movs	r2, #2
 8007570:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007572:	230f      	movs	r3, #15
 8007574:	18fb      	adds	r3, r7, r3
 8007576:	781b      	ldrb	r3, [r3, #0]
}
 8007578:	0018      	movs	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	b004      	add	sp, #16
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	0018      	movs	r0, r3
 800758c:	f001 fc6a 	bl	8008e64 <USBD_LL_Start>

  return USBD_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	0018      	movs	r0, r3
 8007594:	46bd      	mov	sp, r7
 8007596:	b002      	add	sp, #8
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	0018      	movs	r0, r3
 80075a6:	46bd      	mov	sp, r7
 80075a8:	b002      	add	sp, #8
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	000a      	movs	r2, r1
 80075b6:	1cfb      	adds	r3, r7, #3
 80075b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80075ba:	240f      	movs	r4, #15
 80075bc:	193b      	adds	r3, r7, r4
 80075be:	2202      	movs	r2, #2
 80075c0:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	23ad      	movs	r3, #173	@ 0xad
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	58d3      	ldr	r3, [r2, r3]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	23ad      	movs	r3, #173	@ 0xad
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	58d3      	ldr	r3, [r2, r3]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	1cfa      	adds	r2, r7, #3
 80075da:	7811      	ldrb	r1, [r2, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	0010      	movs	r0, r2
 80075e0:	4798      	blx	r3
 80075e2:	1e03      	subs	r3, r0, #0
 80075e4:	d102      	bne.n	80075ec <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80075e6:	193b      	adds	r3, r7, r4
 80075e8:	2200      	movs	r2, #0
 80075ea:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80075ec:	230f      	movs	r3, #15
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	781b      	ldrb	r3, [r3, #0]
}
 80075f2:	0018      	movs	r0, r3
 80075f4:	46bd      	mov	sp, r7
 80075f6:	b005      	add	sp, #20
 80075f8:	bd90      	pop	{r4, r7, pc}

080075fa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	000a      	movs	r2, r1
 8007604:	1cfb      	adds	r3, r7, #3
 8007606:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	23ad      	movs	r3, #173	@ 0xad
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	58d3      	ldr	r3, [r2, r3]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	1cfa      	adds	r2, r7, #3
 8007614:	7811      	ldrb	r1, [r2, #0]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	0010      	movs	r0, r2
 800761a:	4798      	blx	r3

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	0018      	movs	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	b002      	add	sp, #8
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	22aa      	movs	r2, #170	@ 0xaa
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	4694      	mov	ip, r2
 800763a:	4463      	add	r3, ip
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	0011      	movs	r1, r2
 8007640:	0018      	movs	r0, r3
 8007642:	f001 f810 	bl	8008666 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	23a5      	movs	r3, #165	@ 0xa5
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	2101      	movs	r1, #1
 800764e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a23      	ldr	r2, [pc, #140]	@ (80076e0 <USBD_LL_SetupStage+0xb8>)
 8007654:	5a9b      	ldrh	r3, [r3, r2]
 8007656:	0019      	movs	r1, r3
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	23a6      	movs	r3, #166	@ 0xa6
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	23aa      	movs	r3, #170	@ 0xaa
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	5cd3      	ldrb	r3, [r2, r3]
 8007668:	001a      	movs	r2, r3
 800766a:	231f      	movs	r3, #31
 800766c:	4013      	ands	r3, r2
 800766e:	2b02      	cmp	r3, #2
 8007670:	d019      	beq.n	80076a6 <USBD_LL_SetupStage+0x7e>
 8007672:	d822      	bhi.n	80076ba <USBD_LL_SetupStage+0x92>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <USBD_LL_SetupStage+0x56>
 8007678:	2b01      	cmp	r3, #1
 800767a:	d00a      	beq.n	8007692 <USBD_LL_SetupStage+0x6a>
 800767c:	e01d      	b.n	80076ba <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	22aa      	movs	r2, #170	@ 0xaa
 8007682:	0092      	lsls	r2, r2, #2
 8007684:	189a      	adds	r2, r3, r2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	0011      	movs	r1, r2
 800768a:	0018      	movs	r0, r3
 800768c:	f000 fa10 	bl	8007ab0 <USBD_StdDevReq>
      break;
 8007690:	e020      	b.n	80076d4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	22aa      	movs	r2, #170	@ 0xaa
 8007696:	0092      	lsls	r2, r2, #2
 8007698:	189a      	adds	r2, r3, r2
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	0011      	movs	r1, r2
 800769e:	0018      	movs	r0, r3
 80076a0:	f000 fa78 	bl	8007b94 <USBD_StdItfReq>
      break;
 80076a4:	e016      	b.n	80076d4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	22aa      	movs	r2, #170	@ 0xaa
 80076aa:	0092      	lsls	r2, r2, #2
 80076ac:	189a      	adds	r2, r3, r2
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	0011      	movs	r1, r2
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 fac5 	bl	8007c42 <USBD_StdEPReq>
      break;
 80076b8:	e00c      	b.n	80076d4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	23aa      	movs	r3, #170	@ 0xaa
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	5cd3      	ldrb	r3, [r2, r3]
 80076c2:	227f      	movs	r2, #127	@ 0x7f
 80076c4:	4393      	bics	r3, r2
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	0011      	movs	r1, r2
 80076cc:	0018      	movs	r0, r3
 80076ce:	f001 fc50 	bl	8008f72 <USBD_LL_StallEP>
      break;
 80076d2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	0018      	movs	r0, r3
 80076d8:	46bd      	mov	sp, r7
 80076da:	b002      	add	sp, #8
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	46c0      	nop			@ (mov r8, r8)
 80076e0:	000002ae 	.word	0x000002ae

080076e4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	607a      	str	r2, [r7, #4]
 80076ee:	200b      	movs	r0, #11
 80076f0:	183b      	adds	r3, r7, r0
 80076f2:	1c0a      	adds	r2, r1, #0
 80076f4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80076f6:	183b      	adds	r3, r7, r0
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d154      	bne.n	80077a8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3355      	adds	r3, #85	@ 0x55
 8007702:	33ff      	adds	r3, #255	@ 0xff
 8007704:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	23a5      	movs	r3, #165	@ 0xa5
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	58d3      	ldr	r3, [r2, r3]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d139      	bne.n	8007786 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	429a      	cmp	r2, r3
 800771c:	d919      	bls.n	8007752 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	1ad2      	subs	r2, r2, r3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007734:	429a      	cmp	r2, r3
 8007736:	d203      	bcs.n	8007740 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800773c:	b29b      	uxth	r3, r3
 800773e:	e002      	b.n	8007746 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007744:	b29b      	uxth	r3, r3
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	001a      	movs	r2, r3
 800774c:	f001 f898 	bl	8008880 <USBD_CtlContinueRx>
 8007750:	e045      	b.n	80077de <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	23ad      	movs	r3, #173	@ 0xad
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	58d3      	ldr	r3, [r2, r3]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00d      	beq.n	800777c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	23a7      	movs	r3, #167	@ 0xa7
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007768:	2b03      	cmp	r3, #3
 800776a:	d107      	bne.n	800777c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	23ad      	movs	r3, #173	@ 0xad
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	58d3      	ldr	r3, [r2, r3]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	0010      	movs	r0, r2
 800777a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	0018      	movs	r0, r3
 8007780:	f001 f891 	bl	80088a6 <USBD_CtlSendStatus>
 8007784:	e02b      	b.n	80077de <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	23a5      	movs	r3, #165	@ 0xa5
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	58d3      	ldr	r3, [r2, r3]
 800778e:	2b05      	cmp	r3, #5
 8007790:	d125      	bne.n	80077de <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	23a5      	movs	r3, #165	@ 0xa5
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	2100      	movs	r1, #0
 800779a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2100      	movs	r1, #0
 80077a0:	0018      	movs	r0, r3
 80077a2:	f001 fbe6 	bl	8008f72 <USBD_LL_StallEP>
 80077a6:	e01a      	b.n	80077de <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	23ad      	movs	r3, #173	@ 0xad
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	58d3      	ldr	r3, [r2, r3]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d011      	beq.n	80077da <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	23a7      	movs	r3, #167	@ 0xa7
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d10b      	bne.n	80077da <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	23ad      	movs	r3, #173	@ 0xad
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	58d3      	ldr	r3, [r2, r3]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	220b      	movs	r2, #11
 80077ce:	18ba      	adds	r2, r7, r2
 80077d0:	7811      	ldrb	r1, [r2, #0]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	0010      	movs	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	e001      	b.n	80077de <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077da:	2302      	movs	r3, #2
 80077dc:	e000      	b.n	80077e0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	0018      	movs	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b006      	add	sp, #24
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	607a      	str	r2, [r7, #4]
 80077f2:	200b      	movs	r0, #11
 80077f4:	183b      	adds	r3, r7, r0
 80077f6:	1c0a      	adds	r2, r1, #0
 80077f8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80077fa:	183b      	adds	r3, r7, r0
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d000      	beq.n	8007804 <USBD_LL_DataInStage+0x1c>
 8007802:	e08e      	b.n	8007922 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3314      	adds	r3, #20
 8007808:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	23a5      	movs	r3, #165	@ 0xa5
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	58d3      	ldr	r3, [r2, r3]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d164      	bne.n	80078e0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	429a      	cmp	r2, r3
 8007820:	d915      	bls.n	800784e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	1ad2      	subs	r2, r2, r3
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	b29a      	uxth	r2, r3
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	0018      	movs	r0, r3
 800783c:	f000 ffe9 	bl	8008812 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	2300      	movs	r3, #0
 8007844:	2200      	movs	r2, #0
 8007846:	2100      	movs	r1, #0
 8007848:	f001 fc7c 	bl	8009144 <USBD_LL_PrepareReceive>
 800784c:	e059      	b.n	8007902 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	0019      	movs	r1, r3
 8007858:	0010      	movs	r0, r2
 800785a:	f7f8 fcdb 	bl	8000214 <__aeabi_uidivmod>
 800785e:	1e0b      	subs	r3, r1, #0
 8007860:	d11f      	bne.n	80078a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800786a:	429a      	cmp	r2, r3
 800786c:	d319      	bcc.n	80078a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	68f9      	ldr	r1, [r7, #12]
 8007874:	23a6      	movs	r3, #166	@ 0xa6
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800787a:	429a      	cmp	r2, r3
 800787c:	d211      	bcs.n	80078a2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	2100      	movs	r1, #0
 8007884:	0018      	movs	r0, r3
 8007886:	f000 ffc4 	bl	8008812 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	23a6      	movs	r3, #166	@ 0xa6
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	2100      	movs	r1, #0
 8007892:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	2300      	movs	r3, #0
 8007898:	2200      	movs	r2, #0
 800789a:	2100      	movs	r1, #0
 800789c:	f001 fc52 	bl	8009144 <USBD_LL_PrepareReceive>
 80078a0:	e02f      	b.n	8007902 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	23ad      	movs	r3, #173	@ 0xad
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	58d3      	ldr	r3, [r2, r3]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00d      	beq.n	80078cc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	23a7      	movs	r3, #167	@ 0xa7
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d107      	bne.n	80078cc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	23ad      	movs	r3, #173	@ 0xad
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	58d3      	ldr	r3, [r2, r3]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	0010      	movs	r0, r2
 80078ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2180      	movs	r1, #128	@ 0x80
 80078d0:	0018      	movs	r0, r3
 80078d2:	f001 fb4e 	bl	8008f72 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	0018      	movs	r0, r3
 80078da:	f000 fff8 	bl	80088ce <USBD_CtlReceiveStatus>
 80078de:	e010      	b.n	8007902 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	23a5      	movs	r3, #165	@ 0xa5
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	58d3      	ldr	r3, [r2, r3]
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d005      	beq.n	80078f8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	23a5      	movs	r3, #165	@ 0xa5
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2180      	movs	r1, #128	@ 0x80
 80078fc:	0018      	movs	r0, r3
 80078fe:	f001 fb38 	bl	8008f72 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	23a8      	movs	r3, #168	@ 0xa8
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	5cd3      	ldrb	r3, [r2, r3]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d124      	bne.n	8007958 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	0018      	movs	r0, r3
 8007912:	f7ff fe42 	bl	800759a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	23a8      	movs	r3, #168	@ 0xa8
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	2100      	movs	r1, #0
 800791e:	54d1      	strb	r1, [r2, r3]
 8007920:	e01a      	b.n	8007958 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	23ad      	movs	r3, #173	@ 0xad
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	58d3      	ldr	r3, [r2, r3]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d011      	beq.n	8007954 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	23a7      	movs	r3, #167	@ 0xa7
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8007938:	2b03      	cmp	r3, #3
 800793a:	d10b      	bne.n	8007954 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	23ad      	movs	r3, #173	@ 0xad
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	58d3      	ldr	r3, [r2, r3]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	220b      	movs	r2, #11
 8007948:	18ba      	adds	r2, r7, r2
 800794a:	7811      	ldrb	r1, [r2, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	0010      	movs	r0, r2
 8007950:	4798      	blx	r3
 8007952:	e001      	b.n	8007958 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007954:	2302      	movs	r3, #2
 8007956:	e000      	b.n	800795a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	0018      	movs	r0, r3
 800795c:	46bd      	mov	sp, r7
 800795e:	b006      	add	sp, #24
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	2340      	movs	r3, #64	@ 0x40
 800796e:	2200      	movs	r2, #0
 8007970:	2100      	movs	r1, #0
 8007972:	f001 fa9c 	bl	8008eae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	23ac      	movs	r3, #172	@ 0xac
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	2101      	movs	r1, #1
 800797e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	23b2      	movs	r3, #178	@ 0xb2
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	2140      	movs	r1, #64	@ 0x40
 8007988:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	2340      	movs	r3, #64	@ 0x40
 800798e:	2200      	movs	r2, #0
 8007990:	2180      	movs	r1, #128	@ 0x80
 8007992:	f001 fa8c 	bl	8008eae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2240      	movs	r2, #64	@ 0x40
 80079a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	23a7      	movs	r3, #167	@ 0xa7
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	2101      	movs	r1, #1
 80079aa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	23a5      	movs	r3, #165	@ 0xa5
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	2100      	movs	r1, #0
 80079b4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	23a9      	movs	r3, #169	@ 0xa9
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	2100      	movs	r1, #0
 80079c4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	23ae      	movs	r3, #174	@ 0xae
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	58d3      	ldr	r3, [r2, r3]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	23ad      	movs	r3, #173	@ 0xad
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	58d3      	ldr	r3, [r2, r3]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	b2d9      	uxtb	r1, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	0018      	movs	r0, r3
 80079e6:	4790      	blx	r2
  }

  return USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	0018      	movs	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b002      	add	sp, #8
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	000a      	movs	r2, r1
 80079fc:	1cfb      	adds	r3, r7, #3
 80079fe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	1cfa      	adds	r2, r7, #3
 8007a04:	7812      	ldrb	r2, [r2, #0]
 8007a06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b002      	add	sp, #8
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	23a7      	movs	r3, #167	@ 0xa7
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	5cd1      	ldrb	r1, [r2, r3]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a06      	ldr	r2, [pc, #24]	@ (8007a40 <USBD_LL_Suspend+0x2c>)
 8007a28:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	23a7      	movs	r3, #167	@ 0xa7
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	2104      	movs	r1, #4
 8007a32:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	0018      	movs	r0, r3
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	b002      	add	sp, #8
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	46c0      	nop			@ (mov r8, r8)
 8007a40:	0000029d 	.word	0x0000029d

08007a44 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	23a7      	movs	r3, #167	@ 0xa7
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	5cd3      	ldrb	r3, [r2, r3]
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d106      	bne.n	8007a66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a05      	ldr	r2, [pc, #20]	@ (8007a70 <USBD_LL_Resume+0x2c>)
 8007a5c:	5c99      	ldrb	r1, [r3, r2]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	23a7      	movs	r3, #167	@ 0xa7
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	0018      	movs	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	b002      	add	sp, #8
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	0000029d 	.word	0x0000029d

08007a74 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	23a7      	movs	r3, #167	@ 0xa7
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	5cd3      	ldrb	r3, [r2, r3]
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d10e      	bne.n	8007aa6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	23ad      	movs	r3, #173	@ 0xad
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	58d3      	ldr	r3, [r2, r3]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	23ad      	movs	r3, #173	@ 0xad
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	58d3      	ldr	r3, [r2, r3]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	0010      	movs	r0, r2
 8007aa4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b002      	add	sp, #8
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aba:	230f      	movs	r3, #15
 8007abc:	18fb      	adds	r3, r7, r3
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	001a      	movs	r2, r3
 8007ac8:	2360      	movs	r3, #96	@ 0x60
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b40      	cmp	r3, #64	@ 0x40
 8007ace:	d004      	beq.n	8007ada <USBD_StdDevReq+0x2a>
 8007ad0:	d84f      	bhi.n	8007b72 <USBD_StdDevReq+0xc2>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <USBD_StdDevReq+0x3e>
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d14b      	bne.n	8007b72 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	23ad      	movs	r3, #173	@ 0xad
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	58d3      	ldr	r3, [r2, r3]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	0010      	movs	r0, r2
 8007aea:	4798      	blx	r3
      break;
 8007aec:	e048      	b.n	8007b80 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	2b09      	cmp	r3, #9
 8007af4:	d835      	bhi.n	8007b62 <USBD_StdDevReq+0xb2>
 8007af6:	009a      	lsls	r2, r3, #2
 8007af8:	4b25      	ldr	r3, [pc, #148]	@ (8007b90 <USBD_StdDevReq+0xe0>)
 8007afa:	18d3      	adds	r3, r2, r3
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	0011      	movs	r1, r2
 8007b06:	0018      	movs	r0, r3
 8007b08:	f000 fa52 	bl	8007fb0 <USBD_GetDescriptor>
          break;
 8007b0c:	e030      	b.n	8007b70 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	0011      	movs	r1, r2
 8007b14:	0018      	movs	r0, r3
 8007b16:	f000 fbfd 	bl	8008314 <USBD_SetAddress>
          break;
 8007b1a:	e029      	b.n	8007b70 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	0011      	movs	r1, r2
 8007b22:	0018      	movs	r0, r3
 8007b24:	f000 fc4a 	bl	80083bc <USBD_SetConfig>
          break;
 8007b28:	e022      	b.n	8007b70 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	0011      	movs	r1, r2
 8007b30:	0018      	movs	r0, r3
 8007b32:	f000 fce7 	bl	8008504 <USBD_GetConfig>
          break;
 8007b36:	e01b      	b.n	8007b70 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	0011      	movs	r1, r2
 8007b3e:	0018      	movs	r0, r3
 8007b40:	f000 fd1b 	bl	800857a <USBD_GetStatus>
          break;
 8007b44:	e014      	b.n	8007b70 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	0011      	movs	r1, r2
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f000 fd4e 	bl	80085ee <USBD_SetFeature>
          break;
 8007b52:	e00d      	b.n	8007b70 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	0011      	movs	r1, r2
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 fd5d 	bl	800861a <USBD_ClrFeature>
          break;
 8007b60:	e006      	b.n	8007b70 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	0011      	movs	r1, r2
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f000 fdb4 	bl	80086d6 <USBD_CtlError>
          break;
 8007b6e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8007b70:	e006      	b.n	8007b80 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	0011      	movs	r1, r2
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f000 fdac 	bl	80086d6 <USBD_CtlError>
      break;
 8007b7e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8007b80:	230f      	movs	r3, #15
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	781b      	ldrb	r3, [r3, #0]
}
 8007b86:	0018      	movs	r0, r3
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	b004      	add	sp, #16
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	46c0      	nop			@ (mov r8, r8)
 8007b90:	080095f4 	.word	0x080095f4

08007b94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b94:	b5b0      	push	{r4, r5, r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9e:	230f      	movs	r3, #15
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	001a      	movs	r2, r3
 8007bac:	2360      	movs	r3, #96	@ 0x60
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b40      	cmp	r3, #64	@ 0x40
 8007bb2:	d004      	beq.n	8007bbe <USBD_StdItfReq+0x2a>
 8007bb4:	d839      	bhi.n	8007c2a <USBD_StdItfReq+0x96>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <USBD_StdItfReq+0x2a>
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d135      	bne.n	8007c2a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	23a7      	movs	r3, #167	@ 0xa7
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	5cd3      	ldrb	r3, [r2, r3]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d825      	bhi.n	8007c18 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	889b      	ldrh	r3, [r3, #4]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d819      	bhi.n	8007c0a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	23ad      	movs	r3, #173	@ 0xad
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	58d3      	ldr	r3, [r2, r3]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	250f      	movs	r5, #15
 8007be2:	197c      	adds	r4, r7, r5
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	0010      	movs	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	0003      	movs	r3, r0
 8007bee:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	88db      	ldrh	r3, [r3, #6]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d116      	bne.n	8007c26 <USBD_StdItfReq+0x92>
 8007bf8:	197b      	adds	r3, r7, r5
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d112      	bne.n	8007c26 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	0018      	movs	r0, r3
 8007c04:	f000 fe4f 	bl	80088a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c08:	e00d      	b.n	8007c26 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	0011      	movs	r1, r2
 8007c10:	0018      	movs	r0, r3
 8007c12:	f000 fd60 	bl	80086d6 <USBD_CtlError>
          break;
 8007c16:	e006      	b.n	8007c26 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	0011      	movs	r1, r2
 8007c1e:	0018      	movs	r0, r3
 8007c20:	f000 fd59 	bl	80086d6 <USBD_CtlError>
          break;
 8007c24:	e000      	b.n	8007c28 <USBD_StdItfReq+0x94>
          break;
 8007c26:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8007c28:	e006      	b.n	8007c38 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	0011      	movs	r1, r2
 8007c30:	0018      	movs	r0, r3
 8007c32:	f000 fd50 	bl	80086d6 <USBD_CtlError>
      break;
 8007c36:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	b004      	add	sp, #16
 8007c40:	bdb0      	pop	{r4, r5, r7, pc}

08007c42 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c42:	b5b0      	push	{r4, r5, r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4c:	230f      	movs	r3, #15
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	889a      	ldrh	r2, [r3, #4]
 8007c58:	230e      	movs	r3, #14
 8007c5a:	18fb      	adds	r3, r7, r3
 8007c5c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	001a      	movs	r2, r3
 8007c64:	2360      	movs	r3, #96	@ 0x60
 8007c66:	4013      	ands	r3, r2
 8007c68:	2b40      	cmp	r3, #64	@ 0x40
 8007c6a:	d006      	beq.n	8007c7a <USBD_StdEPReq+0x38>
 8007c6c:	d900      	bls.n	8007c70 <USBD_StdEPReq+0x2e>
 8007c6e:	e190      	b.n	8007f92 <USBD_StdEPReq+0x350>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00c      	beq.n	8007c8e <USBD_StdEPReq+0x4c>
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d000      	beq.n	8007c7a <USBD_StdEPReq+0x38>
 8007c78:	e18b      	b.n	8007f92 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	23ad      	movs	r3, #173	@ 0xad
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	58d3      	ldr	r3, [r2, r3]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	0010      	movs	r0, r2
 8007c8a:	4798      	blx	r3
      break;
 8007c8c:	e188      	b.n	8007fa0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	001a      	movs	r2, r3
 8007c94:	2360      	movs	r3, #96	@ 0x60
 8007c96:	4013      	ands	r3, r2
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d10f      	bne.n	8007cbc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	23ad      	movs	r3, #173	@ 0xad
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	58d3      	ldr	r3, [r2, r3]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	250f      	movs	r5, #15
 8007ca8:	197c      	adds	r4, r7, r5
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	0010      	movs	r0, r2
 8007cb0:	4798      	blx	r3
 8007cb2:	0003      	movs	r3, r0
 8007cb4:	7023      	strb	r3, [r4, #0]

        return ret;
 8007cb6:	197b      	adds	r3, r7, r5
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	e174      	b.n	8007fa6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d007      	beq.n	8007cd4 <USBD_StdEPReq+0x92>
 8007cc4:	dd00      	ble.n	8007cc8 <USBD_StdEPReq+0x86>
 8007cc6:	e15c      	b.n	8007f82 <USBD_StdEPReq+0x340>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d100      	bne.n	8007cce <USBD_StdEPReq+0x8c>
 8007ccc:	e092      	b.n	8007df4 <USBD_StdEPReq+0x1b2>
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d04b      	beq.n	8007d6a <USBD_StdEPReq+0x128>
 8007cd2:	e156      	b.n	8007f82 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	23a7      	movs	r3, #167	@ 0xa7
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	5cd3      	ldrb	r3, [r2, r3]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d002      	beq.n	8007ce6 <USBD_StdEPReq+0xa4>
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d01d      	beq.n	8007d20 <USBD_StdEPReq+0xde>
 8007ce4:	e039      	b.n	8007d5a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ce6:	220e      	movs	r2, #14
 8007ce8:	18bb      	adds	r3, r7, r2
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d010      	beq.n	8007d12 <USBD_StdEPReq+0xd0>
 8007cf0:	18bb      	adds	r3, r7, r2
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b80      	cmp	r3, #128	@ 0x80
 8007cf6:	d00c      	beq.n	8007d12 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cf8:	18bb      	adds	r3, r7, r2
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	0011      	movs	r1, r2
 8007d00:	0018      	movs	r0, r3
 8007d02:	f001 f936 	bl	8008f72 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2180      	movs	r1, #128	@ 0x80
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f001 f931 	bl	8008f72 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d10:	e02a      	b.n	8007d68 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	0011      	movs	r1, r2
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f000 fcdc 	bl	80086d6 <USBD_CtlError>
              break;
 8007d1e:	e023      	b.n	8007d68 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	885b      	ldrh	r3, [r3, #2]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d113      	bne.n	8007d50 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8007d28:	220e      	movs	r2, #14
 8007d2a:	18bb      	adds	r3, r7, r2
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00e      	beq.n	8007d50 <USBD_StdEPReq+0x10e>
 8007d32:	18bb      	adds	r3, r7, r2
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b80      	cmp	r3, #128	@ 0x80
 8007d38:	d00a      	beq.n	8007d50 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	88db      	ldrh	r3, [r3, #6]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d106      	bne.n	8007d50 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007d42:	18bb      	adds	r3, r7, r2
 8007d44:	781a      	ldrb	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	0011      	movs	r1, r2
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	f001 f911 	bl	8008f72 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	0018      	movs	r0, r3
 8007d54:	f000 fda7 	bl	80088a6 <USBD_CtlSendStatus>

              break;
 8007d58:	e006      	b.n	8007d68 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	0011      	movs	r1, r2
 8007d60:	0018      	movs	r0, r3
 8007d62:	f000 fcb8 	bl	80086d6 <USBD_CtlError>
              break;
 8007d66:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8007d68:	e112      	b.n	8007f90 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	23a7      	movs	r3, #167	@ 0xa7
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	5cd3      	ldrb	r3, [r2, r3]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d002      	beq.n	8007d7c <USBD_StdEPReq+0x13a>
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d01d      	beq.n	8007db6 <USBD_StdEPReq+0x174>
 8007d7a:	e032      	b.n	8007de2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d7c:	220e      	movs	r2, #14
 8007d7e:	18bb      	adds	r3, r7, r2
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d010      	beq.n	8007da8 <USBD_StdEPReq+0x166>
 8007d86:	18bb      	adds	r3, r7, r2
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b80      	cmp	r3, #128	@ 0x80
 8007d8c:	d00c      	beq.n	8007da8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d8e:	18bb      	adds	r3, r7, r2
 8007d90:	781a      	ldrb	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	0011      	movs	r1, r2
 8007d96:	0018      	movs	r0, r3
 8007d98:	f001 f8eb 	bl	8008f72 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2180      	movs	r1, #128	@ 0x80
 8007da0:	0018      	movs	r0, r3
 8007da2:	f001 f8e6 	bl	8008f72 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007da6:	e024      	b.n	8007df2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	0011      	movs	r1, r2
 8007dae:	0018      	movs	r0, r3
 8007db0:	f000 fc91 	bl	80086d6 <USBD_CtlError>
              break;
 8007db4:	e01d      	b.n	8007df2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	885b      	ldrh	r3, [r3, #2]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d118      	bne.n	8007df0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007dbe:	210e      	movs	r1, #14
 8007dc0:	187b      	adds	r3, r7, r1
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	227f      	movs	r2, #127	@ 0x7f
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	d006      	beq.n	8007dd8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dca:	187b      	adds	r3, r7, r1
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	0011      	movs	r1, r2
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f001 f8f8 	bl	8008fc8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	0018      	movs	r0, r3
 8007ddc:	f000 fd63 	bl	80088a6 <USBD_CtlSendStatus>
              }
              break;
 8007de0:	e006      	b.n	8007df0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	0011      	movs	r1, r2
 8007de8:	0018      	movs	r0, r3
 8007dea:	f000 fc74 	bl	80086d6 <USBD_CtlError>
              break;
 8007dee:	e000      	b.n	8007df2 <USBD_StdEPReq+0x1b0>
              break;
 8007df0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8007df2:	e0cd      	b.n	8007f90 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	23a7      	movs	r3, #167	@ 0xa7
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	5cd3      	ldrb	r3, [r2, r3]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d002      	beq.n	8007e06 <USBD_StdEPReq+0x1c4>
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d03c      	beq.n	8007e7e <USBD_StdEPReq+0x23c>
 8007e04:	e0b5      	b.n	8007f72 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e06:	220e      	movs	r2, #14
 8007e08:	18bb      	adds	r3, r7, r2
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00a      	beq.n	8007e26 <USBD_StdEPReq+0x1e4>
 8007e10:	18bb      	adds	r3, r7, r2
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b80      	cmp	r3, #128	@ 0x80
 8007e16:	d006      	beq.n	8007e26 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	0011      	movs	r1, r2
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f000 fc59 	bl	80086d6 <USBD_CtlError>
                break;
 8007e24:	e0ac      	b.n	8007f80 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e26:	220e      	movs	r2, #14
 8007e28:	18bb      	adds	r3, r7, r2
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	da0c      	bge.n	8007e4c <USBD_StdEPReq+0x20a>
 8007e32:	18bb      	adds	r3, r7, r2
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	227f      	movs	r2, #127	@ 0x7f
 8007e38:	401a      	ands	r2, r3
 8007e3a:	0013      	movs	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	189b      	adds	r3, r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	3310      	adds	r3, #16
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	18d3      	adds	r3, r2, r3
 8007e48:	3304      	adds	r3, #4
 8007e4a:	e00d      	b.n	8007e68 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e4c:	230e      	movs	r3, #14
 8007e4e:	18fb      	adds	r3, r7, r3
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	227f      	movs	r2, #127	@ 0x7f
 8007e54:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e56:	0013      	movs	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	189b      	adds	r3, r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	3351      	adds	r3, #81	@ 0x51
 8007e60:	33ff      	adds	r3, #255	@ 0xff
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	18d3      	adds	r3, r2, r3
 8007e66:	3304      	adds	r3, #4
 8007e68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	0018      	movs	r0, r3
 8007e78:	f000 fcab 	bl	80087d2 <USBD_CtlSendData>
              break;
 8007e7c:	e080      	b.n	8007f80 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e7e:	220e      	movs	r2, #14
 8007e80:	18bb      	adds	r3, r7, r2
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b25b      	sxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	da14      	bge.n	8007eb4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e8a:	18bb      	adds	r3, r7, r2
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	220f      	movs	r2, #15
 8007e90:	401a      	ands	r2, r3
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	0013      	movs	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	189b      	adds	r3, r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	18cb      	adds	r3, r1, r3
 8007e9e:	3318      	adds	r3, #24
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d11e      	bne.n	8007ee4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	0011      	movs	r1, r2
 8007eac:	0018      	movs	r0, r3
 8007eae:	f000 fc12 	bl	80086d6 <USBD_CtlError>
                  break;
 8007eb2:	e065      	b.n	8007f80 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007eb4:	230e      	movs	r3, #14
 8007eb6:	18fb      	adds	r3, r7, r3
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	220f      	movs	r2, #15
 8007ebc:	401a      	ands	r2, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	23ac      	movs	r3, #172	@ 0xac
 8007ec2:	0059      	lsls	r1, r3, #1
 8007ec4:	0013      	movs	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	189b      	adds	r3, r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	18c3      	adds	r3, r0, r3
 8007ece:	185b      	adds	r3, r3, r1
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	0011      	movs	r1, r2
 8007edc:	0018      	movs	r0, r3
 8007ede:	f000 fbfa 	bl	80086d6 <USBD_CtlError>
                  break;
 8007ee2:	e04d      	b.n	8007f80 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ee4:	220e      	movs	r2, #14
 8007ee6:	18bb      	adds	r3, r7, r2
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	b25b      	sxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	da0c      	bge.n	8007f0a <USBD_StdEPReq+0x2c8>
 8007ef0:	18bb      	adds	r3, r7, r2
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	227f      	movs	r2, #127	@ 0x7f
 8007ef6:	401a      	ands	r2, r3
 8007ef8:	0013      	movs	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	189b      	adds	r3, r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	3310      	adds	r3, #16
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	18d3      	adds	r3, r2, r3
 8007f06:	3304      	adds	r3, #4
 8007f08:	e00d      	b.n	8007f26 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f0a:	230e      	movs	r3, #14
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	227f      	movs	r2, #127	@ 0x7f
 8007f12:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f14:	0013      	movs	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	189b      	adds	r3, r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	3351      	adds	r3, #81	@ 0x51
 8007f1e:	33ff      	adds	r3, #255	@ 0xff
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	18d3      	adds	r3, r2, r3
 8007f24:	3304      	adds	r3, #4
 8007f26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f28:	220e      	movs	r2, #14
 8007f2a:	18bb      	adds	r3, r7, r2
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <USBD_StdEPReq+0x2f8>
 8007f32:	18bb      	adds	r3, r7, r2
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b80      	cmp	r3, #128	@ 0x80
 8007f38:	d103      	bne.n	8007f42 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	e010      	b.n	8007f64 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007f42:	230e      	movs	r3, #14
 8007f44:	18fb      	adds	r3, r7, r3
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	0011      	movs	r1, r2
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f001 f866 	bl	800901e <USBD_LL_IsStallEP>
 8007f52:	1e03      	subs	r3, r0, #0
 8007f54:	d003      	beq.n	8007f5e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	e002      	b.n	8007f64 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f64:	68b9      	ldr	r1, [r7, #8]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2202      	movs	r2, #2
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f000 fc31 	bl	80087d2 <USBD_CtlSendData>
              break;
 8007f70:	e006      	b.n	8007f80 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	0011      	movs	r1, r2
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f000 fbac 	bl	80086d6 <USBD_CtlError>
              break;
 8007f7e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8007f80:	e006      	b.n	8007f90 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	0011      	movs	r1, r2
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f000 fba4 	bl	80086d6 <USBD_CtlError>
          break;
 8007f8e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8007f90:	e006      	b.n	8007fa0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	0011      	movs	r1, r2
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f000 fb9c 	bl	80086d6 <USBD_CtlError>
      break;
 8007f9e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8007fa0:	230f      	movs	r3, #15
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	781b      	ldrb	r3, [r3, #0]
}
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	b004      	add	sp, #16
 8007fac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007fb0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fba:	2308      	movs	r3, #8
 8007fbc:	18fb      	adds	r3, r7, r3
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fc6:	230b      	movs	r3, #11
 8007fc8:	18fb      	adds	r3, r7, r3
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	0a1b      	lsrs	r3, r3, #8
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b07      	cmp	r3, #7
 8007fd8:	d900      	bls.n	8007fdc <USBD_GetDescriptor+0x2c>
 8007fda:	e159      	b.n	8008290 <USBD_GetDescriptor+0x2e0>
 8007fdc:	009a      	lsls	r2, r3, #2
 8007fde:	4bcb      	ldr	r3, [pc, #812]	@ (800830c <USBD_GetDescriptor+0x35c>)
 8007fe0:	18d3      	adds	r3, r2, r3
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	23ac      	movs	r3, #172	@ 0xac
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	58d3      	ldr	r3, [r2, r3]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7c12      	ldrb	r2, [r2, #16]
 8007ff4:	2108      	movs	r1, #8
 8007ff6:	1879      	adds	r1, r7, r1
 8007ff8:	0010      	movs	r0, r2
 8007ffa:	4798      	blx	r3
 8007ffc:	0003      	movs	r3, r0
 8007ffe:	60fb      	str	r3, [r7, #12]
      break;
 8008000:	e153      	b.n	80082aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	7c1b      	ldrb	r3, [r3, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10f      	bne.n	800802a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	23ad      	movs	r3, #173	@ 0xad
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	58d3      	ldr	r3, [r2, r3]
 8008012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008014:	2208      	movs	r2, #8
 8008016:	18ba      	adds	r2, r7, r2
 8008018:	0010      	movs	r0, r2
 800801a:	4798      	blx	r3
 800801c:	0003      	movs	r3, r0
 800801e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	2202      	movs	r2, #2
 8008026:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008028:	e13f      	b.n	80082aa <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	23ad      	movs	r3, #173	@ 0xad
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	58d3      	ldr	r3, [r2, r3]
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	2208      	movs	r2, #8
 8008036:	18ba      	adds	r2, r7, r2
 8008038:	0010      	movs	r0, r2
 800803a:	4798      	blx	r3
 800803c:	0003      	movs	r3, r0
 800803e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	2202      	movs	r2, #2
 8008046:	701a      	strb	r2, [r3, #0]
      break;
 8008048:	e12f      	b.n	80082aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	885b      	ldrh	r3, [r3, #2]
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b05      	cmp	r3, #5
 8008052:	d900      	bls.n	8008056 <USBD_GetDescriptor+0xa6>
 8008054:	e0d0      	b.n	80081f8 <USBD_GetDescriptor+0x248>
 8008056:	009a      	lsls	r2, r3, #2
 8008058:	4bad      	ldr	r3, [pc, #692]	@ (8008310 <USBD_GetDescriptor+0x360>)
 800805a:	18d3      	adds	r3, r2, r3
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	23ac      	movs	r3, #172	@ 0xac
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	58d3      	ldr	r3, [r2, r3]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00d      	beq.n	800808a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	23ac      	movs	r3, #172	@ 0xac
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	58d3      	ldr	r3, [r2, r3]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	7c12      	ldrb	r2, [r2, #16]
 800807c:	2108      	movs	r1, #8
 800807e:	1879      	adds	r1, r7, r1
 8008080:	0010      	movs	r0, r2
 8008082:	4798      	blx	r3
 8008084:	0003      	movs	r3, r0
 8008086:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008088:	e0c3      	b.n	8008212 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	0011      	movs	r1, r2
 8008090:	0018      	movs	r0, r3
 8008092:	f000 fb20 	bl	80086d6 <USBD_CtlError>
            err++;
 8008096:	210b      	movs	r1, #11
 8008098:	187b      	adds	r3, r7, r1
 800809a:	781a      	ldrb	r2, [r3, #0]
 800809c:	187b      	adds	r3, r7, r1
 800809e:	3201      	adds	r2, #1
 80080a0:	701a      	strb	r2, [r3, #0]
          break;
 80080a2:	e0b6      	b.n	8008212 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	23ac      	movs	r3, #172	@ 0xac
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	58d3      	ldr	r3, [r2, r3]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00d      	beq.n	80080ce <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	23ac      	movs	r3, #172	@ 0xac
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	58d3      	ldr	r3, [r2, r3]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	7c12      	ldrb	r2, [r2, #16]
 80080c0:	2108      	movs	r1, #8
 80080c2:	1879      	adds	r1, r7, r1
 80080c4:	0010      	movs	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	0003      	movs	r3, r0
 80080ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080cc:	e0a1      	b.n	8008212 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	0011      	movs	r1, r2
 80080d4:	0018      	movs	r0, r3
 80080d6:	f000 fafe 	bl	80086d6 <USBD_CtlError>
            err++;
 80080da:	210b      	movs	r1, #11
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	187b      	adds	r3, r7, r1
 80080e2:	3201      	adds	r2, #1
 80080e4:	701a      	strb	r2, [r3, #0]
          break;
 80080e6:	e094      	b.n	8008212 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	23ac      	movs	r3, #172	@ 0xac
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	58d3      	ldr	r3, [r2, r3]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00d      	beq.n	8008112 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	23ac      	movs	r3, #172	@ 0xac
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	58d3      	ldr	r3, [r2, r3]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	7c12      	ldrb	r2, [r2, #16]
 8008104:	2108      	movs	r1, #8
 8008106:	1879      	adds	r1, r7, r1
 8008108:	0010      	movs	r0, r2
 800810a:	4798      	blx	r3
 800810c:	0003      	movs	r3, r0
 800810e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008110:	e07f      	b.n	8008212 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	0011      	movs	r1, r2
 8008118:	0018      	movs	r0, r3
 800811a:	f000 fadc 	bl	80086d6 <USBD_CtlError>
            err++;
 800811e:	210b      	movs	r1, #11
 8008120:	187b      	adds	r3, r7, r1
 8008122:	781a      	ldrb	r2, [r3, #0]
 8008124:	187b      	adds	r3, r7, r1
 8008126:	3201      	adds	r2, #1
 8008128:	701a      	strb	r2, [r3, #0]
          break;
 800812a:	e072      	b.n	8008212 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	23ac      	movs	r3, #172	@ 0xac
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	58d3      	ldr	r3, [r2, r3]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00d      	beq.n	8008156 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	23ac      	movs	r3, #172	@ 0xac
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	58d3      	ldr	r3, [r2, r3]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	7c12      	ldrb	r2, [r2, #16]
 8008148:	2108      	movs	r1, #8
 800814a:	1879      	adds	r1, r7, r1
 800814c:	0010      	movs	r0, r2
 800814e:	4798      	blx	r3
 8008150:	0003      	movs	r3, r0
 8008152:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008154:	e05d      	b.n	8008212 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	0011      	movs	r1, r2
 800815c:	0018      	movs	r0, r3
 800815e:	f000 faba 	bl	80086d6 <USBD_CtlError>
            err++;
 8008162:	210b      	movs	r1, #11
 8008164:	187b      	adds	r3, r7, r1
 8008166:	781a      	ldrb	r2, [r3, #0]
 8008168:	187b      	adds	r3, r7, r1
 800816a:	3201      	adds	r2, #1
 800816c:	701a      	strb	r2, [r3, #0]
          break;
 800816e:	e050      	b.n	8008212 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	23ac      	movs	r3, #172	@ 0xac
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	58d3      	ldr	r3, [r2, r3]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	23ac      	movs	r3, #172	@ 0xac
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	58d3      	ldr	r3, [r2, r3]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	7c12      	ldrb	r2, [r2, #16]
 800818c:	2108      	movs	r1, #8
 800818e:	1879      	adds	r1, r7, r1
 8008190:	0010      	movs	r0, r2
 8008192:	4798      	blx	r3
 8008194:	0003      	movs	r3, r0
 8008196:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008198:	e03b      	b.n	8008212 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	0011      	movs	r1, r2
 80081a0:	0018      	movs	r0, r3
 80081a2:	f000 fa98 	bl	80086d6 <USBD_CtlError>
            err++;
 80081a6:	210b      	movs	r1, #11
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	781a      	ldrb	r2, [r3, #0]
 80081ac:	187b      	adds	r3, r7, r1
 80081ae:	3201      	adds	r2, #1
 80081b0:	701a      	strb	r2, [r3, #0]
          break;
 80081b2:	e02e      	b.n	8008212 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	23ac      	movs	r3, #172	@ 0xac
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	58d3      	ldr	r3, [r2, r3]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	23ac      	movs	r3, #172	@ 0xac
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	58d3      	ldr	r3, [r2, r3]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	2108      	movs	r1, #8
 80081d2:	1879      	adds	r1, r7, r1
 80081d4:	0010      	movs	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	0003      	movs	r3, r0
 80081da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081dc:	e019      	b.n	8008212 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	0011      	movs	r1, r2
 80081e4:	0018      	movs	r0, r3
 80081e6:	f000 fa76 	bl	80086d6 <USBD_CtlError>
            err++;
 80081ea:	210b      	movs	r1, #11
 80081ec:	187b      	adds	r3, r7, r1
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	3201      	adds	r2, #1
 80081f4:	701a      	strb	r2, [r3, #0]
          break;
 80081f6:	e00c      	b.n	8008212 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	0011      	movs	r1, r2
 80081fe:	0018      	movs	r0, r3
 8008200:	f000 fa69 	bl	80086d6 <USBD_CtlError>
          err++;
 8008204:	210b      	movs	r1, #11
 8008206:	187b      	adds	r3, r7, r1
 8008208:	781a      	ldrb	r2, [r3, #0]
 800820a:	187b      	adds	r3, r7, r1
 800820c:	3201      	adds	r2, #1
 800820e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008210:	e04b      	b.n	80082aa <USBD_GetDescriptor+0x2fa>
 8008212:	e04a      	b.n	80082aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	7c1b      	ldrb	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10b      	bne.n	8008234 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	23ad      	movs	r3, #173	@ 0xad
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	58d3      	ldr	r3, [r2, r3]
 8008224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008226:	2208      	movs	r2, #8
 8008228:	18ba      	adds	r2, r7, r2
 800822a:	0010      	movs	r0, r2
 800822c:	4798      	blx	r3
 800822e:	0003      	movs	r3, r0
 8008230:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008232:	e03a      	b.n	80082aa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	0011      	movs	r1, r2
 800823a:	0018      	movs	r0, r3
 800823c:	f000 fa4b 	bl	80086d6 <USBD_CtlError>
        err++;
 8008240:	210b      	movs	r1, #11
 8008242:	187b      	adds	r3, r7, r1
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	187b      	adds	r3, r7, r1
 8008248:	3201      	adds	r2, #1
 800824a:	701a      	strb	r2, [r3, #0]
      break;
 800824c:	e02d      	b.n	80082aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7c1b      	ldrb	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10f      	bne.n	8008276 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	23ad      	movs	r3, #173	@ 0xad
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	58d3      	ldr	r3, [r2, r3]
 800825e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008260:	2208      	movs	r2, #8
 8008262:	18ba      	adds	r2, r7, r2
 8008264:	0010      	movs	r0, r2
 8008266:	4798      	blx	r3
 8008268:	0003      	movs	r3, r0
 800826a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3301      	adds	r3, #1
 8008270:	2207      	movs	r2, #7
 8008272:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008274:	e019      	b.n	80082aa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	0011      	movs	r1, r2
 800827c:	0018      	movs	r0, r3
 800827e:	f000 fa2a 	bl	80086d6 <USBD_CtlError>
        err++;
 8008282:	210b      	movs	r1, #11
 8008284:	187b      	adds	r3, r7, r1
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	187b      	adds	r3, r7, r1
 800828a:	3201      	adds	r2, #1
 800828c:	701a      	strb	r2, [r3, #0]
      break;
 800828e:	e00c      	b.n	80082aa <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	0011      	movs	r1, r2
 8008296:	0018      	movs	r0, r3
 8008298:	f000 fa1d 	bl	80086d6 <USBD_CtlError>
      err++;
 800829c:	210b      	movs	r1, #11
 800829e:	187b      	adds	r3, r7, r1
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	187b      	adds	r3, r7, r1
 80082a4:	3201      	adds	r2, #1
 80082a6:	701a      	strb	r2, [r3, #0]
      break;
 80082a8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80082aa:	230b      	movs	r3, #11
 80082ac:	18fb      	adds	r3, r7, r3
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d127      	bne.n	8008304 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80082b4:	2108      	movs	r1, #8
 80082b6:	187b      	adds	r3, r7, r1
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d019      	beq.n	80082f2 <USBD_GetDescriptor+0x342>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	88db      	ldrh	r3, [r3, #6]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d015      	beq.n	80082f2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	88da      	ldrh	r2, [r3, #6]
 80082ca:	187b      	adds	r3, r7, r1
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	1c18      	adds	r0, r3, #0
 80082d0:	1c11      	adds	r1, r2, #0
 80082d2:	b28a      	uxth	r2, r1
 80082d4:	b283      	uxth	r3, r0
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d900      	bls.n	80082dc <USBD_GetDescriptor+0x32c>
 80082da:	1c01      	adds	r1, r0, #0
 80082dc:	b28a      	uxth	r2, r1
 80082de:	2108      	movs	r1, #8
 80082e0:	187b      	adds	r3, r7, r1
 80082e2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082e4:	187b      	adds	r3, r7, r1
 80082e6:	881a      	ldrh	r2, [r3, #0]
 80082e8:	68f9      	ldr	r1, [r7, #12]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	0018      	movs	r0, r3
 80082ee:	f000 fa70 	bl	80087d2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	88db      	ldrh	r3, [r3, #6]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	0018      	movs	r0, r3
 80082fe:	f000 fad2 	bl	80088a6 <USBD_CtlSendStatus>
 8008302:	e000      	b.n	8008306 <USBD_GetDescriptor+0x356>
    return;
 8008304:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8008306:	46bd      	mov	sp, r7
 8008308:	b004      	add	sp, #16
 800830a:	bd80      	pop	{r7, pc}
 800830c:	0800961c 	.word	0x0800961c
 8008310:	0800963c 	.word	0x0800963c

08008314 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008314:	b590      	push	{r4, r7, lr}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	889b      	ldrh	r3, [r3, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d13d      	bne.n	80083a2 <USBD_SetAddress+0x8e>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	88db      	ldrh	r3, [r3, #6]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d139      	bne.n	80083a2 <USBD_SetAddress+0x8e>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	885b      	ldrh	r3, [r3, #2]
 8008332:	2b7f      	cmp	r3, #127	@ 0x7f
 8008334:	d835      	bhi.n	80083a2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	885b      	ldrh	r3, [r3, #2]
 800833a:	b2da      	uxtb	r2, r3
 800833c:	230f      	movs	r3, #15
 800833e:	18fb      	adds	r3, r7, r3
 8008340:	217f      	movs	r1, #127	@ 0x7f
 8008342:	400a      	ands	r2, r1
 8008344:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	23a7      	movs	r3, #167	@ 0xa7
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	5cd3      	ldrb	r3, [r2, r3]
 800834e:	2b03      	cmp	r3, #3
 8008350:	d106      	bne.n	8008360 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	0011      	movs	r1, r2
 8008358:	0018      	movs	r0, r3
 800835a:	f000 f9bc 	bl	80086d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835e:	e027      	b.n	80083b0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	240f      	movs	r4, #15
 8008364:	193a      	adds	r2, r7, r4
 8008366:	4914      	ldr	r1, [pc, #80]	@ (80083b8 <USBD_SetAddress+0xa4>)
 8008368:	7812      	ldrb	r2, [r2, #0]
 800836a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800836c:	193b      	adds	r3, r7, r4
 800836e:	781a      	ldrb	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	0011      	movs	r1, r2
 8008374:	0018      	movs	r0, r3
 8008376:	f000 fe83 	bl	8009080 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	0018      	movs	r0, r3
 800837e:	f000 fa92 	bl	80088a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008382:	193b      	adds	r3, r7, r4
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d005      	beq.n	8008396 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	23a7      	movs	r3, #167	@ 0xa7
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	2102      	movs	r1, #2
 8008392:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008394:	e00c      	b.n	80083b0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	23a7      	movs	r3, #167	@ 0xa7
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	2101      	movs	r1, #1
 800839e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a0:	e006      	b.n	80083b0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	0011      	movs	r1, r2
 80083a8:	0018      	movs	r0, r3
 80083aa:	f000 f994 	bl	80086d6 <USBD_CtlError>
  }
}
 80083ae:	46c0      	nop			@ (mov r8, r8)
 80083b0:	46c0      	nop			@ (mov r8, r8)
 80083b2:	46bd      	mov	sp, r7
 80083b4:	b005      	add	sp, #20
 80083b6:	bd90      	pop	{r4, r7, pc}
 80083b8:	0000029e 	.word	0x0000029e

080083bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	885b      	ldrh	r3, [r3, #2]
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	4b4c      	ldr	r3, [pc, #304]	@ (8008500 <USBD_SetConfig+0x144>)
 80083ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083d0:	4b4b      	ldr	r3, [pc, #300]	@ (8008500 <USBD_SetConfig+0x144>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d906      	bls.n	80083e6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	0011      	movs	r1, r2
 80083de:	0018      	movs	r0, r3
 80083e0:	f000 f979 	bl	80086d6 <USBD_CtlError>
 80083e4:	e088      	b.n	80084f8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	23a7      	movs	r3, #167	@ 0xa7
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	5cd3      	ldrb	r3, [r2, r3]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d002      	beq.n	80083f8 <USBD_SetConfig+0x3c>
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d029      	beq.n	800844a <USBD_SetConfig+0x8e>
 80083f6:	e071      	b.n	80084dc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80083f8:	4b41      	ldr	r3, [pc, #260]	@ (8008500 <USBD_SetConfig+0x144>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01f      	beq.n	8008440 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008400:	4b3f      	ldr	r3, [pc, #252]	@ (8008500 <USBD_SetConfig+0x144>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	001a      	movs	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	23a7      	movs	r3, #167	@ 0xa7
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	2103      	movs	r1, #3
 8008412:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008414:	4b3a      	ldr	r3, [pc, #232]	@ (8008500 <USBD_SetConfig+0x144>)
 8008416:	781a      	ldrb	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	0011      	movs	r1, r2
 800841c:	0018      	movs	r0, r3
 800841e:	f7ff f8c5 	bl	80075ac <USBD_SetClassConfig>
 8008422:	0003      	movs	r3, r0
 8008424:	2b02      	cmp	r3, #2
 8008426:	d106      	bne.n	8008436 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	0011      	movs	r1, r2
 800842e:	0018      	movs	r0, r3
 8008430:	f000 f951 	bl	80086d6 <USBD_CtlError>
            return;
 8008434:	e060      	b.n	80084f8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0018      	movs	r0, r3
 800843a:	f000 fa34 	bl	80088a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800843e:	e05b      	b.n	80084f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	0018      	movs	r0, r3
 8008444:	f000 fa2f 	bl	80088a6 <USBD_CtlSendStatus>
        break;
 8008448:	e056      	b.n	80084f8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800844a:	4b2d      	ldr	r3, [pc, #180]	@ (8008500 <USBD_SetConfig+0x144>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d115      	bne.n	800847e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	23a7      	movs	r3, #167	@ 0xa7
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	2102      	movs	r1, #2
 800845a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800845c:	4b28      	ldr	r3, [pc, #160]	@ (8008500 <USBD_SetConfig+0x144>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	001a      	movs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008466:	4b26      	ldr	r3, [pc, #152]	@ (8008500 <USBD_SetConfig+0x144>)
 8008468:	781a      	ldrb	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	0011      	movs	r1, r2
 800846e:	0018      	movs	r0, r3
 8008470:	f7ff f8c3 	bl	80075fa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	0018      	movs	r0, r3
 8008478:	f000 fa15 	bl	80088a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800847c:	e03c      	b.n	80084f8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800847e:	4b20      	ldr	r3, [pc, #128]	@ (8008500 <USBD_SetConfig+0x144>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	001a      	movs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	429a      	cmp	r2, r3
 800848a:	d022      	beq.n	80084d2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	b2da      	uxtb	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	0011      	movs	r1, r2
 8008496:	0018      	movs	r0, r3
 8008498:	f7ff f8af 	bl	80075fa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800849c:	4b18      	ldr	r3, [pc, #96]	@ (8008500 <USBD_SetConfig+0x144>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	001a      	movs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084a6:	4b16      	ldr	r3, [pc, #88]	@ (8008500 <USBD_SetConfig+0x144>)
 80084a8:	781a      	ldrb	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	0011      	movs	r1, r2
 80084ae:	0018      	movs	r0, r3
 80084b0:	f7ff f87c 	bl	80075ac <USBD_SetClassConfig>
 80084b4:	0003      	movs	r3, r0
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d106      	bne.n	80084c8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	0011      	movs	r1, r2
 80084c0:	0018      	movs	r0, r3
 80084c2:	f000 f908 	bl	80086d6 <USBD_CtlError>
            return;
 80084c6:	e017      	b.n	80084f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	0018      	movs	r0, r3
 80084cc:	f000 f9eb 	bl	80088a6 <USBD_CtlSendStatus>
        break;
 80084d0:	e012      	b.n	80084f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	0018      	movs	r0, r3
 80084d6:	f000 f9e6 	bl	80088a6 <USBD_CtlSendStatus>
        break;
 80084da:	e00d      	b.n	80084f8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	0011      	movs	r1, r2
 80084e2:	0018      	movs	r0, r3
 80084e4:	f000 f8f7 	bl	80086d6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80084e8:	4b05      	ldr	r3, [pc, #20]	@ (8008500 <USBD_SetConfig+0x144>)
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	0011      	movs	r1, r2
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7ff f882 	bl	80075fa <USBD_ClrClassConfig>
        break;
 80084f6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b002      	add	sp, #8
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	20000394 	.word	0x20000394

08008504 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	88db      	ldrh	r3, [r3, #6]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d006      	beq.n	8008524 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	0011      	movs	r1, r2
 800851c:	0018      	movs	r0, r3
 800851e:	f000 f8da 	bl	80086d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008522:	e026      	b.n	8008572 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	23a7      	movs	r3, #167	@ 0xa7
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	5cd3      	ldrb	r3, [r2, r3]
 800852c:	2b02      	cmp	r3, #2
 800852e:	dc02      	bgt.n	8008536 <USBD_GetConfig+0x32>
 8008530:	2b00      	cmp	r3, #0
 8008532:	dc03      	bgt.n	800853c <USBD_GetConfig+0x38>
 8008534:	e016      	b.n	8008564 <USBD_GetConfig+0x60>
 8008536:	2b03      	cmp	r3, #3
 8008538:	d00c      	beq.n	8008554 <USBD_GetConfig+0x50>
 800853a:	e013      	b.n	8008564 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3308      	adds	r3, #8
 8008546:	0019      	movs	r1, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	0018      	movs	r0, r3
 800854e:	f000 f940 	bl	80087d2 <USBD_CtlSendData>
        break;
 8008552:	e00e      	b.n	8008572 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	1d19      	adds	r1, r3, #4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	0018      	movs	r0, r3
 800855e:	f000 f938 	bl	80087d2 <USBD_CtlSendData>
        break;
 8008562:	e006      	b.n	8008572 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	0011      	movs	r1, r2
 800856a:	0018      	movs	r0, r3
 800856c:	f000 f8b3 	bl	80086d6 <USBD_CtlError>
        break;
 8008570:	46c0      	nop			@ (mov r8, r8)
}
 8008572:	46c0      	nop			@ (mov r8, r8)
 8008574:	46bd      	mov	sp, r7
 8008576:	b002      	add	sp, #8
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	23a7      	movs	r3, #167	@ 0xa7
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	5cd3      	ldrb	r3, [r2, r3]
 800858c:	3b01      	subs	r3, #1
 800858e:	2b02      	cmp	r3, #2
 8008590:	d822      	bhi.n	80085d8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d006      	beq.n	80085a8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	0011      	movs	r1, r2
 80085a0:	0018      	movs	r0, r3
 80085a2:	f000 f898 	bl	80086d6 <USBD_CtlError>
        break;
 80085a6:	e01e      	b.n	80085e6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	23a9      	movs	r3, #169	@ 0xa9
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	58d3      	ldr	r3, [r2, r3]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	2202      	movs	r2, #2
 80085c0:	431a      	orrs	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	330c      	adds	r3, #12
 80085ca:	0019      	movs	r1, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	0018      	movs	r0, r3
 80085d2:	f000 f8fe 	bl	80087d2 <USBD_CtlSendData>
      break;
 80085d6:	e006      	b.n	80085e6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	0011      	movs	r1, r2
 80085de:	0018      	movs	r0, r3
 80085e0:	f000 f879 	bl	80086d6 <USBD_CtlError>
      break;
 80085e4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80085e6:	46c0      	nop			@ (mov r8, r8)
 80085e8:	46bd      	mov	sp, r7
 80085ea:	b002      	add	sp, #8
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d108      	bne.n	8008612 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	23a9      	movs	r3, #169	@ 0xa9
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	2101      	movs	r1, #1
 8008608:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	0018      	movs	r0, r3
 800860e:	f000 f94a 	bl	80088a6 <USBD_CtlSendStatus>
  }
}
 8008612:	46c0      	nop			@ (mov r8, r8)
 8008614:	46bd      	mov	sp, r7
 8008616:	b002      	add	sp, #8
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	23a7      	movs	r3, #167	@ 0xa7
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	5cd3      	ldrb	r3, [r2, r3]
 800862c:	3b01      	subs	r3, #1
 800862e:	2b02      	cmp	r3, #2
 8008630:	d80d      	bhi.n	800864e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	885b      	ldrh	r3, [r3, #2]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d110      	bne.n	800865c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	23a9      	movs	r3, #169	@ 0xa9
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	2100      	movs	r1, #0
 8008642:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	0018      	movs	r0, r3
 8008648:	f000 f92d 	bl	80088a6 <USBD_CtlSendStatus>
      }
      break;
 800864c:	e006      	b.n	800865c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	0011      	movs	r1, r2
 8008654:	0018      	movs	r0, r3
 8008656:	f000 f83e 	bl	80086d6 <USBD_CtlError>
      break;
 800865a:	e000      	b.n	800865e <USBD_ClrFeature+0x44>
      break;
 800865c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800865e:	46c0      	nop			@ (mov r8, r8)
 8008660:	46bd      	mov	sp, r7
 8008662:	b002      	add	sp, #8
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b082      	sub	sp, #8
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781a      	ldrb	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	785a      	ldrb	r2, [r3, #1]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	3302      	adds	r3, #2
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	001a      	movs	r2, r3
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	3303      	adds	r3, #3
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	b29b      	uxth	r3, r3
 8008692:	18d3      	adds	r3, r2, r3
 8008694:	b29a      	uxth	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	3304      	adds	r3, #4
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	001a      	movs	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	3305      	adds	r3, #5
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	18d3      	adds	r3, r2, r3
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	3306      	adds	r3, #6
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	001a      	movs	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	3307      	adds	r3, #7
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	18d3      	adds	r3, r2, r3
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	80da      	strh	r2, [r3, #6]

}
 80086ce:	46c0      	nop			@ (mov r8, r8)
 80086d0:	46bd      	mov	sp, r7
 80086d2:	b002      	add	sp, #8
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2180      	movs	r1, #128	@ 0x80
 80086e4:	0018      	movs	r0, r3
 80086e6:	f000 fc44 	bl	8008f72 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2100      	movs	r1, #0
 80086ee:	0018      	movs	r0, r3
 80086f0:	f000 fc3f 	bl	8008f72 <USBD_LL_StallEP>
}
 80086f4:	46c0      	nop			@ (mov r8, r8)
 80086f6:	46bd      	mov	sp, r7
 80086f8:	b002      	add	sp, #8
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008708:	2417      	movs	r4, #23
 800870a:	193b      	adds	r3, r7, r4
 800870c:	2200      	movs	r2, #0
 800870e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d03c      	beq.n	8008790 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	0018      	movs	r0, r3
 800871a:	f000 f83d 	bl	8008798 <USBD_GetLen>
 800871e:	0003      	movs	r3, r0
 8008720:	3301      	adds	r3, #1
 8008722:	b29b      	uxth	r3, r3
 8008724:	18db      	adds	r3, r3, r3
 8008726:	b29a      	uxth	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800872c:	193b      	adds	r3, r7, r4
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	193a      	adds	r2, r7, r4
 8008732:	1c59      	adds	r1, r3, #1
 8008734:	7011      	strb	r1, [r2, #0]
 8008736:	001a      	movs	r2, r3
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	189b      	adds	r3, r3, r2
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7812      	ldrb	r2, [r2, #0]
 8008740:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008742:	193b      	adds	r3, r7, r4
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	193a      	adds	r2, r7, r4
 8008748:	1c59      	adds	r1, r3, #1
 800874a:	7011      	strb	r1, [r2, #0]
 800874c:	001a      	movs	r2, r3
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	189b      	adds	r3, r3, r2
 8008752:	2203      	movs	r2, #3
 8008754:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008756:	e017      	b.n	8008788 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	60fa      	str	r2, [r7, #12]
 800875e:	2417      	movs	r4, #23
 8008760:	193a      	adds	r2, r7, r4
 8008762:	7812      	ldrb	r2, [r2, #0]
 8008764:	1939      	adds	r1, r7, r4
 8008766:	1c50      	adds	r0, r2, #1
 8008768:	7008      	strb	r0, [r1, #0]
 800876a:	0011      	movs	r1, r2
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	1852      	adds	r2, r2, r1
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008774:	193b      	adds	r3, r7, r4
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	193a      	adds	r2, r7, r4
 800877a:	1c59      	adds	r1, r3, #1
 800877c:	7011      	strb	r1, [r2, #0]
 800877e:	001a      	movs	r2, r3
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	189b      	adds	r3, r3, r2
 8008784:	2200      	movs	r2, #0
 8008786:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e3      	bne.n	8008758 <USBD_GetString+0x5c>
    }
  }
}
 8008790:	46c0      	nop			@ (mov r8, r8)
 8008792:	46bd      	mov	sp, r7
 8008794:	b007      	add	sp, #28
 8008796:	bd90      	pop	{r4, r7, pc}

08008798 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087a0:	230f      	movs	r3, #15
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80087a8:	e008      	b.n	80087bc <USBD_GetLen+0x24>
  {
    len++;
 80087aa:	210f      	movs	r1, #15
 80087ac:	187b      	adds	r3, r7, r1
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	187b      	adds	r3, r7, r1
 80087b2:	3201      	adds	r2, #1
 80087b4:	701a      	strb	r2, [r3, #0]
    buf++;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3301      	adds	r3, #1
 80087ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1f2      	bne.n	80087aa <USBD_GetLen+0x12>
  }

  return len;
 80087c4:	230f      	movs	r3, #15
 80087c6:	18fb      	adds	r3, r7, r3
 80087c8:	781b      	ldrb	r3, [r3, #0]
}
 80087ca:	0018      	movs	r0, r3
 80087cc:	46bd      	mov	sp, r7
 80087ce:	b004      	add	sp, #16
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	1dbb      	adds	r3, r7, #6
 80087de:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	23a5      	movs	r3, #165	@ 0xa5
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	2102      	movs	r1, #2
 80087e8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80087ea:	1dbb      	adds	r3, r7, #6
 80087ec:	881a      	ldrh	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80087f2:	1dbb      	adds	r3, r7, #6
 80087f4:	881a      	ldrh	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087fa:	1dbb      	adds	r3, r7, #6
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	2100      	movs	r1, #0
 8008804:	f000 fc67 	bl	80090d6 <USBD_LL_Transmit>

  return USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	0018      	movs	r0, r3
 800880c:	46bd      	mov	sp, r7
 800880e:	b004      	add	sp, #16
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	1dbb      	adds	r3, r7, #6
 800881e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008820:	1dbb      	adds	r3, r7, #6
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	2100      	movs	r1, #0
 800882a:	f000 fc54 	bl	80090d6 <USBD_LL_Transmit>

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	0018      	movs	r0, r3
 8008832:	46bd      	mov	sp, r7
 8008834:	b004      	add	sp, #16
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	1dbb      	adds	r3, r7, #6
 8008844:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	23a5      	movs	r3, #165	@ 0xa5
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	2103      	movs	r1, #3
 800884e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8008850:	1dbb      	adds	r3, r7, #6
 8008852:	8819      	ldrh	r1, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	23ae      	movs	r3, #174	@ 0xae
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800885c:	1dbb      	adds	r3, r7, #6
 800885e:	8819      	ldrh	r1, [r3, #0]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	23b0      	movs	r3, #176	@ 0xb0
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008868:	1dbb      	adds	r3, r7, #6
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	2100      	movs	r1, #0
 8008872:	f000 fc67 	bl	8009144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	0018      	movs	r0, r3
 800887a:	46bd      	mov	sp, r7
 800887c:	b004      	add	sp, #16
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	1dbb      	adds	r3, r7, #6
 800888c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800888e:	1dbb      	adds	r3, r7, #6
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	2100      	movs	r1, #0
 8008898:	f000 fc54 	bl	8009144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	0018      	movs	r0, r3
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b004      	add	sp, #16
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	23a5      	movs	r3, #165	@ 0xa5
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	2104      	movs	r1, #4
 80088b6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	2300      	movs	r3, #0
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	f000 fc09 	bl	80090d6 <USBD_LL_Transmit>

  return USBD_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	0018      	movs	r0, r3
 80088c8:	46bd      	mov	sp, r7
 80088ca:	b002      	add	sp, #8
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	23a5      	movs	r3, #165	@ 0xa5
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	2105      	movs	r1, #5
 80088de:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	2300      	movs	r3, #0
 80088e4:	2200      	movs	r2, #0
 80088e6:	2100      	movs	r1, #0
 80088e8:	f000 fc2c 	bl	8009144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	0018      	movs	r0, r3
 80088f0:	46bd      	mov	sp, r7
 80088f2:	b002      	add	sp, #8
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088fc:	4914      	ldr	r1, [pc, #80]	@ (8008950 <MX_USB_DEVICE_Init+0x58>)
 80088fe:	4b15      	ldr	r3, [pc, #84]	@ (8008954 <MX_USB_DEVICE_Init+0x5c>)
 8008900:	2200      	movs	r2, #0
 8008902:	0018      	movs	r0, r3
 8008904:	f7fe fdeb 	bl	80074de <USBD_Init>
 8008908:	1e03      	subs	r3, r0, #0
 800890a:	d001      	beq.n	8008910 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800890c:	f7f8 f842 	bl	8000994 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008910:	4a11      	ldr	r2, [pc, #68]	@ (8008958 <MX_USB_DEVICE_Init+0x60>)
 8008912:	4b10      	ldr	r3, [pc, #64]	@ (8008954 <MX_USB_DEVICE_Init+0x5c>)
 8008914:	0011      	movs	r1, r2
 8008916:	0018      	movs	r0, r3
 8008918:	f7fe fe12 	bl	8007540 <USBD_RegisterClass>
 800891c:	1e03      	subs	r3, r0, #0
 800891e:	d001      	beq.n	8008924 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008920:	f7f8 f838 	bl	8000994 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008924:	4a0d      	ldr	r2, [pc, #52]	@ (800895c <MX_USB_DEVICE_Init+0x64>)
 8008926:	4b0b      	ldr	r3, [pc, #44]	@ (8008954 <MX_USB_DEVICE_Init+0x5c>)
 8008928:	0011      	movs	r1, r2
 800892a:	0018      	movs	r0, r3
 800892c:	f7fe fdbc 	bl	80074a8 <USBD_CUSTOM_HID_RegisterInterface>
 8008930:	1e03      	subs	r3, r0, #0
 8008932:	d001      	beq.n	8008938 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008934:	f7f8 f82e 	bl	8000994 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008938:	4b06      	ldr	r3, [pc, #24]	@ (8008954 <MX_USB_DEVICE_Init+0x5c>)
 800893a:	0018      	movs	r0, r3
 800893c:	f7fe fe20 	bl	8007580 <USBD_Start>
 8008940:	1e03      	subs	r3, r0, #0
 8008942:	d001      	beq.n	8008948 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8008944:	f7f8 f826 	bl	8000994 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008948:	46c0      	nop			@ (mov r8, r8)
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	46c0      	nop			@ (mov r8, r8)
 8008950:	20000100 	.word	0x20000100
 8008954:	20000398 	.word	0x20000398
 8008958:	2000000c 	.word	0x2000000c
 800895c:	200000f0 	.word	0x200000f0

08008960 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008964:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008966:	0018      	movs	r0, r3
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008970:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008972:	0018      	movs	r0, r3
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	0002      	movs	r2, r0
 8008980:	1dfb      	adds	r3, r7, #7
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	1dbb      	adds	r3, r7, #6
 8008986:	1c0a      	adds	r2, r1, #0
 8008988:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800898a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800898c:	0018      	movs	r0, r3
 800898e:	46bd      	mov	sp, r7
 8008990:	b002      	add	sp, #8
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	0002      	movs	r2, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	1dfb      	adds	r3, r7, #7
 80089a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2212      	movs	r2, #18
 80089a6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089a8:	4b02      	ldr	r3, [pc, #8]	@ (80089b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089aa:	0018      	movs	r0, r3
 80089ac:	46bd      	mov	sp, r7
 80089ae:	b002      	add	sp, #8
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	46c0      	nop			@ (mov r8, r8)
 80089b4:	2000011c 	.word	0x2000011c

080089b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	0002      	movs	r2, r0
 80089c0:	6039      	str	r1, [r7, #0]
 80089c2:	1dfb      	adds	r3, r7, #7
 80089c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2204      	movs	r2, #4
 80089ca:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089cc:	4b02      	ldr	r3, [pc, #8]	@ (80089d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089ce:	0018      	movs	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b002      	add	sp, #8
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	46c0      	nop			@ (mov r8, r8)
 80089d8:	20000130 	.word	0x20000130

080089dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	0002      	movs	r2, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	1dfb      	adds	r3, r7, #7
 80089e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80089ea:	1dfb      	adds	r3, r7, #7
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d106      	bne.n	8008a00 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	4908      	ldr	r1, [pc, #32]	@ (8008a18 <USBD_FS_ProductStrDescriptor+0x3c>)
 80089f6:	4b09      	ldr	r3, [pc, #36]	@ (8008a1c <USBD_FS_ProductStrDescriptor+0x40>)
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7ff fe7f 	bl	80086fc <USBD_GetString>
 80089fe:	e005      	b.n	8008a0c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	4905      	ldr	r1, [pc, #20]	@ (8008a18 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008a04:	4b05      	ldr	r3, [pc, #20]	@ (8008a1c <USBD_FS_ProductStrDescriptor+0x40>)
 8008a06:	0018      	movs	r0, r3
 8008a08:	f7ff fe78 	bl	80086fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a0c:	4b02      	ldr	r3, [pc, #8]	@ (8008a18 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8008a0e:	0018      	movs	r0, r3
 8008a10:	46bd      	mov	sp, r7
 8008a12:	b002      	add	sp, #8
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	46c0      	nop			@ (mov r8, r8)
 8008a18:	2000065c 	.word	0x2000065c
 8008a1c:	080094f4 	.word	0x080094f4

08008a20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	0002      	movs	r2, r0
 8008a28:	6039      	str	r1, [r7, #0]
 8008a2a:	1dfb      	adds	r3, r7, #7
 8008a2c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4904      	ldr	r1, [pc, #16]	@ (8008a44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a32:	4b05      	ldr	r3, [pc, #20]	@ (8008a48 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8008a34:	0018      	movs	r0, r3
 8008a36:	f7ff fe61 	bl	80086fc <USBD_GetString>
  return USBD_StrDesc;
 8008a3a:	4b02      	ldr	r3, [pc, #8]	@ (8008a44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	b002      	add	sp, #8
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	2000065c 	.word	0x2000065c
 8008a48:	08009518 	.word	0x08009518

08008a4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	0002      	movs	r2, r0
 8008a54:	6039      	str	r1, [r7, #0]
 8008a56:	1dfb      	adds	r3, r7, #7
 8008a58:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	221a      	movs	r2, #26
 8008a5e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a60:	f000 f84c 	bl	8008afc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a64:	4b02      	ldr	r3, [pc, #8]	@ (8008a70 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8008a66:	0018      	movs	r0, r3
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	b002      	add	sp, #8
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	46c0      	nop			@ (mov r8, r8)
 8008a70:	20000134 	.word	0x20000134

08008a74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	0002      	movs	r2, r0
 8008a7c:	6039      	str	r1, [r7, #0]
 8008a7e:	1dfb      	adds	r3, r7, #7
 8008a80:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8008a82:	1dfb      	adds	r3, r7, #7
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	4908      	ldr	r1, [pc, #32]	@ (8008ab0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008a8e:	4b09      	ldr	r3, [pc, #36]	@ (8008ab4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008a90:	0018      	movs	r0, r3
 8008a92:	f7ff fe33 	bl	80086fc <USBD_GetString>
 8008a96:	e005      	b.n	8008aa4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	4905      	ldr	r1, [pc, #20]	@ (8008ab0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008a9c:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f7ff fe2c 	bl	80086fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008aa4:	4b02      	ldr	r3, [pc, #8]	@ (8008ab0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	b002      	add	sp, #8
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	46c0      	nop			@ (mov r8, r8)
 8008ab0:	2000065c 	.word	0x2000065c
 8008ab4:	0800952c 	.word	0x0800952c

08008ab8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	0002      	movs	r2, r0
 8008ac0:	6039      	str	r1, [r7, #0]
 8008ac2:	1dfb      	adds	r3, r7, #7
 8008ac4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008ac6:	1dfb      	adds	r3, r7, #7
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d106      	bne.n	8008adc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	4908      	ldr	r1, [pc, #32]	@ (8008af4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008ad2:	4b09      	ldr	r3, [pc, #36]	@ (8008af8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	f7ff fe11 	bl	80086fc <USBD_GetString>
 8008ada:	e005      	b.n	8008ae8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	4905      	ldr	r1, [pc, #20]	@ (8008af4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008ae0:	4b05      	ldr	r3, [pc, #20]	@ (8008af8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f7ff fe0a 	bl	80086fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ae8:	4b02      	ldr	r3, [pc, #8]	@ (8008af4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8008aea:	0018      	movs	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b002      	add	sp, #8
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	46c0      	nop			@ (mov r8, r8)
 8008af4:	2000065c 	.word	0x2000065c
 8008af8:	08009540 	.word	0x08009540

08008afc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b02:	4b10      	ldr	r3, [pc, #64]	@ (8008b44 <Get_SerialNum+0x48>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b08:	4b0f      	ldr	r3, [pc, #60]	@ (8008b48 <Get_SerialNum+0x4c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b4c <Get_SerialNum+0x50>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	18d3      	adds	r3, r2, r3
 8008b1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00b      	beq.n	8008b3a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b22:	490b      	ldr	r1, [pc, #44]	@ (8008b50 <Get_SerialNum+0x54>)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2208      	movs	r2, #8
 8008b28:	0018      	movs	r0, r3
 8008b2a:	f000 f815 	bl	8008b58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b2e:	4909      	ldr	r1, [pc, #36]	@ (8008b54 <Get_SerialNum+0x58>)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2204      	movs	r2, #4
 8008b34:	0018      	movs	r0, r3
 8008b36:	f000 f80f 	bl	8008b58 <IntToUnicode>
  }
}
 8008b3a:	46c0      	nop			@ (mov r8, r8)
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	b004      	add	sp, #16
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	46c0      	nop			@ (mov r8, r8)
 8008b44:	1ff80050 	.word	0x1ff80050
 8008b48:	1ff80054 	.word	0x1ff80054
 8008b4c:	1ff80058 	.word	0x1ff80058
 8008b50:	20000136 	.word	0x20000136
 8008b54:	20000146 	.word	0x20000146

08008b58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	1dfb      	adds	r3, r7, #7
 8008b64:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8008b66:	2117      	movs	r1, #23
 8008b68:	187b      	adds	r3, r7, r1
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8008b6e:	187b      	adds	r3, r7, r1
 8008b70:	2200      	movs	r2, #0
 8008b72:	701a      	strb	r2, [r3, #0]
 8008b74:	e02f      	b.n	8008bd6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	0f1b      	lsrs	r3, r3, #28
 8008b7a:	2b09      	cmp	r3, #9
 8008b7c:	d80d      	bhi.n	8008b9a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	0f1b      	lsrs	r3, r3, #28
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	2317      	movs	r3, #23
 8008b86:	18fb      	adds	r3, r7, r3
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	0019      	movs	r1, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	185b      	adds	r3, r3, r1
 8008b92:	3230      	adds	r2, #48	@ 0x30
 8008b94:	b2d2      	uxtb	r2, r2
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	e00c      	b.n	8008bb4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	0f1b      	lsrs	r3, r3, #28
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	2317      	movs	r3, #23
 8008ba2:	18fb      	adds	r3, r7, r3
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	0019      	movs	r1, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	185b      	adds	r3, r3, r1
 8008bae:	3237      	adds	r2, #55	@ 0x37
 8008bb0:	b2d2      	uxtb	r2, r2
 8008bb2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	011b      	lsls	r3, r3, #4
 8008bb8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bba:	2117      	movs	r1, #23
 8008bbc:	187b      	adds	r3, r7, r1
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	18d3      	adds	r3, r2, r3
 8008bc8:	2200      	movs	r2, #0
 8008bca:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bcc:	187b      	adds	r3, r7, r1
 8008bce:	781a      	ldrb	r2, [r3, #0]
 8008bd0:	187b      	adds	r3, r7, r1
 8008bd2:	3201      	adds	r2, #1
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	2317      	movs	r3, #23
 8008bd8:	18fa      	adds	r2, r7, r3
 8008bda:	1dfb      	adds	r3, r7, #7
 8008bdc:	7812      	ldrb	r2, [r2, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d3c8      	bcc.n	8008b76 <IntToUnicode+0x1e>
  }
}
 8008be4:	46c0      	nop			@ (mov r8, r8)
 8008be6:	46c0      	nop			@ (mov r8, r8)
 8008be8:	46bd      	mov	sp, r7
 8008bea:	b006      	add	sp, #24
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8008c28 <HAL_PCD_MspInit+0x38>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d10e      	bne.n	8008c20 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c02:	4b0a      	ldr	r3, [pc, #40]	@ (8008c2c <HAL_PCD_MspInit+0x3c>)
 8008c04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c06:	4b09      	ldr	r3, [pc, #36]	@ (8008c2c <HAL_PCD_MspInit+0x3c>)
 8008c08:	2180      	movs	r1, #128	@ 0x80
 8008c0a:	0409      	lsls	r1, r1, #16
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008c10:	2200      	movs	r2, #0
 8008c12:	2100      	movs	r1, #0
 8008c14:	201f      	movs	r0, #31
 8008c16:	f7f8 fa6b 	bl	80010f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008c1a:	201f      	movs	r0, #31
 8008c1c:	f7f8 fa7d 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c20:	46c0      	nop			@ (mov r8, r8)
 8008c22:	46bd      	mov	sp, r7
 8008c24:	b002      	add	sp, #8
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	40005c00 	.word	0x40005c00
 8008c2c:	40021000 	.word	0x40021000

08008c30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	23bc      	movs	r3, #188	@ 0xbc
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	58d2      	ldr	r2, [r2, r3]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	21ac      	movs	r1, #172	@ 0xac
 8008c44:	0089      	lsls	r1, r1, #2
 8008c46:	468c      	mov	ip, r1
 8008c48:	4463      	add	r3, ip
 8008c4a:	0019      	movs	r1, r3
 8008c4c:	0010      	movs	r0, r2
 8008c4e:	f7fe fceb 	bl	8007628 <USBD_LL_SetupStage>
}
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	46bd      	mov	sp, r7
 8008c56:	b002      	add	sp, #8
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c5a:	b590      	push	{r4, r7, lr}
 8008c5c:	b083      	sub	sp, #12
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	000a      	movs	r2, r1
 8008c64:	1cfb      	adds	r3, r7, #3
 8008c66:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	23bc      	movs	r3, #188	@ 0xbc
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	58d4      	ldr	r4, [r2, r3]
 8008c70:	1cfb      	adds	r3, r7, #3
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	23be      	movs	r3, #190	@ 0xbe
 8008c78:	0059      	lsls	r1, r3, #1
 8008c7a:	0013      	movs	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	189b      	adds	r3, r3, r2
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	18c3      	adds	r3, r0, r3
 8008c84:	185b      	adds	r3, r3, r1
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	1cfb      	adds	r3, r7, #3
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	0019      	movs	r1, r3
 8008c8e:	0020      	movs	r0, r4
 8008c90:	f7fe fd28 	bl	80076e4 <USBD_LL_DataOutStage>
}
 8008c94:	46c0      	nop			@ (mov r8, r8)
 8008c96:	46bd      	mov	sp, r7
 8008c98:	b003      	add	sp, #12
 8008c9a:	bd90      	pop	{r4, r7, pc}

08008c9c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	000a      	movs	r2, r1
 8008ca6:	1cfb      	adds	r3, r7, #3
 8008ca8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	23bc      	movs	r3, #188	@ 0xbc
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	58d0      	ldr	r0, [r2, r3]
 8008cb2:	1cfb      	adds	r3, r7, #3
 8008cb4:	781a      	ldrb	r2, [r3, #0]
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	0013      	movs	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	189b      	adds	r3, r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	18cb      	adds	r3, r1, r3
 8008cc2:	333c      	adds	r3, #60	@ 0x3c
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	1cfb      	adds	r3, r7, #3
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	0019      	movs	r1, r3
 8008ccc:	f7fe fd8c 	bl	80077e8 <USBD_LL_DataInStage>
}
 8008cd0:	46c0      	nop			@ (mov r8, r8)
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	b002      	add	sp, #8
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	23bc      	movs	r3, #188	@ 0xbc
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	58d3      	ldr	r3, [r2, r3]
 8008ce8:	0018      	movs	r0, r3
 8008cea:	f7fe fec3 	bl	8007a74 <USBD_LL_SOF>
}
 8008cee:	46c0      	nop			@ (mov r8, r8)
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	b002      	add	sp, #8
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cfe:	230f      	movs	r3, #15
 8008d00:	18fb      	adds	r3, r7, r3
 8008d02:	2201      	movs	r2, #1
 8008d04:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d001      	beq.n	8008d12 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008d0e:	f7f7 fe41 	bl	8000994 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	23bc      	movs	r3, #188	@ 0xbc
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	58d2      	ldr	r2, [r2, r3]
 8008d1a:	230f      	movs	r3, #15
 8008d1c:	18fb      	adds	r3, r7, r3
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	0019      	movs	r1, r3
 8008d22:	0010      	movs	r0, r2
 8008d24:	f7fe fe65 	bl	80079f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	23bc      	movs	r3, #188	@ 0xbc
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	58d3      	ldr	r3, [r2, r3]
 8008d30:	0018      	movs	r0, r3
 8008d32:	f7fe fe16 	bl	8007962 <USBD_LL_Reset>
}
 8008d36:	46c0      	nop			@ (mov r8, r8)
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	b004      	add	sp, #16
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	23bc      	movs	r3, #188	@ 0xbc
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	58d3      	ldr	r3, [r2, r3]
 8008d50:	0018      	movs	r0, r3
 8008d52:	f7fe fe5f 	bl	8007a14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d005      	beq.n	8008d6a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d5e:	4b05      	ldr	r3, [pc, #20]	@ (8008d74 <HAL_PCD_SuspendCallback+0x34>)
 8008d60:	691a      	ldr	r2, [r3, #16]
 8008d62:	4b04      	ldr	r3, [pc, #16]	@ (8008d74 <HAL_PCD_SuspendCallback+0x34>)
 8008d64:	2106      	movs	r1, #6
 8008d66:	430a      	orrs	r2, r1
 8008d68:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8008d6a:	46c0      	nop			@ (mov r8, r8)
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	b002      	add	sp, #8
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	46c0      	nop			@ (mov r8, r8)
 8008d74:	e000ed00 	.word	0xe000ed00

08008d78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d007      	beq.n	8008d98 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d88:	4b09      	ldr	r3, [pc, #36]	@ (8008db0 <HAL_PCD_ResumeCallback+0x38>)
 8008d8a:	691a      	ldr	r2, [r3, #16]
 8008d8c:	4b08      	ldr	r3, [pc, #32]	@ (8008db0 <HAL_PCD_ResumeCallback+0x38>)
 8008d8e:	2106      	movs	r1, #6
 8008d90:	438a      	bics	r2, r1
 8008d92:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008d94:	f000 fa0d 	bl	80091b2 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	23bc      	movs	r3, #188	@ 0xbc
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	58d3      	ldr	r3, [r2, r3]
 8008da0:	0018      	movs	r0, r3
 8008da2:	f7fe fe4f 	bl	8007a44 <USBD_LL_Resume>
}
 8008da6:	46c0      	nop			@ (mov r8, r8)
 8008da8:	46bd      	mov	sp, r7
 8008daa:	b002      	add	sp, #8
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	46c0      	nop			@ (mov r8, r8)
 8008db0:	e000ed00 	.word	0xe000ed00

08008db4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008dbc:	4a27      	ldr	r2, [pc, #156]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008dbe:	23bc      	movs	r3, #188	@ 0xbc
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	23b0      	movs	r3, #176	@ 0xb0
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4923      	ldr	r1, [pc, #140]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008dce:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008dd0:	4b22      	ldr	r3, [pc, #136]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008dd2:	4a23      	ldr	r2, [pc, #140]	@ (8008e60 <USBD_LL_Init+0xac>)
 8008dd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008dd6:	4b21      	ldr	r3, [pc, #132]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008dd8:	2208      	movs	r2, #8
 8008dda:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008dde:	2202      	movs	r2, #2
 8008de0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008de2:	4b1e      	ldr	r3, [pc, #120]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008de4:	2202      	movs	r2, #2
 8008de6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008de8:	4b1c      	ldr	r3, [pc, #112]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008dee:	4b1b      	ldr	r3, [pc, #108]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008df4:	4b19      	ldr	r3, [pc, #100]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008dfa:	4b18      	ldr	r3, [pc, #96]	@ (8008e5c <USBD_LL_Init+0xa8>)
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	f7f8 fc85 	bl	800170c <HAL_PCD_Init>
 8008e02:	1e03      	subs	r3, r0, #0
 8008e04:	d001      	beq.n	8008e0a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8008e06:	f7f7 fdc5 	bl	8000994 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	23b0      	movs	r3, #176	@ 0xb0
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	58d0      	ldr	r0, [r2, r3]
 8008e12:	2318      	movs	r3, #24
 8008e14:	2200      	movs	r2, #0
 8008e16:	2100      	movs	r1, #0
 8008e18:	f7fa fa2c 	bl	8003274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	23b0      	movs	r3, #176	@ 0xb0
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	58d0      	ldr	r0, [r2, r3]
 8008e24:	2358      	movs	r3, #88	@ 0x58
 8008e26:	2200      	movs	r2, #0
 8008e28:	2180      	movs	r1, #128	@ 0x80
 8008e2a:	f7fa fa23 	bl	8003274 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	23b0      	movs	r3, #176	@ 0xb0
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	58d0      	ldr	r0, [r2, r3]
 8008e36:	2398      	movs	r3, #152	@ 0x98
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2181      	movs	r1, #129	@ 0x81
 8008e3c:	f7fa fa1a 	bl	8003274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	23b0      	movs	r3, #176	@ 0xb0
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	58d0      	ldr	r0, [r2, r3]
 8008e48:	23d8      	movs	r3, #216	@ 0xd8
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	f7fa fa11 	bl	8003274 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	0018      	movs	r0, r3
 8008e56:	46bd      	mov	sp, r7
 8008e58:	b002      	add	sp, #8
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	2000085c 	.word	0x2000085c
 8008e60:	40005c00 	.word	0x40005c00

08008e64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e6c:	210f      	movs	r1, #15
 8008e6e:	187b      	adds	r3, r7, r1
 8008e70:	2200      	movs	r2, #0
 8008e72:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e74:	260e      	movs	r6, #14
 8008e76:	19bb      	adds	r3, r7, r6
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	23b0      	movs	r3, #176	@ 0xb0
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	58d3      	ldr	r3, [r2, r3]
 8008e84:	000d      	movs	r5, r1
 8008e86:	187c      	adds	r4, r7, r1
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7f8 fd3f 	bl	800190c <HAL_PCD_Start>
 8008e8e:	0003      	movs	r3, r0
 8008e90:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e92:	19bc      	adds	r4, r7, r6
 8008e94:	197b      	adds	r3, r7, r5
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f000 f991 	bl	80091c0 <USBD_Get_USB_Status>
 8008e9e:	0003      	movs	r3, r0
 8008ea0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008ea2:	19bb      	adds	r3, r7, r6
 8008ea4:	781b      	ldrb	r3, [r3, #0]
}
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	b005      	add	sp, #20
 8008eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008eae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	000c      	movs	r4, r1
 8008eb8:	0010      	movs	r0, r2
 8008eba:	0019      	movs	r1, r3
 8008ebc:	1cfb      	adds	r3, r7, #3
 8008ebe:	1c22      	adds	r2, r4, #0
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	1cbb      	adds	r3, r7, #2
 8008ec4:	1c02      	adds	r2, r0, #0
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	003b      	movs	r3, r7
 8008eca:	1c0a      	adds	r2, r1, #0
 8008ecc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ece:	260f      	movs	r6, #15
 8008ed0:	19bb      	adds	r3, r7, r6
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed6:	250e      	movs	r5, #14
 8008ed8:	197b      	adds	r3, r7, r5
 8008eda:	2200      	movs	r2, #0
 8008edc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	23b0      	movs	r3, #176	@ 0xb0
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	58d0      	ldr	r0, [r2, r3]
 8008ee6:	19bc      	adds	r4, r7, r6
 8008ee8:	1cbb      	adds	r3, r7, #2
 8008eea:	781d      	ldrb	r5, [r3, #0]
 8008eec:	003b      	movs	r3, r7
 8008eee:	881a      	ldrh	r2, [r3, #0]
 8008ef0:	1cfb      	adds	r3, r7, #3
 8008ef2:	7819      	ldrb	r1, [r3, #0]
 8008ef4:	002b      	movs	r3, r5
 8008ef6:	f7f8 fe9e 	bl	8001c36 <HAL_PCD_EP_Open>
 8008efa:	0003      	movs	r3, r0
 8008efc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008efe:	250e      	movs	r5, #14
 8008f00:	197c      	adds	r4, r7, r5
 8008f02:	19bb      	adds	r3, r7, r6
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	0018      	movs	r0, r3
 8008f08:	f000 f95a 	bl	80091c0 <USBD_Get_USB_Status>
 8008f0c:	0003      	movs	r3, r0
 8008f0e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008f10:	197b      	adds	r3, r7, r5
 8008f12:	781b      	ldrb	r3, [r3, #0]
}
 8008f14:	0018      	movs	r0, r3
 8008f16:	46bd      	mov	sp, r7
 8008f18:	b005      	add	sp, #20
 8008f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f1c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	000a      	movs	r2, r1
 8008f26:	1cfb      	adds	r3, r7, #3
 8008f28:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2a:	210f      	movs	r1, #15
 8008f2c:	187b      	adds	r3, r7, r1
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f32:	260e      	movs	r6, #14
 8008f34:	19bb      	adds	r3, r7, r6
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	23b0      	movs	r3, #176	@ 0xb0
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	58d2      	ldr	r2, [r2, r3]
 8008f42:	000d      	movs	r5, r1
 8008f44:	187c      	adds	r4, r7, r1
 8008f46:	1cfb      	adds	r3, r7, #3
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	0019      	movs	r1, r3
 8008f4c:	0010      	movs	r0, r2
 8008f4e:	f7f8 fee1 	bl	8001d14 <HAL_PCD_EP_Close>
 8008f52:	0003      	movs	r3, r0
 8008f54:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f56:	19bc      	adds	r4, r7, r6
 8008f58:	197b      	adds	r3, r7, r5
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f000 f92f 	bl	80091c0 <USBD_Get_USB_Status>
 8008f62:	0003      	movs	r3, r0
 8008f64:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008f66:	19bb      	adds	r3, r7, r6
 8008f68:	781b      	ldrb	r3, [r3, #0]
}
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	b005      	add	sp, #20
 8008f70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f72 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f74:	b085      	sub	sp, #20
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	000a      	movs	r2, r1
 8008f7c:	1cfb      	adds	r3, r7, #3
 8008f7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f80:	210f      	movs	r1, #15
 8008f82:	187b      	adds	r3, r7, r1
 8008f84:	2200      	movs	r2, #0
 8008f86:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f88:	260e      	movs	r6, #14
 8008f8a:	19bb      	adds	r3, r7, r6
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	23b0      	movs	r3, #176	@ 0xb0
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	58d2      	ldr	r2, [r2, r3]
 8008f98:	000d      	movs	r5, r1
 8008f9a:	187c      	adds	r4, r7, r1
 8008f9c:	1cfb      	adds	r3, r7, #3
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	0019      	movs	r1, r3
 8008fa2:	0010      	movs	r0, r2
 8008fa4:	f7f8 ff7a 	bl	8001e9c <HAL_PCD_EP_SetStall>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fac:	19bc      	adds	r4, r7, r6
 8008fae:	197b      	adds	r3, r7, r5
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	f000 f904 	bl	80091c0 <USBD_Get_USB_Status>
 8008fb8:	0003      	movs	r3, r0
 8008fba:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008fbc:	19bb      	adds	r3, r7, r6
 8008fbe:	781b      	ldrb	r3, [r3, #0]
}
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	b005      	add	sp, #20
 8008fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fc8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	000a      	movs	r2, r1
 8008fd2:	1cfb      	adds	r3, r7, #3
 8008fd4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd6:	210f      	movs	r1, #15
 8008fd8:	187b      	adds	r3, r7, r1
 8008fda:	2200      	movs	r2, #0
 8008fdc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fde:	260e      	movs	r6, #14
 8008fe0:	19bb      	adds	r3, r7, r6
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	23b0      	movs	r3, #176	@ 0xb0
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	58d2      	ldr	r2, [r2, r3]
 8008fee:	000d      	movs	r5, r1
 8008ff0:	187c      	adds	r4, r7, r1
 8008ff2:	1cfb      	adds	r3, r7, #3
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	0019      	movs	r1, r3
 8008ff8:	0010      	movs	r0, r2
 8008ffa:	f7f8 ffab 	bl	8001f54 <HAL_PCD_EP_ClrStall>
 8008ffe:	0003      	movs	r3, r0
 8009000:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009002:	19bc      	adds	r4, r7, r6
 8009004:	197b      	adds	r3, r7, r5
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	0018      	movs	r0, r3
 800900a:	f000 f8d9 	bl	80091c0 <USBD_Get_USB_Status>
 800900e:	0003      	movs	r3, r0
 8009010:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009012:	19bb      	adds	r3, r7, r6
 8009014:	781b      	ldrb	r3, [r3, #0]
}
 8009016:	0018      	movs	r0, r3
 8009018:	46bd      	mov	sp, r7
 800901a:	b005      	add	sp, #20
 800901c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800901e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	000a      	movs	r2, r1
 8009028:	1cfb      	adds	r3, r7, #3
 800902a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	23b0      	movs	r3, #176	@ 0xb0
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	58d3      	ldr	r3, [r2, r3]
 8009034:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009036:	1cfb      	adds	r3, r7, #3
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	b25b      	sxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	da0d      	bge.n	800905c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009040:	1cfb      	adds	r3, r7, #3
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	227f      	movs	r2, #127	@ 0x7f
 8009046:	4013      	ands	r3, r2
 8009048:	68f9      	ldr	r1, [r7, #12]
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	0013      	movs	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	189b      	adds	r3, r3, r2
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	18cb      	adds	r3, r1, r3
 8009056:	3302      	adds	r3, #2
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	e00d      	b.n	8009078 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800905c:	1cfb      	adds	r3, r7, #3
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	227f      	movs	r2, #127	@ 0x7f
 8009062:	401a      	ands	r2, r3
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	23b5      	movs	r3, #181	@ 0xb5
 8009068:	0059      	lsls	r1, r3, #1
 800906a:	0013      	movs	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	189b      	adds	r3, r3, r2
 8009070:	00db      	lsls	r3, r3, #3
 8009072:	18c3      	adds	r3, r0, r3
 8009074:	185b      	adds	r3, r3, r1
 8009076:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	b004      	add	sp, #16
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	000a      	movs	r2, r1
 800908a:	1cfb      	adds	r3, r7, #3
 800908c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908e:	210f      	movs	r1, #15
 8009090:	187b      	adds	r3, r7, r1
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009096:	260e      	movs	r6, #14
 8009098:	19bb      	adds	r3, r7, r6
 800909a:	2200      	movs	r2, #0
 800909c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	23b0      	movs	r3, #176	@ 0xb0
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	58d2      	ldr	r2, [r2, r3]
 80090a6:	000d      	movs	r5, r1
 80090a8:	187c      	adds	r4, r7, r1
 80090aa:	1cfb      	adds	r3, r7, #3
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	0019      	movs	r1, r3
 80090b0:	0010      	movs	r0, r2
 80090b2:	f7f8 fd95 	bl	8001be0 <HAL_PCD_SetAddress>
 80090b6:	0003      	movs	r3, r0
 80090b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ba:	19bc      	adds	r4, r7, r6
 80090bc:	197b      	adds	r3, r7, r5
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	0018      	movs	r0, r3
 80090c2:	f000 f87d 	bl	80091c0 <USBD_Get_USB_Status>
 80090c6:	0003      	movs	r3, r0
 80090c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80090ca:	19bb      	adds	r3, r7, r6
 80090cc:	781b      	ldrb	r3, [r3, #0]
}
 80090ce:	0018      	movs	r0, r3
 80090d0:	46bd      	mov	sp, r7
 80090d2:	b005      	add	sp, #20
 80090d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090d8:	b087      	sub	sp, #28
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	0008      	movs	r0, r1
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	0019      	movs	r1, r3
 80090e4:	230b      	movs	r3, #11
 80090e6:	18fb      	adds	r3, r7, r3
 80090e8:	1c02      	adds	r2, r0, #0
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	2408      	movs	r4, #8
 80090ee:	193b      	adds	r3, r7, r4
 80090f0:	1c0a      	adds	r2, r1, #0
 80090f2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f4:	2117      	movs	r1, #23
 80090f6:	187b      	adds	r3, r7, r1
 80090f8:	2200      	movs	r2, #0
 80090fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fc:	2516      	movs	r5, #22
 80090fe:	197b      	adds	r3, r7, r5
 8009100:	2200      	movs	r2, #0
 8009102:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	23b0      	movs	r3, #176	@ 0xb0
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	58d0      	ldr	r0, [r2, r3]
 800910c:	193b      	adds	r3, r7, r4
 800910e:	881d      	ldrh	r5, [r3, #0]
 8009110:	000e      	movs	r6, r1
 8009112:	187c      	adds	r4, r7, r1
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	230b      	movs	r3, #11
 8009118:	18fb      	adds	r3, r7, r3
 800911a:	7819      	ldrb	r1, [r3, #0]
 800911c:	002b      	movs	r3, r5
 800911e:	f7f8 fe81 	bl	8001e24 <HAL_PCD_EP_Transmit>
 8009122:	0003      	movs	r3, r0
 8009124:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009126:	2516      	movs	r5, #22
 8009128:	197c      	adds	r4, r7, r5
 800912a:	19bb      	adds	r3, r7, r6
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	0018      	movs	r0, r3
 8009130:	f000 f846 	bl	80091c0 <USBD_Get_USB_Status>
 8009134:	0003      	movs	r3, r0
 8009136:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009138:	197b      	adds	r3, r7, r5
 800913a:	781b      	ldrb	r3, [r3, #0]
}
 800913c:	0018      	movs	r0, r3
 800913e:	46bd      	mov	sp, r7
 8009140:	b007      	add	sp, #28
 8009142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009144 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	0008      	movs	r0, r1
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	0019      	movs	r1, r3
 8009152:	230b      	movs	r3, #11
 8009154:	18fb      	adds	r3, r7, r3
 8009156:	1c02      	adds	r2, r0, #0
 8009158:	701a      	strb	r2, [r3, #0]
 800915a:	2408      	movs	r4, #8
 800915c:	193b      	adds	r3, r7, r4
 800915e:	1c0a      	adds	r2, r1, #0
 8009160:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009162:	2117      	movs	r1, #23
 8009164:	187b      	adds	r3, r7, r1
 8009166:	2200      	movs	r2, #0
 8009168:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916a:	2516      	movs	r5, #22
 800916c:	197b      	adds	r3, r7, r5
 800916e:	2200      	movs	r2, #0
 8009170:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	23b0      	movs	r3, #176	@ 0xb0
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	58d0      	ldr	r0, [r2, r3]
 800917a:	193b      	adds	r3, r7, r4
 800917c:	881d      	ldrh	r5, [r3, #0]
 800917e:	000e      	movs	r6, r1
 8009180:	187c      	adds	r4, r7, r1
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	230b      	movs	r3, #11
 8009186:	18fb      	adds	r3, r7, r3
 8009188:	7819      	ldrb	r1, [r3, #0]
 800918a:	002b      	movs	r3, r5
 800918c:	f7f8 fe13 	bl	8001db6 <HAL_PCD_EP_Receive>
 8009190:	0003      	movs	r3, r0
 8009192:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009194:	2516      	movs	r5, #22
 8009196:	197c      	adds	r4, r7, r5
 8009198:	19bb      	adds	r3, r7, r6
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	0018      	movs	r0, r3
 800919e:	f000 f80f 	bl	80091c0 <USBD_Get_USB_Status>
 80091a2:	0003      	movs	r3, r0
 80091a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80091a6:	197b      	adds	r3, r7, r5
 80091a8:	781b      	ldrb	r3, [r3, #0]
}
 80091aa:	0018      	movs	r0, r3
 80091ac:	46bd      	mov	sp, r7
 80091ae:	b007      	add	sp, #28
 80091b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091b2 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80091b6:	f7f7 f9a1 	bl	80004fc <SystemClock_Config>
}
 80091ba:	46c0      	nop			@ (mov r8, r8)
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	0002      	movs	r2, r0
 80091c8:	1dfb      	adds	r3, r7, #7
 80091ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091cc:	230f      	movs	r3, #15
 80091ce:	18fb      	adds	r3, r7, r3
 80091d0:	2200      	movs	r2, #0
 80091d2:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80091d4:	1dfb      	adds	r3, r7, #7
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d017      	beq.n	800920c <USBD_Get_USB_Status+0x4c>
 80091dc:	dc1b      	bgt.n	8009216 <USBD_Get_USB_Status+0x56>
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d00f      	beq.n	8009202 <USBD_Get_USB_Status+0x42>
 80091e2:	dc18      	bgt.n	8009216 <USBD_Get_USB_Status+0x56>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <USBD_Get_USB_Status+0x2e>
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d005      	beq.n	80091f8 <USBD_Get_USB_Status+0x38>
 80091ec:	e013      	b.n	8009216 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091ee:	230f      	movs	r3, #15
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
    break;
 80091f6:	e013      	b.n	8009220 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091f8:	230f      	movs	r3, #15
 80091fa:	18fb      	adds	r3, r7, r3
 80091fc:	2202      	movs	r2, #2
 80091fe:	701a      	strb	r2, [r3, #0]
    break;
 8009200:	e00e      	b.n	8009220 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009202:	230f      	movs	r3, #15
 8009204:	18fb      	adds	r3, r7, r3
 8009206:	2201      	movs	r2, #1
 8009208:	701a      	strb	r2, [r3, #0]
    break;
 800920a:	e009      	b.n	8009220 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800920c:	230f      	movs	r3, #15
 800920e:	18fb      	adds	r3, r7, r3
 8009210:	2202      	movs	r2, #2
 8009212:	701a      	strb	r2, [r3, #0]
    break;
 8009214:	e004      	b.n	8009220 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8009216:	230f      	movs	r3, #15
 8009218:	18fb      	adds	r3, r7, r3
 800921a:	2202      	movs	r2, #2
 800921c:	701a      	strb	r2, [r3, #0]
    break;
 800921e:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8009220:	230f      	movs	r3, #15
 8009222:	18fb      	adds	r3, r7, r3
 8009224:	781b      	ldrb	r3, [r3, #0]
}
 8009226:	0018      	movs	r0, r3
 8009228:	46bd      	mov	sp, r7
 800922a:	b004      	add	sp, #16
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <malloc>:
 8009230:	b510      	push	{r4, lr}
 8009232:	4b03      	ldr	r3, [pc, #12]	@ (8009240 <malloc+0x10>)
 8009234:	0001      	movs	r1, r0
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	f000 f830 	bl	800929c <_malloc_r>
 800923c:	bd10      	pop	{r4, pc}
 800923e:	46c0      	nop			@ (mov r8, r8)
 8009240:	20000150 	.word	0x20000150

08009244 <free>:
 8009244:	b510      	push	{r4, lr}
 8009246:	4b03      	ldr	r3, [pc, #12]	@ (8009254 <free+0x10>)
 8009248:	0001      	movs	r1, r0
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	f000 f8fc 	bl	8009448 <_free_r>
 8009250:	bd10      	pop	{r4, pc}
 8009252:	46c0      	nop			@ (mov r8, r8)
 8009254:	20000150 	.word	0x20000150

08009258 <sbrk_aligned>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4e0f      	ldr	r6, [pc, #60]	@ (8009298 <sbrk_aligned+0x40>)
 800925c:	000d      	movs	r5, r1
 800925e:	6831      	ldr	r1, [r6, #0]
 8009260:	0004      	movs	r4, r0
 8009262:	2900      	cmp	r1, #0
 8009264:	d102      	bne.n	800926c <sbrk_aligned+0x14>
 8009266:	f000 f8b1 	bl	80093cc <_sbrk_r>
 800926a:	6030      	str	r0, [r6, #0]
 800926c:	0029      	movs	r1, r5
 800926e:	0020      	movs	r0, r4
 8009270:	f000 f8ac 	bl	80093cc <_sbrk_r>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d103      	bne.n	8009280 <sbrk_aligned+0x28>
 8009278:	2501      	movs	r5, #1
 800927a:	426d      	negs	r5, r5
 800927c:	0028      	movs	r0, r5
 800927e:	bd70      	pop	{r4, r5, r6, pc}
 8009280:	2303      	movs	r3, #3
 8009282:	1cc5      	adds	r5, r0, #3
 8009284:	439d      	bics	r5, r3
 8009286:	42a8      	cmp	r0, r5
 8009288:	d0f8      	beq.n	800927c <sbrk_aligned+0x24>
 800928a:	1a29      	subs	r1, r5, r0
 800928c:	0020      	movs	r0, r4
 800928e:	f000 f89d 	bl	80093cc <_sbrk_r>
 8009292:	3001      	adds	r0, #1
 8009294:	d1f2      	bne.n	800927c <sbrk_aligned+0x24>
 8009296:	e7ef      	b.n	8009278 <sbrk_aligned+0x20>
 8009298:	20000b50 	.word	0x20000b50

0800929c <_malloc_r>:
 800929c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800929e:	2203      	movs	r2, #3
 80092a0:	1ccb      	adds	r3, r1, #3
 80092a2:	4393      	bics	r3, r2
 80092a4:	3308      	adds	r3, #8
 80092a6:	0005      	movs	r5, r0
 80092a8:	001f      	movs	r7, r3
 80092aa:	2b0c      	cmp	r3, #12
 80092ac:	d234      	bcs.n	8009318 <_malloc_r+0x7c>
 80092ae:	270c      	movs	r7, #12
 80092b0:	42b9      	cmp	r1, r7
 80092b2:	d833      	bhi.n	800931c <_malloc_r+0x80>
 80092b4:	0028      	movs	r0, r5
 80092b6:	f000 f871 	bl	800939c <__malloc_lock>
 80092ba:	4e37      	ldr	r6, [pc, #220]	@ (8009398 <_malloc_r+0xfc>)
 80092bc:	6833      	ldr	r3, [r6, #0]
 80092be:	001c      	movs	r4, r3
 80092c0:	2c00      	cmp	r4, #0
 80092c2:	d12f      	bne.n	8009324 <_malloc_r+0x88>
 80092c4:	0039      	movs	r1, r7
 80092c6:	0028      	movs	r0, r5
 80092c8:	f7ff ffc6 	bl	8009258 <sbrk_aligned>
 80092cc:	0004      	movs	r4, r0
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	d15f      	bne.n	8009392 <_malloc_r+0xf6>
 80092d2:	6834      	ldr	r4, [r6, #0]
 80092d4:	9400      	str	r4, [sp, #0]
 80092d6:	9b00      	ldr	r3, [sp, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d14a      	bne.n	8009372 <_malloc_r+0xd6>
 80092dc:	2c00      	cmp	r4, #0
 80092de:	d052      	beq.n	8009386 <_malloc_r+0xea>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	0028      	movs	r0, r5
 80092e4:	18e3      	adds	r3, r4, r3
 80092e6:	9900      	ldr	r1, [sp, #0]
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	f000 f86f 	bl	80093cc <_sbrk_r>
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	4283      	cmp	r3, r0
 80092f2:	d148      	bne.n	8009386 <_malloc_r+0xea>
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	0028      	movs	r0, r5
 80092f8:	1aff      	subs	r7, r7, r3
 80092fa:	0039      	movs	r1, r7
 80092fc:	f7ff ffac 	bl	8009258 <sbrk_aligned>
 8009300:	3001      	adds	r0, #1
 8009302:	d040      	beq.n	8009386 <_malloc_r+0xea>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	19db      	adds	r3, r3, r7
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	6833      	ldr	r3, [r6, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	2a00      	cmp	r2, #0
 8009310:	d133      	bne.n	800937a <_malloc_r+0xde>
 8009312:	9b00      	ldr	r3, [sp, #0]
 8009314:	6033      	str	r3, [r6, #0]
 8009316:	e019      	b.n	800934c <_malloc_r+0xb0>
 8009318:	2b00      	cmp	r3, #0
 800931a:	dac9      	bge.n	80092b0 <_malloc_r+0x14>
 800931c:	230c      	movs	r3, #12
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	2000      	movs	r0, #0
 8009322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009324:	6821      	ldr	r1, [r4, #0]
 8009326:	1bc9      	subs	r1, r1, r7
 8009328:	d420      	bmi.n	800936c <_malloc_r+0xd0>
 800932a:	290b      	cmp	r1, #11
 800932c:	d90a      	bls.n	8009344 <_malloc_r+0xa8>
 800932e:	19e2      	adds	r2, r4, r7
 8009330:	6027      	str	r7, [r4, #0]
 8009332:	42a3      	cmp	r3, r4
 8009334:	d104      	bne.n	8009340 <_malloc_r+0xa4>
 8009336:	6032      	str	r2, [r6, #0]
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	6011      	str	r1, [r2, #0]
 800933c:	6053      	str	r3, [r2, #4]
 800933e:	e005      	b.n	800934c <_malloc_r+0xb0>
 8009340:	605a      	str	r2, [r3, #4]
 8009342:	e7f9      	b.n	8009338 <_malloc_r+0x9c>
 8009344:	6862      	ldr	r2, [r4, #4]
 8009346:	42a3      	cmp	r3, r4
 8009348:	d10e      	bne.n	8009368 <_malloc_r+0xcc>
 800934a:	6032      	str	r2, [r6, #0]
 800934c:	0028      	movs	r0, r5
 800934e:	f000 f82d 	bl	80093ac <__malloc_unlock>
 8009352:	0020      	movs	r0, r4
 8009354:	2207      	movs	r2, #7
 8009356:	300b      	adds	r0, #11
 8009358:	1d23      	adds	r3, r4, #4
 800935a:	4390      	bics	r0, r2
 800935c:	1ac2      	subs	r2, r0, r3
 800935e:	4298      	cmp	r0, r3
 8009360:	d0df      	beq.n	8009322 <_malloc_r+0x86>
 8009362:	1a1b      	subs	r3, r3, r0
 8009364:	50a3      	str	r3, [r4, r2]
 8009366:	e7dc      	b.n	8009322 <_malloc_r+0x86>
 8009368:	605a      	str	r2, [r3, #4]
 800936a:	e7ef      	b.n	800934c <_malloc_r+0xb0>
 800936c:	0023      	movs	r3, r4
 800936e:	6864      	ldr	r4, [r4, #4]
 8009370:	e7a6      	b.n	80092c0 <_malloc_r+0x24>
 8009372:	9c00      	ldr	r4, [sp, #0]
 8009374:	6863      	ldr	r3, [r4, #4]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	e7ad      	b.n	80092d6 <_malloc_r+0x3a>
 800937a:	001a      	movs	r2, r3
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	42a3      	cmp	r3, r4
 8009380:	d1fb      	bne.n	800937a <_malloc_r+0xde>
 8009382:	2300      	movs	r3, #0
 8009384:	e7da      	b.n	800933c <_malloc_r+0xa0>
 8009386:	230c      	movs	r3, #12
 8009388:	0028      	movs	r0, r5
 800938a:	602b      	str	r3, [r5, #0]
 800938c:	f000 f80e 	bl	80093ac <__malloc_unlock>
 8009390:	e7c6      	b.n	8009320 <_malloc_r+0x84>
 8009392:	6007      	str	r7, [r0, #0]
 8009394:	e7da      	b.n	800934c <_malloc_r+0xb0>
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	20000b54 	.word	0x20000b54

0800939c <__malloc_lock>:
 800939c:	b510      	push	{r4, lr}
 800939e:	4802      	ldr	r0, [pc, #8]	@ (80093a8 <__malloc_lock+0xc>)
 80093a0:	f000 f850 	bl	8009444 <__retarget_lock_acquire_recursive>
 80093a4:	bd10      	pop	{r4, pc}
 80093a6:	46c0      	nop			@ (mov r8, r8)
 80093a8:	20000c94 	.word	0x20000c94

080093ac <__malloc_unlock>:
 80093ac:	b510      	push	{r4, lr}
 80093ae:	4802      	ldr	r0, [pc, #8]	@ (80093b8 <__malloc_unlock+0xc>)
 80093b0:	f000 f849 	bl	8009446 <__retarget_lock_release_recursive>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	46c0      	nop			@ (mov r8, r8)
 80093b8:	20000c94 	.word	0x20000c94

080093bc <memset>:
 80093bc:	0003      	movs	r3, r0
 80093be:	1882      	adds	r2, r0, r2
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d100      	bne.n	80093c6 <memset+0xa>
 80093c4:	4770      	bx	lr
 80093c6:	7019      	strb	r1, [r3, #0]
 80093c8:	3301      	adds	r3, #1
 80093ca:	e7f9      	b.n	80093c0 <memset+0x4>

080093cc <_sbrk_r>:
 80093cc:	2300      	movs	r3, #0
 80093ce:	b570      	push	{r4, r5, r6, lr}
 80093d0:	4d06      	ldr	r5, [pc, #24]	@ (80093ec <_sbrk_r+0x20>)
 80093d2:	0004      	movs	r4, r0
 80093d4:	0008      	movs	r0, r1
 80093d6:	602b      	str	r3, [r5, #0]
 80093d8:	f7f7 fce4 	bl	8000da4 <_sbrk>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d103      	bne.n	80093e8 <_sbrk_r+0x1c>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d000      	beq.n	80093e8 <_sbrk_r+0x1c>
 80093e6:	6023      	str	r3, [r4, #0]
 80093e8:	bd70      	pop	{r4, r5, r6, pc}
 80093ea:	46c0      	nop			@ (mov r8, r8)
 80093ec:	20000c90 	.word	0x20000c90

080093f0 <__errno>:
 80093f0:	4b01      	ldr	r3, [pc, #4]	@ (80093f8 <__errno+0x8>)
 80093f2:	6818      	ldr	r0, [r3, #0]
 80093f4:	4770      	bx	lr
 80093f6:	46c0      	nop			@ (mov r8, r8)
 80093f8:	20000150 	.word	0x20000150

080093fc <__libc_init_array>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	2600      	movs	r6, #0
 8009400:	4c0c      	ldr	r4, [pc, #48]	@ (8009434 <__libc_init_array+0x38>)
 8009402:	4d0d      	ldr	r5, [pc, #52]	@ (8009438 <__libc_init_array+0x3c>)
 8009404:	1b64      	subs	r4, r4, r5
 8009406:	10a4      	asrs	r4, r4, #2
 8009408:	42a6      	cmp	r6, r4
 800940a:	d109      	bne.n	8009420 <__libc_init_array+0x24>
 800940c:	2600      	movs	r6, #0
 800940e:	f000 f865 	bl	80094dc <_init>
 8009412:	4c0a      	ldr	r4, [pc, #40]	@ (800943c <__libc_init_array+0x40>)
 8009414:	4d0a      	ldr	r5, [pc, #40]	@ (8009440 <__libc_init_array+0x44>)
 8009416:	1b64      	subs	r4, r4, r5
 8009418:	10a4      	asrs	r4, r4, #2
 800941a:	42a6      	cmp	r6, r4
 800941c:	d105      	bne.n	800942a <__libc_init_array+0x2e>
 800941e:	bd70      	pop	{r4, r5, r6, pc}
 8009420:	00b3      	lsls	r3, r6, #2
 8009422:	58eb      	ldr	r3, [r5, r3]
 8009424:	4798      	blx	r3
 8009426:	3601      	adds	r6, #1
 8009428:	e7ee      	b.n	8009408 <__libc_init_array+0xc>
 800942a:	00b3      	lsls	r3, r6, #2
 800942c:	58eb      	ldr	r3, [r5, r3]
 800942e:	4798      	blx	r3
 8009430:	3601      	adds	r6, #1
 8009432:	e7f2      	b.n	800941a <__libc_init_array+0x1e>
 8009434:	0800965c 	.word	0x0800965c
 8009438:	0800965c 	.word	0x0800965c
 800943c:	08009660 	.word	0x08009660
 8009440:	0800965c 	.word	0x0800965c

08009444 <__retarget_lock_acquire_recursive>:
 8009444:	4770      	bx	lr

08009446 <__retarget_lock_release_recursive>:
 8009446:	4770      	bx	lr

08009448 <_free_r>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	0005      	movs	r5, r0
 800944c:	1e0c      	subs	r4, r1, #0
 800944e:	d010      	beq.n	8009472 <_free_r+0x2a>
 8009450:	3c04      	subs	r4, #4
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	da00      	bge.n	800945a <_free_r+0x12>
 8009458:	18e4      	adds	r4, r4, r3
 800945a:	0028      	movs	r0, r5
 800945c:	f7ff ff9e 	bl	800939c <__malloc_lock>
 8009460:	4a1d      	ldr	r2, [pc, #116]	@ (80094d8 <_free_r+0x90>)
 8009462:	6813      	ldr	r3, [r2, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d105      	bne.n	8009474 <_free_r+0x2c>
 8009468:	6063      	str	r3, [r4, #4]
 800946a:	6014      	str	r4, [r2, #0]
 800946c:	0028      	movs	r0, r5
 800946e:	f7ff ff9d 	bl	80093ac <__malloc_unlock>
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	42a3      	cmp	r3, r4
 8009476:	d908      	bls.n	800948a <_free_r+0x42>
 8009478:	6820      	ldr	r0, [r4, #0]
 800947a:	1821      	adds	r1, r4, r0
 800947c:	428b      	cmp	r3, r1
 800947e:	d1f3      	bne.n	8009468 <_free_r+0x20>
 8009480:	6819      	ldr	r1, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	1809      	adds	r1, r1, r0
 8009486:	6021      	str	r1, [r4, #0]
 8009488:	e7ee      	b.n	8009468 <_free_r+0x20>
 800948a:	001a      	movs	r2, r3
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <_free_r+0x4e>
 8009492:	42a3      	cmp	r3, r4
 8009494:	d9f9      	bls.n	800948a <_free_r+0x42>
 8009496:	6811      	ldr	r1, [r2, #0]
 8009498:	1850      	adds	r0, r2, r1
 800949a:	42a0      	cmp	r0, r4
 800949c:	d10b      	bne.n	80094b6 <_free_r+0x6e>
 800949e:	6820      	ldr	r0, [r4, #0]
 80094a0:	1809      	adds	r1, r1, r0
 80094a2:	1850      	adds	r0, r2, r1
 80094a4:	6011      	str	r1, [r2, #0]
 80094a6:	4283      	cmp	r3, r0
 80094a8:	d1e0      	bne.n	800946c <_free_r+0x24>
 80094aa:	6818      	ldr	r0, [r3, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	1841      	adds	r1, r0, r1
 80094b0:	6011      	str	r1, [r2, #0]
 80094b2:	6053      	str	r3, [r2, #4]
 80094b4:	e7da      	b.n	800946c <_free_r+0x24>
 80094b6:	42a0      	cmp	r0, r4
 80094b8:	d902      	bls.n	80094c0 <_free_r+0x78>
 80094ba:	230c      	movs	r3, #12
 80094bc:	602b      	str	r3, [r5, #0]
 80094be:	e7d5      	b.n	800946c <_free_r+0x24>
 80094c0:	6820      	ldr	r0, [r4, #0]
 80094c2:	1821      	adds	r1, r4, r0
 80094c4:	428b      	cmp	r3, r1
 80094c6:	d103      	bne.n	80094d0 <_free_r+0x88>
 80094c8:	6819      	ldr	r1, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	1809      	adds	r1, r1, r0
 80094ce:	6021      	str	r1, [r4, #0]
 80094d0:	6063      	str	r3, [r4, #4]
 80094d2:	6054      	str	r4, [r2, #4]
 80094d4:	e7ca      	b.n	800946c <_free_r+0x24>
 80094d6:	46c0      	nop			@ (mov r8, r8)
 80094d8:	20000b54 	.word	0x20000b54

080094dc <_init>:
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	46c0      	nop			@ (mov r8, r8)
 80094e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e2:	bc08      	pop	{r3}
 80094e4:	469e      	mov	lr, r3
 80094e6:	4770      	bx	lr

080094e8 <_fini>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	46c0      	nop			@ (mov r8, r8)
 80094ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ee:	bc08      	pop	{r3}
 80094f0:	469e      	mov	lr, r3
 80094f2:	4770      	bx	lr
